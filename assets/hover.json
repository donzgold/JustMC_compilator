{"event<bell_ring>":"```justcode\nevent<bell_ring>\n```\n\n**Название**: Звон колокола\\\n**Описание**: Выполняет код, когда в мире звонит колокол.\\\n**ОТМЕНЯЕМОЕ**","event<block_burn>":"```justcode\nevent<block_burn>\n```\n\n**Название**: Сгорание блока\\\n**Описание**: Выполняет код в момент сгорания блока.\\\n**ОТМЕНЯЕМОЕ**","event<block_damage>":"```justcode\nevent<block_damage>\n```\n\n**Название**: Игрок начинает ломать блок\\\n**Описание**: Выполняет код, когда игрок начинает ломать блок.\\\n**ОТМЕНЯЕМОЕ**","event<block_damage_abort>":"```justcode\nevent<block_damage_abort>\n```\n\n**Название**: Игрок перестаёт ломать блок\\\n**Описание**: Выполняет код, когда игрок перестаёт ломать блок.","event<block_explode>":"```justcode\nevent<block_explode>\n```\n\n**Название**: Блок взрывается\\\n**Описание**: Выполняет код, когда блок создаёт взрыв.\\\n**ОТМЕНЯЕМОЕ**","event<block_fade>":"```justcode\nevent<block_fade>\n```\n\n**Название**: Исчезновение блока\\\n**Описание**: Выполняет код, когда блок исчезает, к примеру, когда тает лёд или снег, затухает огонь или засыхает коралл.\\\n**Работает с:** Снегом, Льдом, Огнём, Кораллами, Черепашьими яйцами, Дёрном\\\n**ОТМЕНЯЕМОЕ**","event<block_fall>":"```justcode\nevent<block_fall>\n```\n\n**Название**: Блок начал падать\\\n**Описание**: Выполняет код, когда блок, затронутый гравитацией, превращается в падающий блок.\\\n**ОТМЕНЯЕМОЕ**","event<block_fertilize>":"```justcode\nevent<block_fertilize>\n```\n\n**Название**: Удобрение блока\\\n**Описание**: Выполняет код, когда блок удобряется.\\\n**ОТМЕНЯЕМОЕ**","event<block_flow>":"```justcode\nevent<block_flow>\n```\n\n**Название**: Перемещение блока\\\n**Описание**: Выполняет код, когда блок перемещается.\\\n**Работает с:** Жидкостями, Яйцом дракона\\\n**ОТМЕНЯЕМОЕ**","event<block_form>":"```justcode\nevent<block_form>\n```\n\n**Название**: Генерация блока\\\n**Описание**: Выполняет код, когда блок генерируется впоследствии взаимодействия блоков.\\\n**Работает с:** Снегом, Льдом, Генерацией булыжника и т.п., Затвердеванием цемента\\\n**ОТМЕНЯЕМОЕ**","event<block_form_by_entity>":"```justcode\nevent<block_form_by_entity>\n```\n\n**Название**: Генерация блока из-за сущности\\\n**Описание**: Выполняет код, когда блок генерируется впоследствии взаимодействия блоков и сущностей.\\\n**Работает с:** Снежными големами, Зачарованием \"Ледоход\"\\\n**ОТМЕНЯЕМОЕ**","event<block_grow>":"```justcode\nevent<block_grow>\n```\n\n**Название**: Рост блока\\\n**Описание**: Выполняет код, когда блок вырастает.\\\n**Работает с:** Семенами, Тыквами и арбузами, Черепашьими яйцами\\\n**ОТМЕНЯЕМОЕ**","event<block_ignite>":"```justcode\nevent<block_ignite>\n```\n\n**Название**: Блок поджигается\\\n**Описание**: Выполняет код, когда блок поджигается.","event<block_piston_extend>":"```justcode\nevent<block_piston_extend>\n```\n\n**Название**: Поршень выдвигается\\\n**Описание**: Выполняет код, когда поршень выдвигает блок.\\\n**ОТМЕНЯЕМОЕ**","event<block_piston_retract>":"```justcode\nevent<block_piston_retract>\n```\n\n**Название**: Поршень втягивается\\\n**Описание**: Выполняет код, когда поршень втягивает блок.\\\n**ОТМЕНЯЕМОЕ**","event<block_spread>":"```justcode\nevent<block_spread>\n```\n\n**Название**: Распространение блока\\\n**Описание**: Выполняет код, когда блок распространяется.\\\n**Работает с:** Грибами, Огнём\\\n**ОТМЕНЯЕМОЕ**","event<brew_complete>":"```justcode\nevent<brew_complete>\n```\n\n**Название**: Завершение зельеварения\\\n**Описание**: Выполняет код, когда зельеварение в блоке заканчивается.\\\n**ОТМЕНЯЕМОЕ**","event<crafter_craft>":"```justcode\nevent<crafter_craft>\n```\n\n**Название**: Сборщик создаёт предмет\\\n**Описание**: Выполняет код, когда сборщик создаёт предмет.\\\n**Работает с:** Сборщиками\\\n**ОТМЕНЯЕМОЕ**","event<dispenser_dispense_item>":"```justcode\nevent<dispenser_dispense_item>\n```\n\n**Название**: Блок выбрасывает предмет\\\n**Описание**: Выполняет код, когда блок выбрасывает предмет.\\\n**ОТМЕНЯЕМОЕ**","event<dispenser_equip_armor>":"```justcode\nevent<dispenser_equip_armor>\n```\n\n**Название**: Раздатчик надевает броню\\\n**Описание**: Выполняет код, когда раздатчик надевает броню на сущность.\\\n**ОТМЕНЯЕМОЕ**","event<dispenser_shear_sheep>":"```justcode\nevent<dispenser_shear_sheep>\n```\n\n**Название**: Раздатчик подстриг овцу\\\n**Описание**: Выполняет код, когда раздатчик срезает шерсть с овцы.\\\n**ОТМЕНЯЕМОЕ**","event<elder_guardian_appears_at_player>":"```justcode\nevent<elder_guardian_appears_at_player>\n```\n\n**Название**: Древний страж проклял игрока\\\n**Описание**: Выполняет код, когда древний страж проклинает игрока.\\\n**ОТМЕНЯЕМОЕ**","event<enderman_attack_player>":"```justcode\nevent<enderman_attack_player>\n```\n\n**Название**: Эндермен злится на игрока\\\n**Описание**: Выполняет код, когда Эндермен злится на игрока.\\\n**ОТМЕНЯЕМОЕ**","event<enderman_escape>":"```justcode\nevent<enderman_escape>\n```\n\n**Название**: Эндермен убегает\\\n**Описание**: Выполняет код, когда Эндермен телепортируется, чтобы избежать что-либо.\\\n**ОТМЕНЯЕМОЕ**","event<entity_bell_ring>":"```justcode\nevent<entity_bell_ring>\n```\n\n**Название**: Сущность звонит в колокол\\\n**Описание**: Выполняет код, когда сущность звонит в колокол.\\\n**ОТМЕНЯЕМОЕ**","event<entity_combust>":"```justcode\nevent<entity_combust>\n```\n\n**Название**: Сущность загорелась\\\n**Описание**: Выполняет код, когда сущность загорается.\\\n**ОТМЕНЯЕМОЕ**","event<entity_damage_entity>":"```justcode\nevent<entity_damage_entity>\n```\n\n**Название**: Моб наносит урон мобу\\\n**Описание**: Выполняет код, когда моб наносит урон другому мобу.\\\n**ОТМЕНЯЕМОЕ**","event<entity_damage_player>":"```justcode\nevent<entity_damage_player>\n```\n\n**Название**: Существо ранит игрока\\\n**Описание**: Выполняет код, когда существо ранит игрока.\\\n**ОТМЕНЯЕМОЕ**","event<entity_death>":"```justcode\nevent<entity_death>\n```\n\n**Название**: Смерть сущности\\\n**Описание**: Выполняет код, когда сущность умирает.\\\n**ОТМЕНЯЕМОЕ**","event<entity_drop_item>":"```justcode\nevent<entity_drop_item>\n```\n\n**Название**: Существо выбрасывает предмет\\\n**Описание**: Выполняет код, когда существо выбрасывает предмет.\\\n**ОТМЕНЯЕМОЕ**","event<entity_dummy>":"```justcode\nevent<entity_dummy>\n```\n\n**Название**: ...\\\n**Описание**: ...","event<entity_equipment_changed>":"```justcode\nevent<entity_equipment_changed>\n```\n\n**Название**: Сущность меняет экипировку\\\n**Описание**: Выполняет код, когда экипировка сущности меняется.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Событие возникает после изменения аттрибутов или зачарований любой из частей экипировки.","event<entity_explode>":"```justcode\nevent<entity_explode>\n```\n\n**Название**: Сущность взрывается\\\n**Описание**: Выполняет код, когда сущность взрывается.\\\n**ОТМЕНЯЕМОЕ**","event<entity_explosion>":"```justcode\nevent<entity_explosion>\n```\n\n**Название**: Сущность решила взорваться\\\n**Описание**: Выполняет код, когда сущность приняла решение взорваться.\\\n**ОТМЕНЯЕМОЕ**","event<entity_heal>":"```justcode\nevent<entity_heal>\n```\n\n**Название**: Сущность исцеляется\\\n**Описание**: Выполняет код, когда сущность исцеляется.\\\n**ОТМЕНЯЕМОЕ**","event<entity_interact>":"```justcode\nevent<entity_interact>\n```\n\n**Название**: Сущность взаимодействует с миром\\\n**Описание**: Выполняет код, когда сущность взаимодействует с миром.\\\n**ОТМЕНЯЕМОЕ**","event<entity_kill_entity>":"```justcode\nevent<entity_kill_entity>\n```\n\n**Название**: Моб убил моба\\\n**Описание**: Выполняет код, когда моб убил другого моба.\\\n**ОТМЕНЯЕМОЕ**","event<entity_knockback>":"```justcode\nevent<entity_knockback>\n```\n\n**Название**: Сущность отталкивается\\\n**Описание**: Выполняет код, когда сущность отталкивается.\\\n**ОТМЕНЯЕМОЕ**","event<entity_load_crossbow>":"```justcode\nevent<entity_load_crossbow>\n```\n\n**Название**: Сущность заряжает арбалет\\\n**Описание**: Выполняет код, когда сущность заряжает арбалет.\\\n**ОТМЕНЯЕМОЕ**","event<entity_pickup_item>":"```justcode\nevent<entity_pickup_item>\n```\n\n**Название**: Существо поднимает предмет\\\n**Описание**: Выполняет код, когда существо поднимает предмет.\\\n**ОТМЕНЯЕМОЕ**","event<entity_removed_from_world>":"```justcode\nevent<entity_removed_from_world>\n```\n\n**Название**: Удаление сущности\\\n**Описание**: Выполняет код, когда из мира удаляется сущность.","event<entity_resurrect>":"```justcode\nevent<entity_resurrect>\n```\n\n**Название**: Сущность возрождается от тотема\\\n**Описание**: Выполняет код, когда сущность возрождается от Тотема бессмертия.\\\n**ОТМЕНЯЕМОЕ**","event<entity_shot_bow>":"```justcode\nevent<entity_shot_bow>\n```\n\n**Название**: Сущность стреляет\\\n**Описание**: Выполняет код, когда сущность стреляет из лука или арбалета.\\\n**ОТМЕНЯЕМОЕ**","event<entity_spawn>":"```justcode\nevent<entity_spawn>\n```\n\n**Название**: Сущность создана\\\n**Описание**: Выполняет код, когда в мире появляется новая сущность.\\\n**ОТМЕНЯЕМОЕ**","event<entity_spell_cast>":"```justcode\nevent<entity_spell_cast>\n```\n\n**Название**: Существо выполняет заклинание\\\n**Описание**: Выполняет код, когда существо выполняет заклинание.\\\n**Работает с:** Вызыватель, Иллюзор\\\n**ОТМЕНЯЕМОЕ**","event<entity_start_gliding>":"```justcode\nevent<entity_start_gliding>\n```\n\n**Название**: Сущность начинает лететь на элитрах\\\n**Описание**: Выполняет код, когда сущность начинает лететь на элитрах.\\\n**ОТМЕНЯЕМОЕ**","event<entity_stop_gliding>":"```justcode\nevent<entity_stop_gliding>\n```\n\n**Название**: Сущность перестаёт лететь на элитрах\\\n**Описание**: Выполняет код, когда сущность перестаёт лететь на элитрах.\\\n**ОТМЕНЯЕМОЕ**","event<entity_take_damage>":"```justcode\nevent<entity_take_damage>\n```\n\n**Название**: Сущность получает урон\\\n**Описание**: Выполняет код, когда сущность получает урон.\\\n**ОТМЕНЯЕМОЕ**","event<entity_teleport>":"```justcode\nevent<entity_teleport>\n```\n\n**Название**: Сущность телепортируется\\\n**Описание**: Выполняет код, когда сущность телепортируется.\\\n**ОТМЕНЯЕМОЕ**","event<entity_transform>":"```justcode\nevent<entity_transform>\n```\n\n**Название**: Сущность заменяется другой сущностью\\\n**Описание**: Выполняет код, когда сущность заменяется другой сущностью.\\\n**ОТМЕНЯЕМОЕ**","event<falling_block_land>":"```justcode\nevent<falling_block_land>\n```\n\n**Название**: Падающий блок приземляется\\\n**Описание**: Выполняет код, когда падающий блок превращается в обычный блок.\\\n**ОТМЕНЯЕМОЕ**","event<firework_explode>":"```justcode\nevent<firework_explode>\n```\n\n**Название**: Фейерверк взрывается\\\n**Описание**: Выполняет код, когда взрывается фейерверк.\\\n**ОТМЕНЯЕМОЕ**","event<fishing_hook_state_change>":"```justcode\nevent<fishing_hook_state_change>\n```\n\n**Название**: Поплавок удочки изменяет состояние\\\n**Описание**: Выполняет код, когда поплавок удочки изменяет своё состояние.\\\n**Работает с:** Поплавком удочки\\\n**ОТМЕНЯЕМОЕ**","event<fluid_level_change>":"```justcode\nevent<fluid_level_change>\n```\n\n**Название**: Изменение уровня воды\\\n**Описание**: Выполняет код, когда изменяется уровень воды в блоке.\\\n**ОТМЕНЯЕМОЕ**","event<furnace_burn>":"```justcode\nevent<furnace_burn>\n```\n\n**Название**: Печь использует топливо\\\n**Описание**: Выполняет код, когда печь использует предмет как топливо.\\\n**Работает с:** Печами, Плавильнями, Коптильнями\\\n**ОТМЕНЯЕМОЕ**","event<furnace_smelt>":"```justcode\nevent<furnace_smelt>\n```\n\n**Название**: Печь закончила плавку\\\n**Описание**: Выполняет код, когда печь заканчивает плавку.\\\n**Работает с:** Печами, Плавильнями, Коптильнями\\\n**ОТМЕНЯЕМОЕ**","event<furnace_start_smelt>":"```justcode\nevent<furnace_start_smelt>\n```\n\n**Название**: Печь начала плавку\\\n**Описание**: Выполняет код, когда печь начинает плавку.\\\n**Работает с:** Печами, Плавильнями, Коптильнями","event<goat_ram_entity>":"```justcode\nevent<goat_ram_entity>\n```\n\n**Название**: Коза таранит сущность\\\n**Описание**: Выполняет код, когда Коза таранит сущность.\\\n**ОТМЕНЯЕМОЕ**","event<hanging_break>":"```justcode\nevent<hanging_break>\n```\n\n**Название**: Ломание висящего существа\\\n**Описание**: Выполняет код, когда ломается висящая сущность.\\\n**Работает с:** Картинами, Рамками, Поводками\\\n**ОТМЕНЯЕМОЕ**","event<hopper_pickup_item>":"```justcode\nevent<hopper_pickup_item>\n```\n\n**Название**: Воронка подбирает предмет\\\n**Описание**: Выполняет код, когда воронка подбирает предмет.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Чтобы выбрать предмет как сущность, используйте цель \"Жертва\".\\\n**ОТМЕНЯЕМОЕ**","event<item_despawn>":"```justcode\nevent<item_despawn>\n```\n\n**Название**: Предмет исчез\\\n**Описание**: Выполняет код, когда предмет исчезает из мира спустя 5 минут после его создания.\\\n**ОТМЕНЯЕМОЕ**","event<item_merge>":"```justcode\nevent<item_merge>\n```\n\n**Название**: Предметы на земле обьединяются\\\n**Описание**: Выполняет код, когда рядом лежащие предметы обьединяются в единый стак.\\\n**ОТМЕНЯЕМОЕ**","event<item_moved_into_container>":"```justcode\nevent<item_moved_into_container>\n```\n\n**Название**: Предмет переместился в контейнер\\\n**Описание**: Выполняет код, когда предмет перемещается в контейнер.\\\n**ОТМЕНЯЕМОЕ**","event<leaves_decay>":"```justcode\nevent<leaves_decay>\n```\n\n**Название**: Опадание листьев\\\n**Описание**: Выполняет код, когда листья опадают.\\\n**ОТМЕНЯЕМОЕ**","event<mob_kill_player>":"```justcode\nevent<mob_kill_player>\n```\n\n**Название**: Моб убивает игрока\\\n**Описание**: Выполняет код, когда моб убивает игрока.\\\n**ОТМЕНЯЕМОЕ**","event<moisture_change>":"```justcode\nevent<moisture_change>\n```\n\n**Название**: Грядка меняет статус влажности\\\n**Описание**: Выполняет код, когда блок грядки становится мокрым или высыхает.\\\n**ОТМЕНЯЕМОЕ**","event<note_play>":"```justcode\nevent<note_play>\n```\n\n**Название**: Проигрывание звука нотным блоком\\\n**Описание**: Выполняет код, когда в мире нотный блок проигрывает звук.\\\n**ОТМЕНЯЕМОЕ**","event<piglin_barter>":"```justcode\nevent<piglin_barter>\n```\n\n**Название**: Пиглин торгуется\\\n**Описание**: Выполняет код, когда Пиглин торгуется.\\\n**ОТМЕНЯЕМОЕ**","event<player_anvil_rename_input>":"```justcode\nevent<player_anvil_rename_input>\n```\n\n**Название**: Игрок переименовывает предмет\\\n**Описание**: Выполняет код, когда игрок переименовывает предмет с помощью наковальни.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Событие вызывается до изменения предмета\\\n**Работает с:** Наковальнями","event<player_arm_swing>":"```justcode\nevent<player_arm_swing>\n```\n\n**Название**: Игрок машет рукой\\\n**Описание**: Выполняет код, когда игрок машет правой или левой рукой.\\\n**ОТМЕНЯЕМОЕ**","event<player_ask_gamemode_change>":"```justcode\nevent<player_ask_gamemode_change>\n```\n\n**Название**: Игрок запросил меню смены режима игры\\\n**Описание**: Выполняет код, когда игрок запрашивает меню смены режима игры.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;По умолчанию, это событие отменяется, если игрок не имеет доступа к смену режима.\\\n**Работает с:** Комбинацией клавиш F3 + F4, Комбинацией клавиш F3 + N\\\n**ОТМЕНЯЕМОЕ**","event<player_break_block>":"```justcode\nevent<player_break_block>\n```\n\n**Название**: Игрок сломал блок\\\n**Описание**: Выполняет код, когда игрок сломал блок.\\\n**ОТМЕНЯЕМОЕ**","event<player_break_item>":"```justcode\nevent<player_break_item>\n```\n\n**Название**: Игрок ломает предмет\\\n**Описание**: Выполняет код, когда игрок ломает предмет.","event<player_change_slot>":"```justcode\nevent<player_change_slot>\n```\n\n**Название**: Игрок меняет слот\\\n**Описание**: Выполняет код, когда игрок меняет слот.\\\n**ОТМЕНЯЕМОЕ**","event<player_chat>":"```justcode\nevent<player_chat>\n```\n\n**Название**: Игрок пишет сообщение в чат\\\n**Описание**: Выполняет код, когда игрок пишет сообщение в чат.\\\n**ОТМЕНЯЕМОЕ**","event<player_click_inventory>":"```justcode\nevent<player_click_inventory>\n```\n\n**Название**: Игрок кликает в инвентаре\\\n**Описание**: Выполняет код, когда игрок кликает в инвентаре.\\\n**ОТМЕНЯЕМОЕ**","event<player_click_own_inventory>":"```justcode\nevent<player_click_own_inventory>\n```\n\n**Название**: Игрок кликает в своём инвентаре\\\n**Описание**: Выполняет код, когда игрок кликает в своём инвентаре.\\\n**ОТМЕНЯЕМОЕ**","event<player_close_advancements_menu>":"```justcode\nevent<player_close_advancements_menu>\n```\n\n**Название**: Игрок закрыл меню достижений\\\n**Описание**: Выполняет код, когда игрок закрывает меню достижений.","event<player_close_inventory>":"```justcode\nevent<player_close_inventory>\n```\n\n**Название**: Игрок закрывает инвентарь\\\n**Описание**: Выполняет код, когда игрок закрывает инвентарь.","event<player_combust>":"```justcode\nevent<player_combust>\n```\n\n**Название**: Игрок загорелся\\\n**Описание**: Выполняет код, когда игрок загорается.\\\n**ОТМЕНЯЕМОЕ**","event<player_consume_item>":"```justcode\nevent<player_consume_item>\n```\n\n**Название**: Игрок употребляет предмет\\\n**Описание**: Выполняет код, когда игрок съедает или выпивает предмет.\\\n**Работает с:** Едой, Зельями, Молоком\\\n**ОТМЕНЯЕМОЕ**","event<player_craft_item>":"```justcode\nevent<player_craft_item>\n```\n\n**Название**: Игрок крафтит предмет\\\n**Описание**: Выполняет код, когда игрок крафтит предмет.\\\n**ОТМЕНЯЕМОЕ**","event<player_custom_click>":"```justcode\nevent<player_custom_click>\n```\n\n**Название**: Игрок вызывает кастомный клик\\\n**Описание**: Выполняет код, когда игрок вызывает кастомный клик в диалоговом окне или чате.","event<player_damage_entity>":"```justcode\nevent<player_damage_entity>\n```\n\n**Название**: Игрок ранит существо\\\n**Описание**: Выполняет код, когда игрок ранит существо.\\\n**ОТМЕНЯЕМОЕ**","event<player_damage_player>":"```justcode\nevent<player_damage_player>\n```\n\n**Название**: Игрок ранит игрока\\\n**Описание**: Выполняет код, когда игрок ранит другого игрока.\\\n**ОТМЕНЯЕМОЕ**","event<player_death>":"```justcode\nevent<player_death>\n```\n\n**Название**: Игрок умирает\\\n**Описание**: Выполняет код, когда игрок умирает не в результате ранения от другого игрока или сущности.\\\n**ОТМЕНЯЕМОЕ**","event<player_dismount>":"```justcode\nevent<player_dismount>\n```\n\n**Название**: Игрок спешился\\\n**Описание**: Выполняет код, когда игрок спешился с лодки, лошади или других существ.\\\n**ОТМЕНЯЕМОЕ**","event<player_drag_inventory>":"```justcode\nevent<player_drag_inventory>\n```\n\n**Название**: Игрок перетягивает предмет в инвентаре\\\n**Описание**: Выполняет код, когда игрок перетягивает предмет в инвентаре.\\\n**ОТМЕНЯЕМОЕ**","event<player_drop_item>":"```justcode\nevent<player_drop_item>\n```\n\n**Название**: Игрок выбрасывает предмет\\\n**Описание**: Выполняет код, когда игрок выбрасывает предмет.\\\n**ОТМЕНЯЕМОЕ**","event<player_dummy>":"```justcode\nevent<player_dummy>\n```\n\n**Название**: ...\\\n**Описание**: ...","event<player_edit_book>":"```justcode\nevent<player_edit_book>\n```\n\n**Название**: Игрок изменяет книгу\\\n**Описание**: Выполняет код, когда игрок редактирует текст или подписывает Книгу с пером.\\\n**ОТМЕНЯЕМОЕ**","event<player_enchant_item>":"```justcode\nevent<player_enchant_item>\n```\n\n**Название**: Игрок зачаровывает предмет\\\n**Описание**: Выполняет код, когда игрок зачаровывает предмет.\\\n**Работает с:** Столами зачарования\\\n**ОТМЕНЯЕМОЕ**","event<player_equipment_changed>":"```justcode\nevent<player_equipment_changed>\n```\n\n**Название**: Игрок меняет экипировку\\\n**Описание**: Выполняет код, когда экипировка игрока меняется.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Событие возникает после изменения аттрибутов или зачарований любой из частей экипировки.","event<player_exhaustion>":"```justcode\nevent<player_exhaustion>\n```\n\n**Название**: Игрок истощается\\\n**Описание**: Выполняет код, когда игрок получает истощение.\\\n**ОТМЕНЯЕМОЕ**","event<player_fail_move>":"```justcode\nevent<player_fail_move>\n```\n\n**Название**: Игроку не удалось передвинуться\\\n**Описание**: Выполняет код, когда игроку не удаётся передвинуться с места.","event<player_fish>":"```justcode\nevent<player_fish>\n```\n\n**Название**: Игрок рыбачит\\\n**Описание**: Выполняет код, когда игрок рыбачит.\\\n**ОТМЕНЯЕМОЕ**","event<player_food_level_change>":"```justcode\nevent<player_food_level_change>\n```\n\n**Название**: Изменение уровня голода игрока\\\n**Описание**: Выполняет код, когда уровень голода игрока изменяется.\\\n**ОТМЕНЯЕМОЕ**","event<player_furnace_extract>":"```justcode\nevent<player_furnace_extract>\n```\n\n**Название**: Игрок забирает предмет из печи\\\n**Описание**: Выполняет код, когда игрок забирает предмет из печи.\\\n**Работает с:** Печами, Плавильнями, Коптильнями","event<player_heal>":"```justcode\nevent<player_heal>\n```\n\n**Название**: Игрок восстанавливает здоровье\\\n**Описание**: Выполняет код, когда игрок восстанавливает здоровье любым способом.\\\n**ОТМЕНЯЕМОЕ**","event<player_horse_jump>":"```justcode\nevent<player_horse_jump>\n```\n\n**Название**: Игрок прыгает на лошади\\\n**Описание**: Выполняет код, когда игрок выполняет прыжок на лошади, осле или муле.\\\n**ОТМЕНЯЕМОЕ**","event<player_imbue_potion_cloud>":"```justcode\nevent<player_imbue_potion_cloud>\n```\n\n**Название**: Игрок получает эффект от туманного зелья\\\n**Описание**: Выполняет код, когда игрок получает эффект от туманного зелья.\\\n**ОТМЕНЯЕМОЕ**","event<player_input_event>":"```justcode\nevent<player_input_event>\n```\n\n**Название**: Игрок меняет нажатые клавиши передвижения\\\n**Описание**: Выполняет код, когда игрок меняет нажатые клавиши передвижения.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Событие возникает, когда список нажатых клавиш для передвижения игрока (по умолчанию: WASD - передвижение, Shift - приседание, Space - прыжок, Ctrl - бег) изменяется.\\\nСобытие содержит все нажатые в данный момент клавиши игрока.","event<player_interact>":"```justcode\nevent<player_interact>\n```\n\n**Название**: Игрок взаимодействует с миром\\\n**Описание**: Выполняет код, когда игрок взаимодействует с миром.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Работает при нажатии ЛКМ, ПКМ, взаимодействии с нажимными плитами, растяжками и т.д.\\\n**ОТМЕНЯЕМОЕ**","event<player_item_cooldown>":"```justcode\nevent<player_item_cooldown>\n```\n\n**Название**: Игрок использует предмет с задержкой\\\n**Описание**: Выполняет код, когда игрок использует предмет, который имеет задержку между использованиями.\\\n**ОТМЕНЯЕМОЕ**","event<player_item_group_cooldown>":"```justcode\nevent<player_item_group_cooldown>\n```\n\n**Название**: Игрок получает задержку для группы предметов\\\n**Описание**: Выполняет код, когда игрок получает задержку для группы предметов.\\\n**ОТМЕНЯЕМОЕ**","event<player_item_mend>":"```justcode\nevent<player_item_mend>\n```\n\n**Название**: Игрок чинит предмет\\\n**Описание**: Выполняет код, когда игрок чинит предмет с помощью зачарования \"Починка\".","event<player_join>":"```justcode\nevent<player_join>\n```\n\n**Название**: Игрок зашёл в мир\\\n**Описание**: Выполняет код, когда игрок заходит в мир.","event<player_jump>":"```justcode\nevent<player_jump>\n```\n\n**Название**: Игрок прыгает\\\n**Описание**: Выполняет код, когда игрок прыгает.\\\n**ОТМЕНЯЕМОЕ**","event<player_kill_mob>":"```justcode\nevent<player_kill_mob>\n```\n\n**Название**: Игрок убивает моба\\\n**Описание**: Выполняет код, когда игрок убивает моба.\\\n**ОТМЕНЯЕМОЕ**","event<player_kill_player>":"```justcode\nevent<player_kill_player>\n```\n\n**Название**: Игрок убивает игрока\\\n**Описание**: Выполняет код, кода игрок убивает другого игрока.\\\n**ОТМЕНЯЕМОЕ**","event<player_knockback>":"```justcode\nevent<player_knockback>\n```\n\n**Название**: Игрок отталкивается\\\n**Описание**: Выполняет код, когда игрок отталкивается.\\\n**ОТМЕНЯЕМОЕ**","event<player_launch_projectile>":"```justcode\nevent<player_launch_projectile>\n```\n\n**Название**: Игрок запускает снаряд\\\n**Описание**: Выполняет код, когда игрок запускает снаряд.\\\n**Работает с:** Яйцами, Снежками, Зельями\\\n**ОТМЕНЯЕМОЕ**","event<player_leash_entity>":"```justcode\nevent<player_leash_entity>\n```\n\n**Название**: Игрок привязывает существо\\\n**Описание**: Выполняет код, когда игрок привязывает существо.\\\n**ОТМЕНЯЕМОЕ**","event<player_left_click>":"```justcode\nevent<player_left_click>\n```\n\n**Название**: Игрок кликает левой кнопкой\\\n**Описание**: Выполняет код, когда игрок кликает левой кнопкой мыши.\\\n**ОТМЕНЯЕМОЕ**","event<player_load_crossbow>":"```justcode\nevent<player_load_crossbow>\n```\n\n**Название**: Игрок заряжает арбалет\\\n**Описание**: Выполняет код, когда игрок заряжает арбалет.\\\n**Работает с:** Арбалетом\\\n**ОТМЕНЯЕМОЕ**","event<player_location_change>":"```justcode\nevent<player_location_change>\n```\n\n**Название**: Игрок меняет местоположение\\\n**Описание**: Выполняет код, когда игрок меняет свое местоположение (в том числе, оставаясь на том же блоке).\\\n**ОТМЕНЯЕМОЕ**","event<player_move>":"```justcode\nevent<player_move>\n```\n\n**Название**: Игрок передвигается\\\n**Описание**: Выполняет код, когда игрок передвигается с блока на блок.\\\n**ОТМЕНЯЕМОЕ**","event<player_open_advancements_tab>":"```justcode\nevent<player_open_advancements_tab>\n```\n\n**Название**: Игрок сменил вкладку в меню достижений\\\n**Описание**: Выполняет код, когда игрок переключается на другую вкладку в меню достижений или открывает меню достижений.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Меню может быть закрыто действием \"Закрыть инвентарь\"\\\n**ОТМЕНЯЕМОЕ**","event<player_open_inventory>":"```justcode\nevent<player_open_inventory>\n```\n\n**Название**: Игрок открыл инвентарь\\\n**Описание**: Выполняет код, когда игроку открывается инвентарное меню.\\\n**ОТМЕНЯЕМОЕ**","event<player_pick_block>":"```justcode\nevent<player_pick_block>\n```\n\n**Название**: Игрок использует выбор предмета на блоке\\\n**Описание**: Выполняет код, когда игрок использует выбор предмета на блоке.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Событие возникает, когда игрок использует функцию выбора предмета на блоке (щелчок средней кнопкой мыши на блоке для получения соответствующего предмета).\\\n**ОТМЕНЯЕМОЕ**","event<player_pick_entity>":"```justcode\nevent<player_pick_entity>\n```\n\n**Название**: Игрок использует выбор предмета на сущности\\\n**Описание**: Выполняет код, когда игрок использует выбор предмета на сущности.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Событие возникает, когда игрок использует функцию выбора предмета на сущности (щелчок по сущности для получения соответствующего предмета).\\\n**ОТМЕНЯЕМОЕ**","event<player_pick_item>":"```justcode\nevent<player_pick_item>\n```\n\n**Название**: Игрок находит предмет в инвентаре\\\n**Описание**: Выполняет код, когда игрок находит предмет в инвентаре при помощи средней кнопки мыши.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Событие не сработает если игрок находится в креативе.\\\n**ОТМЕНЯЕМОЕ**","event<player_pickup_experience>":"```justcode\nevent<player_pickup_experience>\n```\n\n**Название**: Игрок поднял сферу опыта\\\n**Описание**: Выполняет код, когда игрок поднимает сферу опыта.\\\n**ОТМЕНЯЕМОЕ**","event<player_pickup_item>":"```justcode\nevent<player_pickup_item>\n```\n\n**Название**: Игрок поднял предмет\\\n**Описание**: Выполняет код, когда игрок поднимает предмет.\\\n**ОТМЕНЯЕМОЕ**","event<player_pickup_projectile>":"```justcode\nevent<player_pickup_projectile>\n```\n\n**Название**: Игрок поднял снаряд\\\n**Описание**: Выполняет код, когда игрок поднимает снаряд.\\\n**ОТМЕНЯЕМОЕ**","event<player_place_block>":"```justcode\nevent<player_place_block>\n```\n\n**Название**: Игрок ставит блок\\\n**Описание**: Выполняет код, когда игрок ставит блок.\\\n**ОТМЕНЯЕМОЕ**","event<player_pre_attack_entity>":"```justcode\nevent<player_pre_attack_entity>\n```\n\n**Название**: Игрок собирается нанести урон сущности\\\n**Описание**: Выполняет код, когда игрок собирается нанести урон по сущности. Отмена события так же отменяет звуки удара.\\\n**ОТМЕНЯЕМОЕ**","event<player_prepare_item_enchant>":"```justcode\nevent<player_prepare_item_enchant>\n```\n\n**Название**: Игрок выбирает зачарование\\\n**Описание**: Выполняет код, когда игрок получает результат в чародейском столе, получая возможность выбора зачарования.\\\n**Работает с:** Чародейскими столами\\\n**ОТМЕНЯЕМОЕ**","event<player_prepare_result>":"```justcode\nevent<player_prepare_result>\n```\n\n**Название**: Игрок получает результат\\\n**Описание**: Выполняет код, когда игрок получает результат в инвентаре.\\\n**Работает с:** Наковальнями, Точилами, Кузнечными столами\\\n**ОТМЕНЯЕМОЕ**","event<player_projectile_hit>":"```justcode\nevent<player_projectile_hit>\n```\n\n**Название**: Попадание снаряда игрока\\\n**Описание**: Выполняет код, когда снаряд, запущенный игроком, попадает в блок, существо или другого игрока.\\\n**ОТМЕНЯЕМОЕ**","event<player_query_block_info>":"```justcode\nevent<player_query_block_info>\n```\n\n**Название**: Игрок получает информацию о блоке\\\n**Описание**: Выполняет код, когда игрок получает отладочную информацию о целевом блоке (F3 + I).\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Событие не сработает если игрок приседает.\\\n**ОТМЕНЯЕМОЕ**","event<player_query_entity_info>":"```justcode\nevent<player_query_entity_info>\n```\n\n**Название**: Игрок получает информацию о сущности\\\n**Описание**: Выполняет код, когда игрок получает отладочную информацию о целевой сущности (F3 + I).\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Событие не сработает если игрок приседает.\\\n**ОТМЕНЯЕМОЕ**","event<player_quit>":"```justcode\nevent<player_quit>\n```\n\n**Название**: Игрок вышел из мира\\\n**Описание**: Выполняет код, когда игрок выходит из мира.","event<player_rejoin>":"```justcode\nevent<player_rejoin>\n```\n\n**Название**: Игрок перезашёл в мир\\\n**Описание**: Выполняет код, когда игрок перезаходит в мир с помощью команды /play.\\\n**ОТМЕНЯЕМОЕ**","event<player_respawn>":"```justcode\nevent<player_respawn>\n```\n\n**Название**: Игрок возрождается\\\n**Описание**: Выполняет код, когда игрок возрождается.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Желательно использовать блок \"Ждать\" перед остальным кодом для корректной работы.","event<player_resurrect>":"```justcode\nevent<player_resurrect>\n```\n\n**Название**: Игрок возрождается от тотема\\\n**Описание**: Выполняет код, когда игрок возрождается от Тотема бессмертия.\\\n**ОТМЕНЯЕМОЕ**","event<player_right_click>":"```justcode\nevent<player_right_click>\n```\n\n**Название**: Игрок кликает правой кнопкой\\\n**Описание**: Выполняет код, когда игрок кликает правой кнопкой мыши.\\\n**ОТМЕНЯЕМОЕ**","event<player_right_click_entity>":"```justcode\nevent<player_right_click_entity>\n```\n\n**Название**: Игрок кликает правой кнопкой по существу\\\n**Описание**: Выполняет код, когда игрок кликает правой кнопкой по существу.\\\n**ОТМЕНЯЕМОЕ**","event<player_right_click_player>":"```justcode\nevent<player_right_click_player>\n```\n\n**Название**: Игрок кликает правой кнопкой по игроку\\\n**Описание**: Выполняет код, когда игрок кликает правой кнопкой по другому игроку.\\\n**ОТМЕНЯЕМОЕ**","event<player_riptide>":"```justcode\nevent<player_riptide>\n```\n\n**Название**: Игрок использует 'Тягун'\\\n**Описание**: Выполняет код, когда игрок использует трезубец с зачарованием 'Тягун'.\\\n**ОТМЕНЯЕМОЕ**","event<player_rotate>":"```justcode\nevent<player_rotate>\n```\n\n**Название**: Игрок поворачивается\\\n**Описание**: Выполняет код, когда игрок поворачивается (изменяет положение yaw или pitch)\\\n**ОТМЕНЯЕМОЕ**","event<player_shot_bow>":"```justcode\nevent<player_shot_bow>\n```\n\n**Название**: Игрок стреляет\\\n**Описание**: Выполняет код, когда игрок стреляет из лука, арбалета.\\\n**Работает с:** Луком, Арбалетом\\\n**ОТМЕНЯЕМОЕ**","event<player_sign_change>":"```justcode\nevent<player_sign_change>\n```\n\n**Название**: Игрок изменяет табличку\\\n**Описание**: Выполняет код, когда игрок изменяет текст таблички.\\\n**ОТМЕНЯЕМОЕ**","event<player_sneak>":"```justcode\nevent<player_sneak>\n```\n\n**Название**: Игрок начинает красться\\\n**Описание**: Выполняет код, когда игрок начинает красться.\\\n**ОТМЕНЯЕМОЕ**","event<player_start_flight>":"```justcode\nevent<player_start_flight>\n```\n\n**Название**: Игрок начинает лететь\\\n**Описание**: Выполняет код, когда игрок начинает лететь.\\\n**ОТМЕНЯЕМОЕ**","event<player_start_gliding>":"```justcode\nevent<player_start_gliding>\n```\n\n**Название**: Игрок начинает лететь на элитрах\\\n**Описание**: Выполняет код, когда игрок начинает лететь на элитрах.\\\n**ОТМЕНЯЕМОЕ**","event<player_start_spectating_entity>":"```justcode\nevent<player_start_spectating_entity>\n```\n\n**Название**: Игрок начал следить за существом\\\n**Описание**: Выполняет код, когда игрок начал следить за существом в режиме наблюдателя.\\\n**ОТМЕНЯЕМОЕ**","event<player_start_sprint>":"```justcode\nevent<player_start_sprint>\n```\n\n**Название**: Игрок начал бежать\\\n**Описание**: Выполняет код, когда игрок начинает бежать.\\\n**ОТМЕНЯЕМОЕ**","event<player_stop_flight>":"```justcode\nevent<player_stop_flight>\n```\n\n**Название**: Игрок перестаёт лететь\\\n**Описание**: Выполняет код, когда игрок перестаёт лететь.\\\n**ОТМЕНЯЕМОЕ**","event<player_stop_gliding>":"```justcode\nevent<player_stop_gliding>\n```\n\n**Название**: Игрок перестаёт лететь на элитрах\\\n**Описание**: Выполняет код, когда игрок перестаёт лететь на элитрах.\\\n**ОТМЕНЯЕМОЕ**","event<player_stop_spectating_entity>":"```justcode\nevent<player_stop_spectating_entity>\n```\n\n**Название**: Игрок перестал следить за существом\\\n**Описание**: Выполняет код, когда игрок перестаёт следить за существом в режиме наблюдателя.\\\n**ОТМЕНЯЕМОЕ**","event<player_stop_sprint>":"```justcode\nevent<player_stop_sprint>\n```\n\n**Название**: Игрок перестаёт бежать\\\n**Описание**: Выполняет код, когда игрок перестаёт бежать.\\\n**ОТМЕНЯЕМОЕ**","event<player_stop_using_item>":"```justcode\nevent<player_stop_using_item>\n```\n\n**Название**: Игрок перестаёт использовать предмет\\\n**Описание**: Выполняет код, когда игрок перестаёт использовать предмет.","event<player_structure_grow>":"```justcode\nevent<player_structure_grow>\n```\n\n**Название**: Игрок выращивает дерево\\\n**Описание**: Выполняет код, когда игрок выращивает дерево или гриб.\\\n**ОТМЕНЯЕМОЕ**","event<player_swap_hands>":"```justcode\nevent<player_swap_hands>\n```\n\n**Название**: Игрок меняет руку\\\n**Описание**: Выполняет код, когда игрок перекладывает предмет из главной руки во второстепенную.\\\n**ОТМЕНЯЕМОЕ**","event<player_take_damage>":"```justcode\nevent<player_take_damage>\n```\n\n**Название**: Игрок получает урон\\\n**Описание**: Выполняет код, когда игрок получает урон.\\\n**ОТМЕНЯЕМОЕ**","event<player_tame_entity>":"```justcode\nevent<player_tame_entity>\n```\n\n**Название**: Игрок приручает существо\\\n**Описание**: Выполняет код, когда игрок приручает существо.\\\n**ОТМЕНЯЕМОЕ**","event<player_teleport>":"```justcode\nevent<player_teleport>\n```\n\n**Название**: Игрок телепортировался\\\n**Описание**: Выполняет код, когда игрок совершает телепортацию.\\\n**ОТМЕНЯЕМОЕ**","event<player_unsneak>":"```justcode\nevent<player_unsneak>\n```\n\n**Название**: Игрок перестал красться\\\n**Описание**: Выполняет код, когда игрок перестаёт красться.\\\n**ОТМЕНЯЕМОЕ**","event<player_vault_change_state>":"```justcode\nevent<player_vault_change_state>\n```\n\n**Название**: Игрок меняет состояние сокровищницы\\\n**Описание**: Выполняет код, когда игрок меняет состояние сокровищницы.\\\n**Работает с:** Сокровищницами\\\n**ОТМЕНЯЕМОЕ**","event<player_vehicle_jump>":"```justcode\nevent<player_vehicle_jump>\n```\n\n**Название**: Игрок прыгает на транспорте\\\n**Описание**: Выполняет код, когда игрок нажимает на кнопку прыжка, сидя на транспорте.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Может быть использовано для проверки нажатия на кнопку прыжка.","event<player_vehicle_move>":"```justcode\nevent<player_vehicle_move>\n```\n\n**Название**: Игрок передвигается на транспорте\\\n**Описание**: Выполняет код, когда игрок нажимает на кнопки движения, сидя на транспорте.","event<player_velocity>":"```justcode\nevent<player_velocity>\n```\n\n**Название**: Игрок изменил вектор скорости\\\n**Описание**: Выполняет код, когда вектор скорости игрока изменяется.\\\n**ОТМЕНЯЕМОЕ**","event<portal_create>":"```justcode\nevent<portal_create>\n```\n\n**Название**: Создание портала\\\n**Описание**: Выполняет код, когда в мире создаётся портал.\\\n**ОТМЕНЯЕМОЕ**","event<projectile_damage_entity>":"```justcode\nevent<projectile_damage_entity>\n```\n\n**Название**: Урон от снаряда\\\n**Описание**: Выполняет код, когда снаряд наносит урон сущности.\\\n**ОТМЕНЯЕМОЕ**","event<projectile_damage_player>":"```justcode\nevent<projectile_damage_player>\n```\n\n**Название**: Игрок получает урон от снаряда\\\n**Описание**: Выполняет код, когда снаряд ранит игрока.\\\n**ОТМЕНЯЕМОЕ**","event<projectile_hit>":"```justcode\nevent<projectile_hit>\n```\n\n**Название**: Попадание снаряда в блок\\\n**Описание**: Выполняет код, когда снаряд попадает в блок.\\\n**ОТМЕНЯЕМОЕ**","event<projectile_kill_entity>":"```justcode\nevent<projectile_kill_entity>\n```\n\n**Название**: Снаряд убил сущность\\\n**Описание**: Выполняет код, когда снаряд убил сущность.\\\n**ОТМЕНЯЕМОЕ**","event<projectile_launch>":"```justcode\nevent<projectile_launch>\n```\n\n**Название**: Запуск снаряда\\\n**Описание**: Выполняет код, когда запускается какой-либо снаряд.\\\n**ОТМЕНЯЕМОЕ**","event<projective_collide>":"```justcode\nevent<projective_collide>\n```\n\n**Название**: Снаряд столкнулся с сущностью\\\n**Описание**: Выполняет код, когда снаряд сталкивается с сущностью.\\\n**ОТМЕНЯЕМОЕ**","event<redstone_level_change>":"```justcode\nevent<redstone_level_change>\n```\n\n**Название**: Блок активируется\\\n**Описание**: Выполняет код, когда блок активируется редстоуном.","event<sculk_bloom>":"```justcode\nevent<sculk_bloom>\n```\n\n**Название**: Скалк цветёт\\\n**Описание**: Выполняет код, когда скалк цветёт.\\\n**ОТМЕНЯЕМОЕ**","event<sheep_regrow_wool>":"```justcode\nevent<sheep_regrow_wool>\n```\n\n**Название**: Овца отрастила шерсть\\\n**Описание**: Выполняет код, когда Овца отращивает шерсть.\\\n**ОТМЕНЯЕМОЕ**","event<sponge_absorb>":"```justcode\nevent<sponge_absorb>\n```\n\n**Название**: Губка впитывает воду\\\n**Описание**: Выполняет код, когда губка впитывает воду.\\\n**ОТМЕНЯЕМОЕ**","event<structure_grow>":"```justcode\nevent<structure_grow>\n```\n\n**Название**: Дерево вырастает\\\n**Описание**: Выполняет код, когда дерево или гриб вырастает.\\\n**ОТМЕНЯЕМОЕ**","event<time_skip>":"```justcode\nevent<time_skip>\n```\n\n**Название**: Пропуск времени\\\n**Описание**: Выполняет код если произошёл пропуск времени.\\\n**Работает с:** Сном, Установкой времени в коде\\\n**ОТМЕНЯЕМОЕ**","event<tnt_prime>":"```justcode\nevent<tnt_prime>\n```\n\n**Название**: Подрыв динамита\\\n**Описание**: Выполняет код, когда блок динамита поджигается.\\\n**ОТМЕНЯЕМОЕ**","event<vault_change_state>":"```justcode\nevent<vault_change_state>\n```\n\n**Название**: Сокровищница меняет состояние\\\n**Описание**: Выполняет код, когда сокровищница меняет своё состояние.\\\n**Работает с:** Сокровищницами\\\n**ОТМЕНЯЕМОЕ**","event<vault_display_item>":"```justcode\nevent<vault_display_item>\n```\n\n**Название**: Сокровищница показывает предмет\\\n**Описание**: Выполняет код, когда блок сокровищницы показывает предмет.\\\n**Работает с:** Сокровищницами\\\n**ОТМЕНЯЕМОЕ**","event<vehicle_take_damage>":"```justcode\nevent<vehicle_take_damage>\n```\n\n**Название**: Урон транспорту\\\n**Описание**: Выполняет код, когда транспорт получает урон.\\\n**Работает с:** Вагонеткой, Лодкой\\\n**ОТМЕНЯЕМОЕ**","event<witch_throw_potion>":"```justcode\nevent<witch_throw_potion>\n```\n\n**Название**: Ведьма кидает зелье\\\n**Описание**: Выполняет код, когда Ведьма кидает зелье.\\\n**Работает с:** Ведьмами\\\n**ОТМЕНЯЕМОЕ**","event<world_dummy>":"```justcode\nevent<world_dummy>\n```\n\n**Название**: ...\\\n**Описание**: ...","event<world_start>":"```justcode\nevent<world_start>\n```\n\n**Название**: Запуск мира\\\n**Описание**: Выполняет код в момент запуска мира в режиме игры.","event<world_stop>":"```justcode\nevent<world_stop>\n```\n\n**Название**: Остановка мира\\\n**Описание**: Выполняет код в момент остановки режима игры в мире.","event<world_web_exception>":"```justcode\nevent<world_web_exception>\n```\n\n**Название**: Ошибка веб-запроса\\\n**Описание**: Выполняет код, когда сервер, на который был отправлен запрос, отвечает ошибкой.","event<world_web_response>":"```justcode\nevent<world_web_response>\n```\n\n**Название**: Ответ от сервера\\\n**Описание**: Выполняет код, когда сервер, на который был отправлен запрос, отвечает.","value::absorption_health":"```justcode\nvalue::absorption_health\n```\n\n**Название**: Дополнительное здоровье\\\n**Тип значения**: \\\nЧисло\\\nКоличество поглощательного здоровья","value::action_count_per_tick":"```justcode\nvalue::action_count_per_tick\n```\n\n**Название**: Количество действий за тик\\\n**Тип значения**: \\\nЧисло\\\nКоличество действий","value::age":"```justcode\nvalue::age\n```\n\n**Название**: Возраст цели\\\n**Тип значения**: \\\nЧисло\\\nВозраст в тиках","value::armor_items":"```justcode\nvalue::armor_items\n```\n\n**Название**: Предметы брони\\\n**Тип значения**: \\\nСписок\\\nСписок брони от ботинок до шлема (4 предмета)","value::armor_points":"```justcode\nvalue::armor_points\n```\n\n**Название**: Очки защиты\\\n**Тип значения**: \\\nЧисло\\\nОт 0 (брони нет) до 20 (полная полоска брони)","value::armor_toughness":"```justcode\nvalue::armor_toughness\n```\n\n**Название**: Твёрдость брони\\\n**Тип значения**: \\\nЧисло\\\nОт 0 (незеритовая броня имеет 12 твёрдости)","value::arrows_in_body":"```justcode\nvalue::arrows_in_body\n```\n\n**Название**: Количество стрел в теле\\\n**Тип значения**: \\\nЧисло\\\nКоличество стрел","value::attached_leads":"```justcode\nvalue::attached_leads\n```\n\n**Название**: Привязанные сущности\\\n**Тип значения**: \\\nСписок\\\nСписок UUID сущностей, которые привязаны к цели","value::attack_cooldown_strength":"```justcode\nvalue::attack_cooldown_strength\n```\n\n**Название**: Кулдаун атаки\\\n**Тип значения**: \\\nЧисло\\\nТекущий кулдаун атаки (от 0 до 1)","value::attack_cooldown_ticks":"```justcode\nvalue::attack_cooldown_ticks\n```\n\n**Название**: Кулдаун атаки в тиках\\\n**Тип значения**: \\\nЧисло\\\nТекущий кулдаун атаки в тиках","value::attack_damage":"```justcode\nvalue::attack_damage\n```\n\n**Название**: Урон от атаки\\\n**Тип значения**: \\\nЧисло\\\nОт 0 (по умолчанию 1)","value::attack_speed":"```justcode\nvalue::attack_speed\n```\n\n**Название**: Скорость атаки\\\n**Тип значения**: \\\nЧисло\\\nОт 0 (чем больше - тем быстрее)","value::block_beneath":"```justcode\nvalue::block_beneath\n```\n\n**Название**: Местоположение блока под целью\\\n**Тип значения**: \\\nМестоположение\\\nМестоположение блока под целью","value::blocks_beneath":"```justcode\nvalue::blocks_beneath\n```\n\n**Название**: Блоки под целью\\\n**Тип значения**: \\\nСписок\\\nМестоположения блоков под целью","value::body_yaw":"```justcode\nvalue::body_yaw\n```\n\n**Название**: Поворот тела\\\n**Тип значения**: \\\nЧисло\\\nПоворот тела (от 0 до 360 градусов)","value::cape_location":"```justcode\nvalue::cape_location\n```\n\n**Название**: Местоположение плаща\\\n**Тип значения**: **Работает с:** Игроками\\\nМестоположение\\\nМестоположение плаща","value::cardinal_direction":"```justcode\nvalue::cardinal_direction\n```\n\n**Название**: Кардинальное направление\\\n**Тип значения**: \\\nТекст\\\n\"north\", \"east\", \"south\" или \"west\"","value::chat_visibility":"```justcode\nvalue::chat_visibility\n```\n\n**Название**: Видимость чата\\\n**Тип значения**: **Работает с:** Игроками\\\nТекст\\\nСтатус видимости чата: \"full\", \"hidden\", \"system\", \"unknown\"","value::client_brand_name":"```justcode\nvalue::client_brand_name\n```\n\n**Название**: Название клиента игрока\\\n**Тип значения**: **Работает с:** Игроками\\\nТекст\\\nНазвание клиента","value::client_view_distance":"```justcode\nvalue::client_view_distance\n```\n\n**Название**: Дальность прорисовки игрока\\\n**Тип значения**: **Работает с:** Игроками\\\nЧисло\\\nДальность прорисовки","value::clientside_locale":"```justcode\nvalue::clientside_locale\n```\n\n**Название**: Язык клиента игрока\\\n**Тип значения**: **Работает с:** Игроками\\\nТекст\\\nЯзык клиента","value::cpu_usage":"```justcode\nvalue::cpu_usage\n```\n\n**Название**: Процент использования процессора\\\n**Тип значения**: \\\nЧисло\\\nОт 0% до 100%","value::current_health":"```justcode\nvalue::current_health\n```\n\n**Название**: Текущее здоровье\\\n**Тип значения**: \\\nЧисло\\\n0 (мёртв) до максимального количества здоровья (20 по умолчанию)","value::current_input_list":"```justcode\nvalue::current_input_list\n```\n\n**Название**: Текущие нажатые клавиши передвижения\\\n**Тип значения**: **Работает с:** Игроками\\\nСписок\\\nСписок нажатых клавиш передвижения","value::cursor_item":"```justcode\nvalue::cursor_item\n```\n\n**Название**: Предмет на курсоре\\\n**Тип значения**: \\\nПредмет\\\nПредмет, который цель взяла курсором","value::custom_inventory_items":"```justcode\nvalue::custom_inventory_items\n```\n\n**Название**: Список предметов в открытом инвентаре\\\n**Тип значения**: \\\nСписок\\\nСписок предметов","value::death_screen_score":"```justcode\nvalue::death_screen_score\n```\n\n**Название**: Количество очков\\\n**Тип значения**: **Работает с:** Игроками\\\nЧисло\\\nКоличество очков","value::direction_of_view":"```justcode\nvalue::direction_of_view\n```\n\n**Название**: Направление взгляда\\\n**Тип значения**: \\\nВектор\\\nНаправление взгляда","value::display_entity_left_rotation":"```justcode\nvalue::display_entity_left_rotation\n```\n\n**Название**: Левый поворот визуализатора\\\n**Тип значения**: **Работает с:** Визуализаторами\\\nВектор\\\nЛевый поворот","value::display_entity_right_rotation":"```justcode\nvalue::display_entity_right_rotation\n```\n\n**Название**: Правый поворот визуализатора\\\n**Тип значения**: **Работает с:** Визуализаторами\\\nВектор\\\nПравый поворот","value::display_entity_scale":"```justcode\nvalue::display_entity_scale\n```\n\n**Название**: Масштаб визуализатора\\\n**Тип значения**: **Работает с:** Визуализаторами\\\nВектор\\\nМасштаб","value::display_entity_translation":"```justcode\nvalue::display_entity_translation\n```\n\n**Название**: Смещение визуализатора\\\n**Тип значения**: **Работает с:** Визуализаторами\\\nВектор\\\nСмещение","value::display_name":"```justcode\nvalue::display_name\n```\n\n**Название**: Отображаемое имя\\\n**Тип значения**: \\\nТекст\\\nОтображаемое имя","value::entity_fuse_ticks":"```justcode\nvalue::entity_fuse_ticks\n```\n\n**Название**: Время до взрыва\\\n**Тип значения**: **Работает с:** Крипером, Динамитом, Фейерверками\\\nЧисло\\\nВремя до взрыва (в тиках)","value::entity_height":"```justcode\nvalue::entity_height\n```\n\n**Название**: Высота хитбокса\\\n**Тип значения**: \\\nЧисло\\\nВысота хитбокса","value::entity_item":"```justcode\nvalue::entity_item\n```\n\n**Название**: Предмет сущности\\\n**Тип значения**: **Работает с:** Предметами, Выброшенными зельями, Фейерверками, Стрелами, Падающими блоками, Другими снарядами\\\nПредмет\\\nПредметная форма цели","value::entity_pick_item_stack":"```justcode\nvalue::entity_pick_item_stack\n```\n\n**Название**: Предмет сущности\\\n**Тип значения**: \\\nПредмет\\\nПредмет сущности","value::entity_ticks_lived":"```justcode\nvalue::entity_ticks_lived\n```\n\n**Название**: Время жизни цели\\\n**Тип значения**: \\\nЧисло\\\nКоличество тиков","value::entity_type":"```justcode\nvalue::entity_type\n```\n\n**Название**: Тип сущности\\\n**Тип значения**: \\\nТекст\\\nТип сущности: \"cow\", \"pig\" и т.д.","value::entity_width_x":"```justcode\nvalue::entity_width_x\n```\n\n**Название**: Ширина хитбокса\\\n**Тип значения**: \\\nЧисло\\\nРазмер хитбокса","value::entity_width_z":"```justcode\nvalue::entity_width_z\n```\n\n**Название**: Длина хитбокса\\\n**Тип значения**: \\\nЧисло\\\nРазмер хитбокса","value::event_added_items":"```justcode\nvalue::event_added_items\n```\n\n**Название**: Распределённые предметы\\\n**Тип значения**: **Работает с:** Событием \"Игрок перетягивает предмет в инвентаре\"\\\nСловарь\\\nКлюч словаря - номер слота; значение ключа - предмет в этом слоте","value::event_advancement_tab_name":"```justcode\nvalue::event_advancement_tab_name\n```\n\n**Название**: Имя вкладки достижений\\\n**Тип значения**: **Работает с:** Событием \"Игрок сменил вкладку в меню достижений\"\\\nТекст\\\nНазвание вкладки достижений","value::event_anvil_rename_input":"```justcode\nvalue::event_anvil_rename_input\n```\n\n**Название**: Новое имя предмета\\\n**Тип значения**: **Работает с:** Событием \"Игрок переименовывает предмет\"\\\nТекст\\\nНовое имя предмета","value::event_block":"```justcode\nvalue::event_block\n```\n\n**Название**: Блок события\\\n**Тип значения**: **Работает с:** Событиями взаимодействия, Событиями установки или поломки блоков, Событием \"Попадание снаряда игрока\", Событиями блоков в мире\\\nТекст\\\nID блока","value::event_block_face":"```justcode\nvalue::event_block_face\n```\n\n**Название**: Сторона блока события\\\n**Тип значения**: **Работает с:** Событиями взаимодействия, Событиями установки или поломки блоков, Событием \"Попадание снаряда игрока\", Событиями поршней\\\nТекст\\\nСторона блока: \"up\", \"down\", \"west\", \"east\", \"north\" или \"south\" (в событии \"Установка блока\" может вернуть \"self\", если событие будет вызвано установкой плиты на плиту одного типа)","value::event_block_location":"```justcode\nvalue::event_block_location\n```\n\n**Название**: Местоположение блока события\\\n**Тип значения**: **Работает с:** Событиями взаимодействия, Событиями установки или поломки блоков, Событием \"Попадание снаряда игрока\", Событиями блоков в мире\\\nМестоположение\\\nЦентр блока","value::event_blocks_involved":"```justcode\nvalue::event_blocks_involved\n```\n\n**Название**: Задействованные блоки события\\\n**Тип значения**: **Работает с:** Событиями взрывов, Событиями поршней\\\nСписок\\\nМестоположение задействованных блоков","value::event_chat_message":"```justcode\nvalue::event_chat_message\n```\n\n**Название**: Сообщение чата\\\n**Тип значения**: **Работает с:** Событием \"Игрок пишет сообщение в чат\"\\\nТекст\\\nСообщение в чате","value::event_close_inventory_cause":"```justcode\nvalue::event_close_inventory_cause\n```\n\n**Название**: Причина закрытия инвентаря\\\n**Тип значения**: **Работает с:** Событием \"Игрок закрывает инвентарь\"\\\nТекст\\\nПричина закрытия инвентаря","value::event_combust_duration":"```justcode\nvalue::event_combust_duration\n```\n\n**Название**: Длительность сгорания сущности\\\n**Тип значения**: **Работает с:** Событием \"Игрок загорелся\", Событием \"Сущность загорелась\"\\\nЧисло\\\nДлительность в секундах","value::event_combust_reason":"```justcode\nvalue::event_combust_reason\n```\n\n**Название**: Причина сгорания сущности\\\n**Тип значения**: **Работает с:** Событием \"Игрок загорелся\", Событием \"Сущность загорелась\"\\\nТекст\\\nПричина сгорания: \"block\", \"entity\" или \"unknown\"","value::event_custom_click_dialog_view_data":"```justcode\nvalue::event_custom_click_dialog_view_data\n```\n\n**Название**: Данные диалогового окна\\\n**Тип значения**: **Работает с:** Событием \"Игрок вызывает кастомный клик\"\\\nЛюбое значение\\\nВведённые данные","value::event_custom_click_key":"```justcode\nvalue::event_custom_click_key\n```\n\n**Название**: ID кастомного клика\\\n**Тип значения**: **Работает с:** Событием \"Игрок вызывает кастомный клик\"\\\nТекст\\\nID клика","value::event_damage":"```justcode\nvalue::event_damage\n```\n\n**Название**: Нанесённый урон\\\n**Тип значения**: **Работает с:** Событием \"Игрок получает урон\", Событием \"Сущность получает урон\", Событием \"Урон транспорту\"\\\nЧисло\\\nОт 0 единиц","value::event_damage_cause":"```justcode\nvalue::event_damage_cause\n```\n\n**Название**: Причина полученного урона\\\n**Тип значения**: **Работает с:** Событием \"Игрок получает урон\", Событием \"Сущность получает урон\", Событием \"Урон транспорту\"\\\nТекст\\\nПричина или тип нанесённого урона цели","value::event_death_screen_message":"```justcode\nvalue::event_death_screen_message\n```\n\n**Название**: Сообщение при смерти\\\n**Тип значения**: **Работает с:** Событием \"Игрок умирает\"\\\nТекст\\\nСообщение","value::event_drag_type":"```justcode\nvalue::event_drag_type\n```\n\n**Название**: Тип перетягивания по инвентарю\\\n**Тип значения**: **Работает с:** Событием \"Игрок перетягивает предмет в инвентаре\"\\\nТекст\\\nТип перетягивания: \"even\" или \"single\"","value::event_enchantment_bonus":"```justcode\nvalue::event_enchantment_bonus\n```\n\n**Название**: Количество книжных полок\\\n**Тип значения**: **Работает с:** Событием \"Игрок выбирает зачарование\"\\\nЧисло\\\nКоличество","value::event_enchantment_hint":"```justcode\nvalue::event_enchantment_hint\n```\n\n**Название**: Предложенное зачарование\\\n**Тип значения**: **Работает с:** Событием \"Игрок зачаровывает предмет\"\\\nТекст\\\nПредложенное зачарование","value::event_enchantment_level_hint":"```justcode\nvalue::event_enchantment_level_hint\n```\n\n**Название**: Требуемый уровень опыта зачарования\\\n**Тип значения**: **Работает с:** Событием \"Игрок зачаровывает предмет\"\\\nЧисло\\\nТребуемый уровень","value::event_enchantment_offers":"```justcode\nvalue::event_enchantment_offers\n```\n\n**Название**: Предлагаемые зачарования события\\\n**Тип значения**: **Работает с:** Событием \"Игрок выбирает зачарование\"\\\nСписок\\\nЗачарования","value::event_enchantments_to_add":"```justcode\nvalue::event_enchantments_to_add\n```\n\n**Название**: Полученные зачарования\\\n**Тип значения**: **Работает с:** Событием \"Игрок зачаровывает предмет\"\\\nСловарь\\\nСловарь полученных зачарований","value::event_equipment_slot":"```justcode\nvalue::event_equipment_slot\n```\n\n**Название**: Тип задействованного слота\\\n**Тип значения**: **Работает с:** Событием \"Игрок кликает правой кнопкой\", Событием \"Игрок кликает левой кнопкой\", Событием \"Игрок взаимодействует с миром\", Событием \"Игрок машет рукой\"\\\nТекст\\\nТип слота: \"hand\" или \"off_hand\"","value::event_exhaustion_amount":"```justcode\nvalue::event_exhaustion_amount\n```\n\n**Название**: Истощение события\\\n**Тип значения**: **Работает с:** Событием \"Игрок истощается\"\\\nЧисло\\\nКоличество истощения","value::event_exhaustion_reason":"```justcode\nvalue::event_exhaustion_reason\n```\n\n**Название**: Причина истощения\\\n**Тип значения**: **Работает с:** Событием \"Игрок истощается\"\\\nТекст\\\nПричина истощения: \"attack\", \"block_mined\", \"crouch\", \"damaged\", \"hunger_effect\", \"jump\", \"jump_sprint\", \"regen\", \"sprint\", \"swim\", \"unknown\", \"walk\", \"walk_on_water\" или \"walk_underwater\"","value::event_experience":"```justcode\nvalue::event_experience\n```\n\n**Название**: Количество опыта события\\\n**Тип значения**: **Работает с:** Событием \"Игрок рыбачит\", Событием \"Игрок поднял сферу опыта\", Событиями смерти, Событием \"Игрок зачаровывает предмет\"\\\nЧисло\\\nКоличество опыта","value::event_fail_move_reason":"```justcode\nvalue::event_fail_move_reason\n```\n\n**Название**: Причина неудачного перемещения\\\n**Тип значения**: **Работает с:** Событием \"Игроку не удалось передвинуться\"\\\nТекст\\\nПричина: \"clipped_into_block\", \"moved_into_unloaded_chunk\", \"moved_too_quickly\" и \"moved_wrongly\"","value::event_final_damage":"```justcode\nvalue::event_final_damage\n```\n\n**Название**: Конечный урон\\\n**Тип значения**: **Работает с:** Событием \"Игрок получает урон\", Событием \"Сущность получает урон\", Событием \"Урон транспорту\"\\\nЧисло\\\nОт 0 единиц","value::event_fish_state":"```justcode\nvalue::event_fish_state\n```\n\n**Название**: Причина события рыбалки\\\n**Тип значения**: **Работает с:** Событием \"Игрок рыбачит\"\\\nТекст\\\nПричина события: \"fishing\", \"bite\", \"caught_fish\", \"caught_entity\", \"reel_in\", \"in_ground\", \"failed_attempt\"","value::event_food_level":"```justcode\nvalue::event_food_level\n```\n\n**Название**: Восполненный голод события\\\n**Тип значения**: **Работает с:** Событием \"Изменение уровня голода игрока\"\\\nЧисло\\\nКоличество единиц голода","value::event_from_location":"```justcode\nvalue::event_from_location\n```\n\n**Название**: Старое местоположение игрока\\\n**Тип значения**: **Работает с:** Событием \"Игрок передвигается\", Событием \"Игрок прыгает\", Событием \"Игрок телепортировался\", Событием \"Игроку не удалось передвинуться\", Событием \"Сущность телепортируется\"\\\nМестоположение\\\nСтарое местоположение","value::event_gamemode":"```justcode\nvalue::event_gamemode\n```\n\n**Название**: Режим игры события\\\n**Тип значения**: **Работает с:** Событием \"Игрок запросил меню смены режима игры\"\\\nТекст\\\nРежим игры","value::event_hanging_break_cause":"```justcode\nvalue::event_hanging_break_cause\n```\n\n**Название**: Причина удаления висящей сущности\\\n**Тип значения**: **Работает с:** Событием \"Ломание висящего существа\"\\\nТекст\\\nПричина события: \"default\", \"entity\", \"explosion\", \"obstruction\" и \"physics\"","value::event_heal_amount":"```justcode\nvalue::event_heal_amount\n```\n\n**Название**: Количество восстановленного здоровья\\\n**Тип значения**: **Работает с:** Событием \"Игрок восстанавливает здоровье\", Событием \"Сущность восстанавливает здоровье\"\\\nЧисло\\\nКоличество единиц восстановленного здоровья","value::event_heal_cause":"```justcode\nvalue::event_heal_cause\n```\n\n**Название**: Причина исцеления\\\n**Тип значения**: **Работает с:** Событием \"Игрок восстанавливает здоровье\", Событием \"Сущность восстанавливает здоровье\"\\\nТекст\\\nПричина восстановления здоровья: \"natural\", \"magic\", \"magic_regen\" или \"custom\"","value::event_hotbar_slot":"```justcode\nvalue::event_hotbar_slot\n```\n\n**Название**: Слот хот-бара в событии\\\n**Тип значения**: **Работает с:** Событием \"Игрок меняет слот\", Событием \"Игрок кликает в своём инвентаре\", Событием \"Игрок кликает в инвентаре\", Событием \"Игрок находит предмет в инвентаре\"\\\nЧисло\\\nОт 0 (крайний левый слот) до 8 (крайний правый слот)","value::event_input_list":"```justcode\nvalue::event_input_list\n```\n\n**Название**: Список нажатых клавиш передвижения\\\n**Тип значения**: **Работает с:** Событием \"Игрок меняет нажатые клавиши передвижения\", Событием \"Игрок передвигается на транспорте\", Событием \"Игрок прыгает на транспорте\"\\\nСписок\\\nСписок нажатых клавиш","value::event_interaction":"```justcode\nvalue::event_interaction\n```\n\n**Название**: Тип взаимодействия события\\\n**Тип значения**: **Работает с:** Событием \"Игрок кликает правой кнопкой\", Событием \"Игрок кликает левой кнопкой\", Событием \"Игрок взаимодействует с миром\"\\\nТекст\\\nТип взаимодействия: \"left_click_air\", \"left_click_block\", \"physical\", \"right_click_air\" или \"right_click_block\"","value::event_inventory_action":"```justcode\nvalue::event_inventory_action\n```\n\n**Название**: Действие в инвентаре при клике\\\n**Тип значения**: **Работает с:** Событием \"Игрок кликает в своём инвентаре\", Событием \"Игрок кликает в инвентаре\"\\\nТекст\\\nТип действия: \"clone_stack\", \"collect_to_cursor\", \"drop_all_cursor\", \"drop_all_slot\", \"drop_one_cursor\", \"drop_one_slot\", \"hotbar_move_and_readd\", \"hotbar_swap\", \"move_to_other_inventory\", \"nothing\", \"pickup_all\", \"pickup_half\", \"pickup_one\", \"pickup_some\", \"place_all\", \"place_one\", \"place_some\", \"swap_with_cursor\" и \"unknown\"","value::event_inventory_click_type":"```justcode\nvalue::event_inventory_click_type\n```\n\n**Название**: Тип клика по инвентарю\\\n**Тип значения**: **Работает с:** Событием \"Игрок кликает в своём инвентаре\", Событием \"Игрок кликает в инвентаре\"\\\nТекст\\\nТип клика: \"control_drop\", \"creative\", \"double_click\", \"drop\", \"left\", \"right\", \"middle\", \"number_key\", \"shift_left\", \"shift_right\", \"swap_offhand\", \"unknown\", \"window_border_left\" или \"window_border_right\"","value::event_item":"```justcode\nvalue::event_item\n```\n\n**Название**: Предмет события\\\n**Тип значения**: **Работает с:** Событиями с предметами, Событием \"Игрок рыбачит\", Событием \"Игрок изменяет книгу\", Событием \"Игрок стреляет\"\\\nПредмет\\\nПредмет в событии","value::event_item_cooldown":"```justcode\nvalue::event_item_cooldown\n```\n\n**Название**: Задержка предмета события\\\n**Тип значения**: **Работает с:** Событием \"Игрок использует предмет с задержкой\", Событием \"Игрок получает задержку для группы предметов\"\\\nЧисло\\\nЗадержка в секундах","value::event_item_cooldown_group":"```justcode\nvalue::event_item_cooldown_group\n```\n\n**Название**: Группа предмета с задержкой\\\n**Тип значения**: **Работает с:** Событием \"Игрок использует предмет с задержкой\", Событием \"Игрок получает задержку для группы предметов\"\\\nТекст\\\nНазвание группы","value::event_items":"```justcode\nvalue::event_items\n```\n\n**Название**: Предметы события\\\n**Тип значения**: **Работает с:** Обмен с пиглином\\\nСписок\\\nСписок всех предметов события","value::event_knockback_cause":"```justcode\nvalue::event_knockback_cause\n```\n\n**Название**: Причина отталкивания\\\n**Тип значения**: **Работает с:** Событием \"Игрок отталкивается\", Событием \"Сущность отталкивается\"\\\nТекст\\\nПричина отталкивания: \"damage\", \"entity_attack\", \"explosion\", \"shield_block\", \"sweep_attack\" и \"unknown\"","value::event_knockback_event_type":"```justcode\nvalue::event_knockback_event_type\n```\n\n**Название**: Тип отталкивания\\\n**Тип значения**: **Работает с:** Событием \"Игрок отталкивается\", Событием \"Сущность отталкивается\"\\\nТекст\\\nТип отталкивания: \"knockback_by_entity\", \"pushed_by_entity\" и \"knockback\"","value::event_knockback_vector":"```justcode\nvalue::event_knockback_vector\n```\n\n**Название**: Вектор отталкивания\\\n**Тип значения**: **Работает с:** Событием \"Игрок отталкивается\", Событием \"Сущность отталкивается\"\\\nВектор\\\nВектор отталкивания","value::event_message":"```justcode\nvalue::event_message\n```\n\n**Название**: Сообщение события\\\n**Тип значения**: **Работает с:** Событием \"Игрок зашёл в мир\", Событием \"Игрок вышел из мира\", Событием \"Игрок умирает\"\\\nТекст\\\nСообщение события","value::event_new_equipments":"```justcode\nvalue::event_new_equipments\n```\n\n**Название**: Экипировка\\\n**Тип значения**: **Работает с:** Событием \"Игрок меняет экипировку\", Событием \"Сущность меняет экипировку\"\\\nСловарь\\\nЭкипировка","value::event_new_fishing_hook_state":"```justcode\nvalue::event_new_fishing_hook_state\n```\n\n**Название**: Новое состояние поплавка\\\n**Тип значения**: **Работает с:** Событием \"Поплавок удочки изменяет состояние\"\\\nТекст\\\nСостояние: \"bobbing\", \"hooked_entity\" или \"unhooked\"","value::event_new_location":"```justcode\nvalue::event_new_location\n```\n\n**Название**: Новое местоположение игрока\\\n**Тип значения**: **Работает с:** Событием \"Игрок передвигается\", Событием \"Игрок прыгает\", Событием \"Игрок телепортировался\", Событием \"Игроку не удалось передвинуться\", Событием \"Падающий блок приземляется\", Событием \"Сущность телепортируется\"\\\nМестоположение\\\nНовое местоположение","value::event_new_potion_effect":"```justcode\nvalue::event_new_potion_effect\n```\n\n**Название**: Новый эффект\\\n**Тип значения**: **Работает с:** Событием \"Игрок получает эффект от взрывного зелья\"\\\nЗелье\\\nНовый эффект","value::event_new_vault_state":"```justcode\nvalue::event_new_vault_state\n```\n\n**Название**: Новое состояние сокровищницы\\\n**Тип значения**: **Работает с:** Событием \"Сокровищница меняет состояние\", Событием \"Игрок меняет состояние сокровищницы\"\\\nТекст\\\nСостояние: \"active\", \"ejecting\", \"inactive\" или \"unlocking\"","value::event_old_equipments":"```justcode\nvalue::event_old_equipments\n```\n\n**Название**: Прошлая экипировка события\\\n**Тип значения**: **Работает с:** Событием \"Игрок меняет экипировку\", Событием \"Сущность меняет экипировку\"\\\nСловарь\\\nПрошлая экипировка","value::event_old_vault_state":"```justcode\nvalue::event_old_vault_state\n```\n\n**Название**: Прошлое состояние сокровищницы\\\n**Тип значения**: **Работает с:** Событием \"Сокровищница меняет состояние\", Событием \"Игрок меняет состояние сокровищницы\"\\\nТекст\\\nСостояние: \"active\", \"ejecting\", \"inactive\" или \"unlocking\"","value::event_power":"```justcode\nvalue::event_power\n```\n\n**Название**: Процент силы выполнения\\\n**Тип значения**: **Работает с:** Событием \"Игрок стреляет\", Событием \"Игрок прыгает на лошади\"\\\nЧисло\\\nОт 0% до 100%","value::event_projectile_item":"```justcode\nvalue::event_projectile_item\n```\n\n**Название**: Предмет снаряда события\\\n**Тип значения**: **Работает с:** Событием \"Игрок стреляет\"\\\nПредмет\\\nПредмет снаряда","value::event_query_info":"```justcode\nvalue::event_query_info\n```\n\n**Название**: Отладочная информация\\\n**Тип значения**: **Работает с:** Событием \"Игрок получает информацию о блоке\", Событием \"Игрок получает информацию о сущности\"\\\nТекст\\\nОтладочная информация","value::event_replaced_block":"```justcode\nvalue::event_replaced_block\n```\n\n**Название**: Заменённый блок\\\n**Тип значения**: **Работает с:** Событием \"Игрок ставит блок\"\\\nТекст\\\nID заменённого блока","value::event_sign_lines":"```justcode\nvalue::event_sign_lines\n```\n\n**Название**: Строки таблички\\\n**Тип значения**: **Работает с:** Событием \"Игрок изменяет табличку\"\\\nСписок\\\nСтроки таблички","value::event_sign_side":"```justcode\nvalue::event_sign_side\n```\n\n**Название**: Сторона таблички\\\n**Тип значения**: **Работает с:** Событием \"Игрок изменяет табличку\"\\\nТекст\\\nСторона таблички: \"front\" или \"back\"","value::event_slot":"```justcode\nvalue::event_slot\n```\n\n**Название**: Слот события\\\n**Тип значения**: **Работает с:** Событием \"Игрок меняет слот\", Событием \"Игрок кликает в своём инвентаре\", Событием \"Игрок кликает в инвентаре\", Событием \"Игрок крафтит предмет\", Событием \"Игрок находит предмет в инвентаре\", Событием \"Игрок зачаровывает предмет\"\\\nЧисло\\\nНомер слота","value::event_slot_type":"```justcode\nvalue::event_slot_type\n```\n\n**Название**: Тип слота при клике\\\n**Тип значения**: **Работает с:** Событием \"Игрок кликает в своём инвентаре\", Событием \"Игрок кликает в инвентаре\"\\\nТекст\\\nТип слота: \"armor\", \"container\", \"crafting\", \"fuel\", \"outside\", \"quickbar\" и \"result\"","value::event_slots_involved":"```justcode\nvalue::event_slots_involved\n```\n\n**Название**: Задействованные слоты\\\n**Тип значения**: **Работает с:** Событием \"Игрок перетягивает предмет в инвентаре\"\\\nСписок\\\nСписок задействованных слотов","value::event_teleport_cause":"```justcode\nvalue::event_teleport_cause\n```\n\n**Название**: Причина телепортации\\\n**Тип значения**: **Работает с:** Событием \"Игрок телепортировался\", Событием \"Эндермен убегает\"\\\nТекст\\\nПричина: \"chorus_fruit\", \"command\", \"end_gateway\", \"end_portal\", \"ender_pearl\", \"nether_portal\", \"plugin\", \"spectate\" и \"unknown\"","value::event_ticks_held_for":"```justcode\nvalue::event_ticks_held_for\n```\n\n**Название**: Количество тиков использования предмета\\\n**Тип значения**: **Работает с:** Событием \\\"Игрок перестаёт использовать предмет\\\"\\\nЧисло\\\nКоличество тиков","value::event_time_skip_amount":"```justcode\nvalue::event_time_skip_amount\n```\n\n**Название**: Количество тиков пропуска времени\\\n**Тип значения**: **Работает с:** Событием \"Пропуск времени\"\\\nЧисло\\\nКоличество тиков","value::event_time_skip_reason":"```justcode\nvalue::event_time_skip_reason\n```\n\n**Название**: Причина пропуска времени\\\n**Тип значения**: **Работает с:** Событием \"Пропуск времени\"\\\nТекст\\\nПричина события: \"command\", \"custom\" или \"night_skip\"","value::event_transform_reason":"```justcode\nvalue::event_transform_reason\n```\n\n**Название**: Причина замены сущности\\\n**Тип значения**: **Работает с:** Событием \"Сущность заменяется другой сущностью\"\\\nТекст\\\nПричина замены: \"cured\", \"drowned\", \"frozen\", \"infection\", \"lightning\", \"metamorphosis\", \"piglin_zombified\", \"sheared\", \"split\" и \"unknown\"","value::event_transformed_entities":"```justcode\nvalue::event_transformed_entities\n```\n\n**Название**: Заменённые сущности события\\\n**Тип значения**: **Работает с:** Событием \"Сущность заменяется другой сущностью\"\\\nСписок\\\nСписок сущностей","value::event_tree_type":"```justcode\nvalue::event_tree_type\n```\n\n**Название**: Тип дерева\\\n**Тип значения**: **Работает с:** Событием \"Игрок выращивает дерево\", Событием \"Дерево вырастает\"\\\nТекст\\\nТип структуры: \"acacia\", \"azalea\", \"big_tree\", \"birch\", \"brown_mushroom\", \"cherry\", \"chorus_plant\", \"cocoa_tree\", \"crimson_fungus\", \"dark_oak\", \"jungle\", \"jungle_bush\", \"mangrove\", \"mega_redwood\", \"red_mushroom\", \"redwood\", \"small_jungle\", \"swamp\", \"tall_birch\", \"tall_mangrove\", \"tall_redwood\", \"tree\" и \"warped_fungus\"","value::event_velocity":"```justcode\nvalue::event_velocity\n```\n\n**Название**: Вектор скорости\\\n**Тип значения**: **Работает с:** Событием \"Игрок изменил вектор скорости\"\\\nВектор\\\nВектор скорости события","value::experience_level":"```justcode\nvalue::experience_level\n```\n\n**Название**: Уровень опыта\\\n**Тип значения**: \\\nЧисло\\\nКоличество уровней опыта","value::experience_progress":"```justcode\nvalue::experience_progress\n```\n\n**Название**: Прогресс опыта\\\n**Тип значения**: \\\nЧисло\\\nОт 0% (нет прогресса) до 100% (следующий уровень)","value::eye_location":"```justcode\nvalue::eye_location\n```\n\n**Название**: Местоположение глаз\\\n**Тип значения**: \\\nМестоположение\\\nМестоположение и поворот на высоте глаз","value::fall_distance":"```justcode\nvalue::fall_distance\n```\n\n**Название**: Дистанция падения\\\n**Тип значения**: \\\nЧисло\\\nЕсли больше 0, то цель падает","value::fire_ticks":"```justcode\nvalue::fire_ticks\n```\n\n**Название**: Время горения\\\n**Тип значения**: \\\nЧисло\\\nЕсли больше 0, то цель горит","value::flying_speed":"```justcode\nvalue::flying_speed\n```\n\n**Название**: Скорость полёта\\\n**Тип значения**: \\\nЧисло\\\nСкорость полёта цели","value::food_exhaustion":"```justcode\nvalue::food_exhaustion\n```\n\n**Название**: Уровень истощения\\\n**Тип значения**: \\\nЧисло\\\nОт 0 (нет истощения) до 4 (полное истощение)","value::food_level":"```justcode\nvalue::food_level\n```\n\n**Название**: Уровень голода\\\n**Тип значения**: \\\nЧисло\\\nОт 0 (голод) до 20 (сытость)","value::food_saturation":"```justcode\nvalue::food_saturation\n```\n\n**Название**: Уровень насыщения\\\n**Тип значения**: \\\nЧисло\\\nОт 0 до текущего количества единиц еды игрока","value::freeze_ticks":"```justcode\nvalue::freeze_ticks\n```\n\n**Название**: Время заморозки\\\n**Тип значения**: \\\nЧисло\\\nВремя заморозки в тиках","value::gamemode":"```justcode\nvalue::gamemode\n```\n\n**Название**: Режим игры\\\n**Тип значения**: **Работает с:** Игроками\\\nТекст\\\nРежим игры: \"adventure\", \"creative\", \"spectator\" и \"survival\"","value::held_slot":"```justcode\nvalue::held_slot\n```\n\n**Название**: Выбранный слот в хот-баре\\\n**Тип значения**: \\\nЧисло\\\nНомер выбранного слота (от 0 до 8, слева направо)","value::hitbox_midpoint_location":"```justcode\nvalue::hitbox_midpoint_location\n```\n\n**Название**: Центр хитбокса\\\n**Тип значения**: \\\nМестоположение\\\nМестоположение центра хитбокса","value::hotbar_items":"```justcode\nvalue::hotbar_items\n```\n\n**Название**: Предметы в хот-баре\\\n**Тип значения**: \\\nСписок\\\nСписок предметов в хотбаре слева направо (9 предметов)","value::inventory_items":"```justcode\nvalue::inventory_items\n```\n\n**Название**: Предметы в инвентаре\\\n**Тип значения**: \\\nСписок\\\nСписок предметов в инвентаре (41 предмет)","value::invulnerability_ticks":"```justcode\nvalue::invulnerability_ticks\n```\n\n**Название**: Время бессмертия\\\n**Тип значения**: \\\nЧисло\\\nЕсли больше 0, то цель неуязвима","value::item_usage_progress":"```justcode\nvalue::item_usage_progress\n```\n\n**Название**: Прогресс использования предмета\\\n**Тип значения**: \\\nЧисло\\\nОт 0% (не использует предмет) до 100%","value::last_damage_cause":"```justcode\nvalue::last_damage_cause\n```\n\n**Название**: Последняя причина урона\\\n**Тип значения**: \\\nТекст\\\nПричина урона: \"block_explosion\", \"contact\", \"cramming\", \"custom\", \"dragon_breath\", \"drowning\", \"dryout\", \"entity_attack\", \"entity_explosion\", \"entity_sweep_attack\", \"fall\", \"falling_block\", \"fire\", \"fire_tick\", \"fly_into_wall\", \"freeze\", \"hot_floor\", \"lava\", \"lightning\", \"magic\", \"melting\", \"poison\", \"projectile\", \"sonic_boom\", \"starvation\", \"suffocation\", \"suicide\", \"thorns\", \"void\" и \"wither\"","value::lead_holder":"```justcode\nvalue::lead_holder\n```\n\n**Название**: Поводырь\\\n**Тип значения**: \\\nТекст\\\nUUID сущности поводыря","value::location":"```justcode\nvalue::location\n```\n\n**Название**: Местоположение\\\n**Тип значения**: \\\nМестоположение\\\nМестоположение и поворот на высоте ног","value::main_hand":"```justcode\nvalue::main_hand\n```\n\n**Название**: Ведущая рука\\\n**Тип значения**: **Работает с:** Игроком\\\nТекст\\\nВедущая рука: \"left\", \"right\"","value::main_hand_item":"```justcode\nvalue::main_hand_item\n```\n\n**Название**: Предмет в ведущей руке\\\n**Тип значения**: \\\nПредмет\\\nПредмет в выбранном слоте","value::max_health":"```justcode\nvalue::max_health\n```\n\n**Название**: Максимальное здоровье\\\n**Тип значения**: \\\nЧисло\\\nМаксимальное количество здоровья (от 1)","value::max_invulnerability_ticks":"```justcode\nvalue::max_invulnerability_ticks\n```\n\n**Название**: Общее время бессмертия\\\n**Тип значения**: \\\nЧисло\\\nКоличество тиков неуязвимости","value::merchant_recipe_count":"```justcode\nvalue::merchant_recipe_count\n```\n\n**Название**: Количество торгов Жителя\\\n**Тип значения**: \\\nЧисло\\\nКоличество торгов","value::name":"```justcode\nvalue::name\n```\n\n**Название**: Имя\\\n**Тип значения**: \\\nТекст\\\nИмя цели","value::off_hand_item":"```justcode\nvalue::off_hand_item\n```\n\n**Название**: Предмет во второй руке\\\n**Тип значения**: \\\nПредмет\\\nПредмет во второстепенной руке","value::open_inventory_custom_id":"```justcode\nvalue::open_inventory_custom_id\n```\n\n**Название**: Кастомный ID открытого инвентаря\\\n**Тип значения**: **Работает с:** Игроками\\\nТекст\\\nКастомный ID","value::open_inventory_size":"```justcode\nvalue::open_inventory_size\n```\n\n**Название**: Размер открытого инвентаря\\\n**Тип значения**: **Работает с:** Игроками\\\nЧисло\\\nРазмер инвентаря","value::open_inventory_title":"```justcode\nvalue::open_inventory_title\n```\n\n**Название**: Заголовок открытого инвентаря\\\n**Тип значения**: **Работает с:** Игроками\\\nТекст\\\nЗаголовок открытого инвентарного меню","value::open_inventory_type":"```justcode\nvalue::open_inventory_type\n```\n\n**Название**: Тип открытого инвентаря\\\n**Тип значения**: **Работает с:** Игроками\\\nТекст\\\nТип инвентаря: \"anvil\", \"barrel\", \"beacon\", \"blast_furnace\", \"brewing\", \"cartography\", \"chest\", \"composter\", \"crafting\", \"creative\", \"dispenser\", \"dropper\", \"enchanting\", \"ender_chest\", \"furnace\", \"grindstone\", \"hopper\", \"jukebox\", \"lectern\", \"loom\", \"merchant\", \"player\", \"shulker_box\", \"smithing\", \"smoker\", \"stonecutter\" и \"workbench\"","value::origin":"```justcode\nvalue::origin\n```\n\n**Название**: Местоположение первого появления\\\n**Тип значения**: \\\nМестоположение\\\nМестоположение первого появления цели","value::owner_uuid":"```justcode\nvalue::owner_uuid\n```\n\n**Название**: UUID владельца мира\\\n**Тип значения**: \\\nТекст\\\nUUID игрока","value::particle_cpu_usage":"```justcode\nvalue::particle_cpu_usage\n```\n\n**Название**: Процент использования процессора частицами\\\n**Тип значения**: \\\nЧисло\\\nОт 0% до 100%","value::particle_visibility":"```justcode\nvalue::particle_visibility\n```\n\n**Название**: Видимость частиц\\\n**Тип значения**: **Работает с:** Игроками\\\nТекст\\\nВидимость: \"all\", \"decreased\" или \"minimal\"","value::passengers":"```justcode\nvalue::passengers\n```\n\n**Название**: Пассажиры\\\n**Тип значения**: \\\nСписок\\\nСписок UUID сущностей, которые оседлали цель","value::ping":"```justcode\nvalue::ping\n```\n\n**Название**: Пинг игрока\\\n**Тип значения**: \\\nЧисло\\\nПинг игрока","value::pitch":"```justcode\nvalue::pitch\n```\n\n**Название**: Вертикальный поворот\\\n**Тип значения**: \\\nЧисло\\\nОт -90 (смотрит вверх) до 90 (вниз)","value::player_count":"```justcode\nvalue::player_count\n```\n\n**Название**: Количество игроков в мире\\\n**Тип значения**: \\\nЧисло\\\nКоличество игроков","value::pose":"```justcode\nvalue::pose\n```\n\n**Название**: Поза сущности\\\n**Тип значения**: \\\nТекст\\\nПоза: \"standing\", \"fall_flying\", \"sleeping\", \"swimming\", \"spin_attack\", \"crouching\", \"long_jumping\", \"dying\", \"croaking\", \"using_tongue\", \"sitting\", \"roaring\", \"sniffing\", \"emerging\", \"digging\", \"sliding\", \"shooting\", \"inhaling\"","value::potion_effects":"```justcode\nvalue::potion_effects\n```\n\n**Название**: Эффекты зелий\\\n**Тип значения**: \\\nСписок\\\nСписок активных эффектов зелий на цели","value::projectile_owner_uuid":"```justcode\nvalue::projectile_owner_uuid\n```\n\n**Название**: UUID владельца снаряда\\\n**Тип значения**: **Работает с:** Любыми снарядами\\\nТекст\\\nUUID владельца снаряда","value::projectile_power":"```justcode\nvalue::projectile_power\n```\n\n**Название**: Вектор движения снаряда\\\n**Тип значения**: **Работает с:** Огненными шарами, Зарядами дракона, Головами Иссушителя\\\nВектор\\\nВектор движения","value::protocol_version":"```justcode\nvalue::protocol_version\n```\n\n**Название**: Версия протокола клиента\\\n**Тип значения**: \\\nЧисло\\\nВерсия протокола","value::remaining_air":"```justcode\nvalue::remaining_air\n```\n\n**Название**: Оставшийся воздух\\\n**Тип значения**: \\\nЧисло\\\nОт 0 (утопает) до 300 (полная полоска воздуха)","value::response_headers":"```justcode\nvalue::response_headers\n```\n\n**Название**: Заголовки ответа на веб-запрос\\\n**Тип значения**: **Работает с:** Событием \\\"Ответ от сервера\\\"\\\nСловарь\\\nСловарь заголовков (если заголовок повторяется несколько раз - все его значения будут собраны в список)","value::saddle_item":"```justcode\nvalue::saddle_item\n```\n\n**Название**: Предмет на седле\\\n**Тип значения**: **Работает с:** Свиньями, Лошадьми, Ламами\\\nПредмет\\\nПредмет в слоте седла или украшения","value::selection_size":"```justcode\nvalue::selection_size\n```\n\n**Название**: Количество выбранных целей\\\n**Тип значения**: \\\nЧисло\\\nЕсли больше 0, то выборка не пуста","value::selection_target_names":"```justcode\nvalue::selection_target_names\n```\n\n**Название**: Имена выбранных целей\\\n**Тип значения**: \\\nСписок\\\nСписок имён выбранных целей","value::selection_target_uuids":"```justcode\nvalue::selection_target_uuids\n```\n\n**Название**: UUID выбранных целей\\\n**Тип значения**: \\\nСписок\\\nСписок UUID выбранных целей","value::server_current_tick":"```justcode\nvalue::server_current_tick\n```\n\n**Название**: Текущее время сервера\\\n**Тип значения**: \\\nЧисло\\\nТекущее время","value::server_stopped_time":"```justcode\nvalue::server_stopped_time\n```\n\n**Название**: Время остановки сервера\\\n**Тип значения**: \\\nЧисло\\\nВремя в миллисекундах","value::server_tps":"```justcode\nvalue::server_tps\n```\n\n**Название**: TPS сервера\\\n**Тип значения**: \\\nЧисло\\\nОт 0 до 20 (чем больше - тем лучше)","value::spawn_location":"```justcode\nvalue::spawn_location\n```\n\n**Название**: Местоположение спавна мира\\\n**Тип значения**: \\\nМестоположение\\\nМестоположение спавна мира","value::spawn_reason":"```justcode\nvalue::spawn_reason\n```\n\n**Название**: Причина спавна\\\n**Тип значения**: \\\nТекст\\\nПричина спавна","value::steer_forward":"```justcode\nvalue::steer_forward\n```\n\n**Название**: Прямолинейное движение транспорта\\\n**Тип значения**: \\\nЧисло\\\n1 (вперёд) или -1 (назад)","value::steer_sideways":"```justcode\nvalue::steer_sideways\n```\n\n**Название**: Движение транспорта в стороны\\\n**Тип значения**: \\\nЧисло\\\n1 (влево) или -1 (вправо)","value::target_block_face":"```justcode\nvalue::target_block_face\n```\n\n**Название**: Сторона целевого блока\\\n**Тип значения**: \\\nТекст\\\nСторона блока","value::target_block_location":"```justcode\nvalue::target_block_location\n```\n\n**Название**: Местоположение целевого блока\\\n**Тип значения**: \\\nМестоположение\\\nЦентр блока","value::target_fluid_location":"```justcode\nvalue::target_fluid_location\n```\n\n**Название**: Местоположение целевой жидкости\\\n**Тип значения**: \\\nМестоположение\\\nЦентр жидкости","value::targeted_entity":"```justcode\nvalue::targeted_entity\n```\n\n**Название**: Цель для атаки\\\n**Тип значения**: \\\nТекст\\\nUUID цели для атаки","value::timestamp":"```justcode\nvalue::timestamp\n```\n\n**Название**: UNIX-время\\\n**Тип значения**: \\\nЧисло\\\nТекущее время","value::url":"```justcode\nvalue::url\n```\n\n**Название**: Ссылка веб-запроса\\\n**Тип значения**: **Работает с:** Событием \\\"Ответ от сервера\\\"\\\nТекст\\\nСсылка веб-запроса","value::url_response":"```justcode\nvalue::url_response\n```\n\n**Название**: Ответ на веб-запрос\\\n**Тип значения**: **Работает с:** Событием \\\"Ответ от сервера\\\"\\\nТекст\\\nОтвет на веб-запрос","value::url_response_code":"```justcode\nvalue::url_response_code\n```\n\n**Название**: Код ответа на веб-запрос\\\n**Тип значения**: **Работает с:** Событием \\\"Ответ от сервера\\\"\\\nЧисло\\\nКод ответа на веб-запрос","value::user_locale":"```justcode\nvalue::user_locale\n```\n\n**Название**: Серверный язык игрока\\\n**Тип значения**: **Работает с:** Игроками\\\nТекст\\\nСерверный язык","value::uuid":"```justcode\nvalue::uuid\n```\n\n**Название**: UUID\\\n**Тип значения**: \\\nТекст\\\nUUID цели","value::vehicle":"```justcode\nvalue::vehicle\n```\n\n**Название**: Транспорт\\\n**Тип значения**: \\\nТекст\\\nUUID сущности, которую оседлала цель (или \"none\" если такой нет)","value::velocity":"```justcode\nvalue::velocity\n```\n\n**Название**: Вектор скорости\\\n**Тип значения**: \\\nВектор\\\nДвижение цели","value::walking_speed":"```justcode\nvalue::walking_speed\n```\n\n**Название**: Скорость ходьбы\\\n**Тип значения**: \\\nЧисло\\\nСкорость ходьбы цели","value::world_clear_weather_duration":"```justcode\nvalue::world_clear_weather_duration\n```\n\n**Название**: Длительность ясной погоды в мире\\\n**Тип значения**: \\\nЧисло\\\nДлительность","value::world_game_time":"```justcode\nvalue::world_game_time\n```\n\n**Название**: Время существования мира\\\n**Тип значения**: \\\nЧисло\\\nВремя существования мира в тиках","value::world_id":"```justcode\nvalue::world_id\n```\n\n**Название**: ID мира\\\n**Тип значения**: \\\nТекст\\\nID мира","value::world_moon_phase":"```justcode\nvalue::world_moon_phase\n```\n\n**Название**: Текущая фаза луны\\\n**Тип значения**: \\\nТекст\\\nФаза луны: \"first_quarter\", \"full_moon\", \"last_quarter\", \"new_moon\", \"waning_crescent\", \"waning_gibbous\", \"waxing_crescent\" или \"waxing_gibbous\"","value::world_size":"```justcode\nvalue::world_size\n```\n\n**Название**: Размер мира\\\n**Тип значения**: \\\nЧисло\\\nРазмер мира","value::world_thunder_duration":"```justcode\nvalue::world_thunder_duration\n```\n\n**Название**: Длительность дождя в мире\\\n**Тип значения**: \\\nЧисло\\\nДлительность","value::world_time":"```justcode\nvalue::world_time\n```\n\n**Название**: Текущее время мира\\\n**Тип значения**: \\\nЧисло\\\nТекущее время мира в тиках","value::world_weather":"```justcode\nvalue::world_weather\n```\n\n**Название**: Текущая погода мира\\\n**Тип значения**: \\\nТекст\\\nТип погоды: \"clear\", \"rain\" или \"thunder\"","value::world_weather_duration":"```justcode\nvalue::world_weather_duration\n```\n\n**Название**: Длительность текущей погоды мира\\\n**Тип значения**: \\\nЧисло\\\nДлительность","value::x_coordinate":"```justcode\nvalue::x_coordinate\n```\n\n**Название**: Координата X\\\n**Тип значения**: \\\nЧисло\\\nКоордината","value::y_coordinate":"```justcode\nvalue::y_coordinate\n```\n\n**Название**: Координата Y\\\n**Тип значения**: \\\nЧисло\\\nКоордината","value::yaw":"```justcode\nvalue::yaw\n```\n\n**Название**: Горизонтальный поворот\\\n**Тип значения**: \\\nЧисло\\\nОт -180 до 180","value::z_coordinate":"```justcode\nvalue::z_coordinate\n```\n\n**Название**: Координата Z\\\n**Тип значения**: \\\nЧисло\\\nКоордината","code::call_function":"```justcode\ncode::call_function\n```\n\n**Имя:** Вызвать функцию\\\n**Тип:** Действие без значения\\\n**Описание:** Вызывает строку кода функции.\n\n**Пример использования:** \n```justcode\ncode::call_function(\"function_name\");\n\n//Или в сухую по ключам\n\ncode::call_function(function_name=\"function_name\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**      | **Описание**          |\n| :-------------- | :------ | :--------------- |\n| `function_name`      | Текст        | Название функции      |","code::call_exception":"```justcode\ncode::call_exception\n```\n\n**Имя:** Вызвать ошибку\\\n**Тип:** Действие без значения\\\n**Описание:** Вызывает определённую ошибку с указанным ID и сообщением.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Рекомендуется использовать это в действии \"Уловить ошибку\".\n\n**Пример использования:** \n```justcode\ncode::call_exception(\"id\", \"message\", \"ERROR\");\n\n//Или в сухую по ключам\n\ncode::call_exception(id=\"id\", message=\"message\", type=\"ERROR\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                           | **Описание**          |\n| :-------- | :--------------------------- | :--------------- |\n| `id`           | Текст                             | ID ошибки             |\n| `message`      | Текст                             | Сообщение ошибки      |\n| `type`         | Маркер                            | Тип ошибки            |\n|                | **ERROR** - Ошибка                |                       |\n|                | **FATAL** - Критическая           |                       |\n|                | **WARNING** - Предупреждение      |                       |","controller::dummy":"```justcode\ncontroller::dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие без значения\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\ncontroller::dummy();\n```\n\n","code::break":"```justcode\ncode::break\n```\n\n**Имя:** Остановить последовательность\\\n**Тип:** Действие без значения\\\n**Описание:** Останавливает текущую последовательность блоков кода. Любой код после этого блока не будет выполнен.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Если действие было использовано в функциях, то остановит родительскую строку, в которой вызвали функцию.\n\n**Пример использования:** \n```justcode\ncode::break();\n```\n\n","code::return_function":"```justcode\ncode::return_function\n```\n\n**Имя:** Вернуться до вызова\\\n**Тип:** Действие без значения\\\n**Описание:** Останавливает текущую последовательность блоков кода в функции и возвращает к блоку вызова этой самой функции.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Возвращает до блока вызова текущей функции в родительской строке.\n\n**Пример использования:** \n```justcode\ncode::return_function();\n```\n\n","code::skip_iteration":"```justcode\ncode::skip_iteration\n```\n\n**Имя:** Пропустить повторение\\\n**Тип:** Действие без значения\\\n**Описание:** Пропускает одну итерацию в текущем повторении.\n**Работает с:**\\\n&nbsp;&nbsp;Повторениями\n\n**Пример использования:** \n```justcode\ncode::skip_iteration();\n```\n\n","code::stop_repeat":"```justcode\ncode::stop_repeat\n```\n\n**Имя:** Остановить повторение\\\n**Тип:** Действие без значения\\\n**Описание:** Полностью останавливает текущее повторение.\n**Работает с:**\\\n&nbsp;&nbsp;Повторениями\n\n**Пример использования:** \n```justcode\ncode::stop_repeat();\n```\n\n","code::wait":"```justcode\ncode::wait\n```\n\n**Имя:** Ждать\\\n**Тип:** Действие без значения\\\n**Описание:** Приостанавливает текущую последовательность блоков кода на определённое время.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Минимальная задержка - 1 тик; в режиме Тики можно установить только целые числа.\n\n**Пример использования:** \n```justcode\ncode::wait(1, \"MINUTES\");\n\n//Или в сухую по ключам\n\ncode::wait(duration=1, time_unit=\"MINUTES\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**               |\n| :---------- | :-------------------- | :-------------------- |\n| `duration`       | Число                      | Длительность ожидания      |\n| `time_unit`      | Маркер                     | Единица времени            |\n|                  | **MINUTES** - Минуты       |                            |\n|                  | **SECONDS** - Секунды      |                            |\n|                  | **TICKS** - Тики           |                            |","controller::async_run":"```justcode\ncontroller::async_run\n```\n\n**Имя:** Запуск в отдельном потоке\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает код внутри поршней в отдельном потоке, что может уменьшить нагрузку. Отмена и возврат события не будут работать после поршней.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Некоторые действия внутри поршней могут не работать.\n\n**Пример использования:** \n```justcode\ncontroller::async_run(){\n    player::message(\"Всё работает\");\n}\n```\n\n","controller::do_not_run":"```justcode\ncontroller::do_not_run\n```\n\n**Имя:** Игнорировать выполнение\\\n**Тип:** Действие без значения\\\n**Описание:** Игнорирует код, находящийся внутри скобок, во время выполнения.\n\n**Пример использования:** \n```justcode\ncontroller::do_not_run(){\n    player::message(\"Всё работает\");\n}\n```\n\n","controller::catch_exception":"```justcode\ncontroller::catch_exception\n```\n\n**Имя:** Уловить ошибку\\\n**Тип:** Действие без значения\\\n**Описание:** Улавливает ошибку в коде внутри поршней и присваивает её идентификатор к переменной (пример: function_not_found).\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Не улавливает глобальные и критические ошибки.\n\n**Пример использования:** \n```justcode\ncontroller::catch_exception(`variable`, \"ALL\"){\n    player::message(\"Всё работает\");\n}\n\n//Или в сухую по ключам\n\ncontroller::catch_exception(variable=`variable`, exception_type=\"ALL\"){\n    player::message(\"Всё работает\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                           | **Описание**                   |\n| :--------------- | :--------------------------- | :------------------------ |\n| `variable`            | Переменная                        | Переменная для присвоения      |\n| `exception_type`      | Маркер                            | Тип ошибки                     |\n|                       | **ALL** - Все                     |                                |\n|                       | **ERROR** - Ошибка                |                                |\n|                       | **WARNING** - Предупреждение      |                                |","controller::measure_time":"```justcode\ncontroller::measure_time\n```\n\n**Имя:** Замерить время выполнения\\\n**Тип:** Действие без значения\\\n**Описание:** Замеряет время выполнения кода внутри поршней и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Учитывает блоки \\\"Ждать\\\".\n\n**Пример использования:** \n```justcode\ncontroller::measure_time(`variable`, \"MICROSECONDS\"){\n    player::message(\"Всё работает\");\n}\n\n//Или в сухую по ключам\n\ncontroller::measure_time(variable=`variable`, duration=\"MICROSECONDS\"){\n    player::message(\"Всё работает\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                              | **Описание**                   |\n| :--------- | :------------------------------ | :------------------------ |\n| `variable`      | Переменная                           | Переменная для присвоения      |\n| `duration`      | Маркер                               | Формат времени                 |\n|                 | **MICROSECONDS** - Микросекунды      |                                |\n|                 | **MILLISECONDS** - Миллисекунды      |                                |\n|                 | **NANOSECONDS** - Наносекунды        |                                |","code::else":"```justcode\ncode::else\n```\n\n**Имя:** Иначе\\\n**Тип:** Действие без значения\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\ncode::else(){\n    player::message(\"Всё работает\");\n}\n```\n\n","entity::attach_lead":"```justcode\nentity::attach_lead\n```\n\n**Имя:** Привязать на поводок\\\n**Тип:** Действие без значения\\\n**Описание:** Привязывает существо на поводок к забору или существу.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Если длина поводка будет больше 10 блоков, то поводок порвётся.\n\n**Пример использования:** \n```justcode\nentity::attach_lead(\"name_or_uuid\", location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nentity::attach_lead(name_or_uuid=\"name_or_uuid\", location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**             | **Описание**               |\n| :------------- | :------------- | :-------------------- |\n| `name_or_uuid`      | Текст               | Имя существа или UUID      |\n| `location`          | Местоположение      | Местоположение забора      |","entity::clear_potion_effects":"```justcode\nentity::clear_potion_effects\n```\n\n**Имя:** Очистить эффекты\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает все эффекты у существа.\n\n**Пример использования:** \n```justcode\nentity::clear_potion_effects();\n```\n\n","entity::clear_merchant_recipes":"```justcode\nentity::clear_merchant_recipes\n```\n\n**Имя:** Очистить торги Жителю\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает все торги Жителю.\n**Работает с:**\\\n&nbsp;&nbsp;Жителями\\\n&nbsp;&nbsp;Странствующими торговцами\n\n**Пример использования:** \n```justcode\nentity::clear_merchant_recipes();\n```\n\n","entity::damage":"```justcode\nentity::damage\n```\n\n**Имя:** Нанести урон\\\n**Тип:** Действие без значения\\\n**Описание:** Наносит урон существу.\n\n**Пример использования:** \n```justcode\nentity::damage(1, \"source\");\n\n//Или в сухую по ключам\n\nentity::damage(damage=1, source=\"source\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**                                |\n| :------- | :------ | :------------------------------------- |\n| `damage`      | Число        | Количество урона                            |\n| `source`      | Текст        | Источник урона (имя или UUID существа)      |","entity::disguise_as_block":"```justcode\nentity::disguise_as_block\n```\n\n**Имя:** Замаскировать сущность под блок\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует сущность под блок.\n\n**Пример использования:** \n```justcode\nentity::disguise_as_block(item(\"stone\"));\n\n//Или в сухую по ключам\n\nentity::disguise_as_block(block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**             |\n| :------ | :------ | :------------------ |\n| `block`      | Блок         | Блок для маскировки      |","entity::disguise_as_entity":"```justcode\nentity::disguise_as_entity\n```\n\n**Имя:** Замаскировать под сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Замаскировать сущность под сущность.\n\n**Пример использования:** \n```justcode\nentity::disguise_as_entity(item(\"stick\"));\n\n//Или в сухую по ключам\n\nentity::disguise_as_entity(entity_type=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**      | **Описание**                 |\n| :------------ | :------ | :---------------------- |\n| `entity_type`      | Предмет      | Сущность для маскировки      |","entity::disguise_as_item":"```justcode\nentity::disguise_as_item\n```\n\n**Имя:** Замаскировать сущность под предмет\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует сущность под предмет.\n\n**Пример использования:** \n```justcode\nentity::disguise_as_item(item(\"stick\"));\n\n//Или в сухую по ключам\n\nentity::disguise_as_item(item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                |\n| :------ | :------ | :--------------------- |\n| `item`       | Предмет      | Предмет для маскировки      |","entity::disguise_as_player":"```justcode\nentity::disguise_as_player\n```\n\n**Имя:** Замаскировать сущность под игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует сущность под игрока.\n\n**Пример использования:** \n```justcode\nentity::disguise_as_player(\"name_or_uuid\", \"display_name\", \"MOJANG\");\n\n//Или в сухую по ключам\n\nentity::disguise_as_player(name_or_uuid=\"name_or_uuid\", display_name=\"display_name\", server_type=\"MOJANG\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                       | **Описание**                             |\n| :------------- | :----------------------- | :---------------------------------- |\n| `name_or_uuid`      | Текст                         | Имя, UUID или ссылка на изображение      |\n| `display_name`      | Текст                         | Отображаемое имя сущности                |\n| `server_type`       | Маркер                        | Тип сервера скинов                       |\n|                     | **MOJANG** - Скин Mojang      |                                          |\n|                     | **SERVER** - Скин JustMC      |                                          |","entity::dummy":"```justcode\nentity::dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие без значения\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nentity::dummy();\n```\n\n","entity::eat_grass":"```justcode\nentity::eat_grass\n```\n\n**Имя:** Есть траву\\\n**Тип:** Действие без значения\\\n**Описание:** Заставляет овцу есть траву.\n**Работает с:**\\\n&nbsp;&nbsp;Овцами\n\n**Пример использования:** \n```justcode\nentity::eat_grass();\n```\n\n","entity::eat_target":"```justcode\nentity::eat_target\n```\n\n**Имя:** Установить цель поедания\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу цель для поедания.\n**Работает с:**\\\n&nbsp;&nbsp;Жабами\n\n**Пример использования:** \n```justcode\nentity::eat_target(\"name_or_uuid\");\n\n//Или в сухую по ключам\n\nentity::eat_target(name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**           |\n| :------------- | :------ | :---------------- |\n| `name_or_uuid`      | Текст        | Имя или UUID цели      |","entity::explode":"```justcode\nentity::explode\n```\n\n**Имя:** Взорваться\\\n**Тип:** Действие без значения\\\n**Описание:** Заставляет существо взорваться.\n**Работает с:**\\\n&nbsp;&nbsp;Криперами\\\n&nbsp;&nbsp;Динамитом\\\n&nbsp;&nbsp;Фейерверками\n\n**Пример использования:** \n```justcode\nentity::explode();\n```\n\n","entity::face_location":"```justcode\nentity::face_location\n```\n\n**Имя:** Повернуть к местоположению\\\n**Тип:** Действие без значения\\\n**Описание:** Поворачивает существо в сторону к местоположению.\n\n**Пример использования:** \n```justcode\nentity::face_location(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nentity::face_location(location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**        |\n| :--------- | :------------- | :------------- |\n| `location`      | Местоположение      | Местоположение      |","entity::get_attribute":"```justcode\nentity::get_attribute\n```\n\n**Имя:** Получить значение атрибута сущности\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение указанного атрибута сущности и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = entity::get_attribute(\"GENERIC_MAX_HEALTH\", \"VALUE\");\n\n//Или в сухую позиционно\n\nentity::get_attribute(`variable`, \"GENERIC_MAX_HEALTH\", \"VALUE\");\n\n//Или в сухую по ключам\n\nentity::get_attribute(variable=`variable`, attribute_type=\"GENERIC_MAX_HEALTH\", return_value=\"VALUE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                                                                           | **Описание**                   |\n| :--------------- | :------------------------------------------------------------------------------------------- | :------------------------ |\n| `variable`            | Переменная                                                                                        | Переменная для присвоения      |\n| `attribute_type`      | Маркер                                                                                            | Тип атрибута                   |\n|                       | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                                |\n|                       | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                                |\n|                       | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                                |\n|                       | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                                |\n|                       | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                                |\n|                       | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                                |\n|                       | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                                |\n|                       | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                                |\n|                       | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                                |\n|                       | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                                |\n|                       | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                                |\n|                       | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                                |\n|                       | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                                |\n|                       | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                                |\n|                       | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                                |\n|                       | **GENERIC_SCALE** - Масштаб                                                                       |                                |\n|                       | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                                |\n|                       | **GENERIC_GRAVITY** - Гравитация                                                                  |                                |\n|                       | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                                |\n|                       | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                                |\n|                       | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                                |\n|                       | **GENERIC_BURNING_TIME** - Время горения                                                          |                                |\n|                       | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                                |\n|                       | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                                |\n|                       | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                                |\n|                       | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                                |\n|                       | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                                |\n|                       | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                                |\n|                       | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                                |\n|                       | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                                |\n|                       | **TEMP_RANGE** - Расстояние приманивания                                                          |                                |\n|                       | **WAYPOINT_TRANSMIT_RANGE** - Расстояние улавливания локатором (waypoint_transmit_range)          |                                |\n|                       | **WAYPOINT_RECEIVE_RANGE** - Расстояние улавливания локатора (waypoint_receive_range)             |                                |\n|                       | **CAMERA_DISTANCE** - Расстояние камеры при виде от третьего лица                                 |                                |\n| `return_value`        | Маркер                                                                                            | Тип значения                   |\n|                       | **VALUE** - Текущее значение                                                                      |                                |\n|                       | **BASE_VALUE** - Базовое значение                                                                 |                                |\n|                       | **DEFAULT_VALUE** - Значение по умолчанию                                                         |                                |","entity::get_custom_tag":"```justcode\nentity::get_custom_tag\n```\n\n**Имя:** Получить кастомный тег\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает кастомный нбт-тег существа.\n\n**Пример использования:** \n```justcode\n`variable` = entity::get_custom_tag(\"name\", \"any value\");\n\n//Или в сухую позиционно\n\nentity::get_custom_tag(`variable`, \"name\", \"any value\");\n\n//Или в сухую по ключам\n\nentity::get_custom_tag(variable=`variable`, name=\"name\", default=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `name`          | Текст               | Имя тега                       |\n| `default`       | Любое значение      | Значение по умолчанию          |","entity::get_nbt":"```justcode\nentity::get_nbt\n```\n\n**Имя:** Получить NBT-теги сущности\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает NBT-теги сущности по введенному пути и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = entity::get_nbt(\"path\");\n\n//Или в сухую позиционно\n\nentity::get_nbt(`variable`, \"path\");\n\n//Или в сухую по ключам\n\nentity::get_nbt(variable=`variable`, path=\"path\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `path`          | Текст           | Путь                           |","entity::give_potion_effects":"```justcode\nentity::give_potion_effects\n```\n\n**Имя:** Выдать эффекты\\\n**Тип:** Действие без значения\\\n**Описание:** Выдаёт выбранные эффекты существу.\n\n**Пример использования:** \n```justcode\nentity::give_potion_effects([potion(\"slow_falling\"), potion(\"slow_falling\")], \"FALSE\", \"FALSE\", \"AMBIENT\");\n\n//Или в сухую по ключам\n\nentity::give_potion_effects(potions=[potion(\"slow_falling\"), potion(\"slow_falling\")], overwrite=\"FALSE\", show_icon=\"FALSE\", particle_mode=\"AMBIENT\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                        | **Описание**                             |\n| :-------------- | :------------------------ | :---------------------------------- |\n| `potions`            | список[Зелье]                  | Эффекты для выдачи                       |\n| `overwrite`          | Маркер                         | Перезаписывать существующие эффекты      |\n|                      | **FALSE** - Нет                |                                          |\n|                      | **TRUE** - Да                  |                                          |\n| `show_icon`          | Маркер                         | Показывать иконку эффекта                |\n|                      | **FALSE** - Нет                |                                          |\n|                      | **TRUE** - Да                  |                                          |\n| `particle_mode`      | Маркер                         | Показывать частицы                       |\n|                      | **AMBIENT** - Прозрачными      |                                          |\n|                      | **NONE** - Нет                 |                                          |\n|                      | **REGULAR** - Да               |                                          |","entity::heal":"```justcode\nentity::heal\n```\n\n**Имя:** Исцелить существо\\\n**Тип:** Действие без значения\\\n**Описание:** Исцеляет существо.\n\n**Пример использования:** \n```justcode\nentity::heal(1);\n\n//Или в сухую по ключам\n\nentity::heal(heal=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                                   |\n| :------ | :------ | :---------------------------------------- |\n| `heal`       | Число        | Количество половинок сердец для излечения      |","entity::ignite_creeper":"```justcode\nentity::ignite_creeper\n```\n\n**Имя:** Зажечь крипера\\\n**Тип:** Действие без значения\\\n**Описание:** Поджигает крипера, заставляя его взорваться после определённого периода.\n**Работает с:**\\\n&nbsp;&nbsp;Криперами\n\n**Пример использования:** \n```justcode\nentity::ignite_creeper();\n```\n\n","entity::jump":"```justcode\nentity::jump\n```\n\n**Имя:** Прыгнуть\\\n**Тип:** Действие без значения\\\n**Описание:** Заставляет существо прыгнуть.\n**Работает с:**\\\n&nbsp;&nbsp;Мобами\n\n**Пример использования:** \n```justcode\nentity::jump();\n```\n\n","entity::launch_forward":"```justcode\nentity::launch_forward\n```\n\n**Имя:** Запустить вперёд\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает существо вперёд или назад по направлению взгляда в зависимости от силы.\n\n**Пример использования:** \n```justcode\nentity::launch_forward(1, \"FALSE\", \"YAW\");\n\n//Или в сухую по ключам\n\nentity::launch_forward(power=1, increment=\"FALSE\", launch_axis=\"YAW\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                              | **Описание**                   |\n| :------------ | :------------------------------ | :------------------------ |\n| `power`            | Число                                | Сила подбрасывания             |\n| `increment`        | Маркер                               | Учитывать текущую инерцию      |\n|                    | **FALSE** - Выключено                |                                |\n|                    | **TRUE** - Включено                  |                                |\n| `launch_axis`      | Маркер                               | Ось запуска                    |\n|                    | **YAW** - Только по горизонтали      |                                |\n|                    | **YAW_AND_PITCH** - Все оси          |                                |","entity::launch_projectile":"```justcode\nentity::launch_projectile\n```\n\n**Имя:** Запустить снаряд\\\n**Тип:** Действие без значения\\\n**Описание:** Запустить снаряд из местоположения существа.\n\n**Пример использования:** \n```justcode\nentity::launch_projectile(item(\"stick\"), location(0,0,0,0,0), \"name\", 1, 2, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nentity::launch_projectile(projectile=item(\"stick\"), location=location(0,0,0,0,0), name=\"name\", speed=1, inaccuracy=2, trail=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**             | **Описание**                                          |\n| :----------- | :------------- | :----------------------------------------------- |\n| `projectile`      | Предмет             | Снаряд для запуска                                    |\n| `location`        | Местоположение      | Место запуска                                         |\n| `name`            | Текст               | Имя снаряда                                           |\n| `speed`           | Число               | Скорость снаряда                                      |\n| `inaccuracy`      | Число               | Отклонение снаряда (0, чтобы снаряд летел ровно)      |\n| `trail`           | Эффект частиц       | След, который будет оставаться за снарядом            |","entity::launch_to_location":"```justcode\nentity::launch_to_location\n```\n\n**Имя:** Запустить к местоположению\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает существа к выбранному местоположению.\n\n**Пример использования:** \n```justcode\nentity::launch_to_location(location(0,0,0,0,0), 1, \"FALSE\");\n\n//Или в сухую по ключам\n\nentity::launch_to_location(location=location(0,0,0,0,0), power=1, increment=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**                   |\n| :---------- | :-------------------- | :------------------------ |\n| `location`       | Местоположение             | Конечная позиция               |\n| `power`          | Число                      | Сила запуска                   |\n| `increment`      | Маркер                     | Учитывать текущую инерцию      |\n|                  | **FALSE** - Выключено      |                                |\n|                  | **TRUE** - Включено        |                                |","entity::launch_up":"```justcode\nentity::launch_up\n```\n\n**Имя:** Подбросить вверх\\\n**Тип:** Действие без значения\\\n**Описание:** Подбрасывает существо вверх или вниз в зависимости от силы.\n\n**Пример использования:** \n```justcode\nentity::launch_up(1, \"FALSE\");\n\n//Или в сухую по ключам\n\nentity::launch_up(power=1, increment=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**                   |\n| :---------- | :-------------------- | :------------------------ |\n| `power`          | Число                      | Сила подбрасывания             |\n| `increment`      | Маркер                     | Учитывать текущую инерцию      |\n|                  | **FALSE** - Выключено      |                                |\n|                  | **TRUE** - Включено        |                                |","entity::leave_vehicle":"```justcode\nentity::leave_vehicle\n```\n\n**Имя:** Высадить из транспорта\\\n**Тип:** Действие без значения\\\n**Описание:** Высаживает существо из транспорта или существа.\n\n**Пример использования:** \n```justcode\nentity::leave_vehicle();\n```\n\n","entity::modify_piglin_barter_materials":"```justcode\nentity::modify_piglin_barter_materials\n```\n\n**Имя:** Изменить торги пиглина\\\n**Тип:** Действие без значения\\\n**Описание:** Изменяет предметы, которые может дать пиглин при обмене.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Нельзя изменить предметы, которые пиглин продает по умолчанию.\\\n**Работает с:**\\\n&nbsp;&nbsp;Пиглинами\n\n**Пример использования:** \n```justcode\nentity::modify_piglin_barter_materials([item(\"stick\"), item(\"stick\")], \"ADD\");\n\n//Или в сухую по ключам\n\nentity::modify_piglin_barter_materials(materials=[item(\"stick\"), item(\"stick\")], modification_mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**                  | **Тип**                    | **Описание**                |\n| :------------------ | :-------------------- | :--------------------- |\n| `materials`              | список[Предмет]            | Предметы для изменения      |\n| `modification_mode`      | Маркер                     | Режим изменения             |\n|                          | **ADD** - Добавление       |                             |\n|                          | **REMOVE** - Удаление      |                             |","entity::modify_piglin_interested_materials":"```justcode\nentity::modify_piglin_interested_materials\n```\n\n**Имя:** Изменить предметы для торга с пиглином\\\n**Тип:** Действие без значения\\\n**Описание:** Изменяет предметы, требуемые для обмена с пиглином.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Нельзя изменить предметы, которые пиглин требует по умолчанию.\\\n**Работает с:**\\\n&nbsp;&nbsp;Пиглинами\n\n**Пример использования:** \n```justcode\nentity::modify_piglin_interested_materials([item(\"stick\"), item(\"stick\")], \"ADD\");\n\n//Или в сухую по ключам\n\nentity::modify_piglin_interested_materials(materials=[item(\"stick\"), item(\"stick\")], modification_mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**                  | **Тип**                    | **Описание**                |\n| :------------------ | :-------------------- | :--------------------- |\n| `materials`              | список[Предмет]            | Предметы для изменения      |\n| `modification_mode`      | Маркер                     | Режим изменения             |\n|                          | **ADD** - Добавление       |                             |\n|                          | **REMOVE** - Удаление      |                             |","entity::move_to_location":"```justcode\nentity::move_to_location\n```\n\n**Имя:** Установить движение к местоположению\\\n**Тип:** Действие без значения\\\n**Описание:** Инструктирует ИИ существа всегда находить путь к определённому местоположению с определённой скоростью.\n**Работает с:**\\\n&nbsp;&nbsp;Мобами\n\n**Пример использования:** \n```justcode\nentity::move_to_location(location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nentity::move_to_location(location=location(0,0,0,0,0), speed=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                 |\n| :--------- | :------------- | :---------------------- |\n| `location`      | Местоположение      | Конечное местоположение      |\n| `speed`         | Число               | Скорость передвижения        |","entity::move_to_location_stop":"```justcode\nentity::move_to_location_stop\n```\n\n**Имя:** Остановить движение к местоположению\\\n**Тип:** Действие без значения\\\n**Описание:** Останавливает сущность, идущую к местоположению.\n**Работает с:**\\\n&nbsp;&nbsp;Мобами\n\n**Пример использования:** \n```justcode\nentity::move_to_location_stop();\n```\n\n","entity::play_damage_animation":"```justcode\nentity::play_damage_animation\n```\n\n**Имя:** Отобразить анимацию урона\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает анимацию урона существу.\n\n**Пример использования:** \n```justcode\nentity::play_damage_animation(\"CRITICAL_DAMAGE\");\n\n//Или в сухую по ключам\n\nentity::play_damage_animation(damage_type=\"CRITICAL_DAMAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                | **Описание**      |\n| :------------ | :-------------------------------- | :----------- |\n| `damage_type`      | Маркер                                 | Тип урона         |\n|                    | **CRITICAL_DAMAGE** - Критический      |                   |\n|                    | **DAMAGE** - Обычный                   |                   |\n|                    | **MAGICAL_DAMAGE** - Магический        |                   |","entity::play_hurt_animation":"```justcode\nentity::play_hurt_animation\n```\n\n**Имя:** Отобразить анимацию получения урона\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает существу анимацию получения урона с определённым наклоном.\n\n**Пример использования:** \n```justcode\nentity::play_hurt_animation(1);\n\n//Или в сухую по ключам\n\nentity::play_hurt_animation(yaw=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                      |\n| :------ | :------ | :--------------------------- |\n| `yaw`        | Число        | Угол получения урона (0-360)      |","entity::ram_target":"```justcode\nentity::ram_target\n```\n\n**Имя:** Таранить сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Заставляет козлов таранить указанную сущность.\n**Работает с:**\\\n&nbsp;&nbsp;Козлами\n\n**Пример использования:** \n```justcode\nentity::ram_target(\"name_or_uuid\");\n\n//Или в сухую по ключам\n\nentity::ram_target(name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**               |\n| :------------- | :------ | :-------------------- |\n| `name_or_uuid`      | Текст        | Имя или UUID сущности      |","entity::remove":"```justcode\nentity::remove\n```\n\n**Имя:** Удалить сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет сущность из мира.\n\n**Пример использования:** \n```justcode\nentity::remove();\n```\n\n","entity::remove_custom_tag":"```justcode\nentity::remove_custom_tag\n```\n\n**Имя:** Удалить кастомный тег\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет кастомный нбт-тег у существа.\n\n**Пример использования:** \n```justcode\nentity::remove_custom_tag(\"name\");\n\n//Или в сухую по ключам\n\nentity::remove_custom_tag(name=\"name\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `name`       | Текст        | Имя тега          |","entity::remove_disguise":"```justcode\nentity::remove_disguise\n```\n\n**Имя:** Убрать маскировку\\\n**Тип:** Действие без значения\\\n**Описание:** Убирает маскировку у сущности.\n\n**Пример использования:** \n```justcode\nentity::remove_disguise();\n```\n\n","entity::remove_merchant_recipe":"```justcode\nentity::remove_merchant_recipe\n```\n\n**Имя:** Удалить товар Жителю\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет товар Жителю по указанному индексу.\n**Работает с:**\\\n&nbsp;&nbsp;Жителями\\\n&nbsp;&nbsp;Странствующими торговцами\n\n**Пример использования:** \n```justcode\nentity::remove_merchant_recipe(1);\n\n//Или в сухую по ключам\n\nentity::remove_merchant_recipe(recipe_index=1);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**       |\n| :------------- | :------ | :------------ |\n| `recipe_index`      | Число        | Индекс товара      |","entity::remove_potion_effect":"```justcode\nentity::remove_potion_effect\n```\n\n**Имя:** Удалить эффект\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет выбранные эффекты у существа.\n\n**Пример использования:** \n```justcode\nentity::remove_potion_effect([potion(\"slow_falling\"), potion(\"slow_falling\")]);\n\n//Или в сухую по ключам\n\nentity::remove_potion_effect(effects=[potion(\"slow_falling\"), potion(\"slow_falling\")]);\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**            | **Описание**              |\n| :-------- | :------------ | :------------------- |\n| `effects`      | список[Зелье]      | Эффекты для удаления      |","entity::reset_display_brightness":"```justcode\nentity::reset_display_brightness\n```\n\n**Имя:** Сбросить яркость\\\n**Тип:** Действие без значения\\\n**Описание:** Сбросить яркость сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::reset_display_brightness();\n```\n\n","entity::reset_display_glow_color":"```justcode\nentity::reset_display_glow_color\n```\n\n**Имя:** Сбросить цвет свечения\\\n**Тип:** Действие без значения\\\n**Описание:** Сбросить цвет свечения сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами предмета\\\n&nbsp;&nbsp;Визуализаторами блока\n\n**Пример использования:** \n```justcode\nentity::reset_display_glow_color();\n```\n\n","entity::reset_text_display_background":"```justcode\nentity::reset_text_display_background\n```\n\n**Имя:** Сбросить цвет фона\\\n**Тип:** Действие без значения\\\n**Описание:** Сбросить цвет и прозрачность фона визуализатору текста.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами текста\n\n**Пример использования:** \n```justcode\nentity::reset_text_display_background();\n```\n\n","entity::ride_entity":"```justcode\nentity::ride_entity\n```\n\n**Имя:** Посадить на существо\\\n**Тип:** Действие без значения\\\n**Описание:** Сажает существо на другое существо или игрока.\n\n**Пример использования:** \n```justcode\nentity::ride_entity(\"name_or_uuid\");\n\n//Или в сухую по ключам\n\nentity::ride_entity(name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**           |\n| :------------- | :------ | :---------------- |\n| `name_or_uuid`      | Текст        | Имя или UUID цели      |","entity::roll_armadillo":"```justcode\nentity::roll_armadillo\n```\n\n**Имя:** Установить Броненосцу состояние защиты\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает броненосцу состояние защиты (свернут ли броненосец).\n**Работает с:**\\\n&nbsp;&nbsp;Броненосцами\n\n**Пример использования:** \n```justcode\nentity::roll_armadillo(\"ROLL_OUT\");\n\n//Или в сухую по ключам\n\nentity::roll_armadillo(roll=\"ROLL_OUT\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                         | **Описание**          |\n| :------ | :------------------------- | :--------------- |\n| `roll`       | Маркер                          | Состояние защиты      |\n|              | **ROLL_OUT** - Развернутый      |                       |\n|              | **ROLL_UP** - Свернутый         |                       |","entity::set_absorption_health":"```justcode\nentity::set_absorption_health\n```\n\n**Имя:** Установить дополнительное здоровье\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает дополнительное здоровье существа.\n\n**Пример использования:** \n```justcode\nentity::set_absorption_health(1);\n\n//Или в сухую по ключам\n\nentity::set_absorption_health(health=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**                             |\n| :------- | :------ | :---------------------------------- |\n| `health`      | Число        | Количество дополнительного здоровья      |","entity::set_ai":"```justcode\nentity::set_ai\n```\n\n**Имя:** Установить интеллект сущности\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает интеллект сущности.\n\n**Пример использования:** \n```justcode\nentity::set_ai(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_ai(ai=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                    | **Описание**      |\n| :------ | :-------------------- | :----------- |\n| `ai`         | Маркер                     | Интеллект         |\n|              | **FALSE** - Выключить      |                   |\n|              | **TRUE** - Включить        |                   |","entity::set_allay_dancing":"```justcode\nentity::set_allay_dancing\n```\n\n**Имя:** Сделать Тихоню танцующим\\\n**Тип:** Действие без значения\\\n**Описание:** Заставляет Тихоню отображать анимацию танца.\n**Работает с:**\\\n&nbsp;&nbsp;Тихонями\n\n**Пример использования:** \n```justcode\nentity::set_allay_dancing(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_allay_dancing(dance=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                    | **Описание**        |\n| :------ | :-------------------- | :------------- |\n| `dance`      | Маркер                     | Анимация танца      |\n|              | **FALSE** - Выключить      |                     |\n|              | **TRUE** - Включить        |                     |","entity::set_angry":"```justcode\nentity::set_angry\n```\n\n**Имя:** Установить режим гнева\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу режим гнева на определённую цель.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Для корректной работы сущности необходима цель.\\\n**Работает с:**\\\n&nbsp;&nbsp;Пчёлами\\\n&nbsp;&nbsp;Волками\\\n&nbsp;&nbsp;Зомбифицированными пиглинами\\\n&nbsp;&nbsp;Эндерменами\\\n&nbsp;&nbsp;Мобами\n\n**Пример использования:** \n```justcode\nentity::set_angry(\"target\", \"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_angry(target=\"target\", angry=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                    | **Описание**      |\n| :------- | :-------------------- | :----------- |\n| `target`      | Текст                      | Имя цели          |\n| `angry`       | Маркер                     | Режим гнева       |\n|               | **FALSE** - Выключить      |                   |\n|               | **TRUE** - Включить        |                   |","entity::set_animal_age":"```justcode\nentity::set_animal_age\n```\n\n**Имя:** Установить возраст животному\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает возраст животному.\n\n**Пример использования:** \n```justcode\nentity::set_animal_age(1, \"DISABLE\");\n\n//Или в сухую по ключам\n\nentity::set_animal_age(age=1, lock=\"DISABLE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                            | **Описание**               |\n| :------ | :---------------------------- | :-------------------- |\n| `age`        | Число                              | Возраст                    |\n| `lock`       | Маркер                             | Остановить взросление      |\n|              | **DISABLE** - Выключено            |                            |\n|              | **DONT_CHANGE** - Не заменять      |                            |\n|              | **ENABLE** - Включено              |                            |","entity::set_armor_items":"```justcode\nentity::set_armor_items\n```\n\n**Имя:** Установить броню\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает броню сущности.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Любой предмет или блок будет отображаться на голове, если положить его в слот шлема.\n\n**Пример использования:** \n```justcode\nentity::set_armor_items(item(\"stick\"), item(\"stick\"), item(\"stick\"), item(\"stick\"));\n\n//Или в сухую по ключам\n\nentity::set_armor_items(helmet=item(\"stick\"), chestplate=item(\"stick\"), leggings=item(\"stick\"), boots=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**       |\n| :----------- | :------ | :------------ |\n| `helmet`          | Предмет      | Головной убор      |\n| `chestplate`      | Предмет      | Нагрудник          |\n| `leggings`        | Предмет      | Штаны              |\n| `boots`           | Предмет      | Ботинки            |","entity::set_armor_stand_parts":"```justcode\nentity::set_armor_stand_parts\n```\n\n**Имя:** Установить детали стойки для брони\\\n**Тип:** Действие без значения\\\n**Описание:** Установить детали стойки для брони.\n**Работает с:**\\\n&nbsp;&nbsp;Стойками для брони\n\n**Пример использования:** \n```justcode\nentity::set_armor_stand_parts(\"DISABLE\", \"DISABLE\");\n\n//Или в сухую по ключам\n\nentity::set_armor_stand_parts(arms=\"DISABLE\", base_plate=\"DISABLE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                            | **Описание**         |\n| :----------- | :---------------------------- | :-------------- |\n| `arms`            | Маркер                             | Видимость рук        |\n|                   | **DISABLE** - Выключить            |                      |\n|                   | **DONT_CHANGE** - Не изменять      |                      |\n|                   | **ENABLE** - Включить              |                      |\n| `base_plate`      | Маркер                             | Видимость плиты      |\n|                   | **DISABLE** - Выключить            |                      |\n|                   | **DONT_CHANGE** - Не изменять      |                      |\n|                   | **ENABLE** - Включить              |                      |","entity::set_armor_stand_pose":"```justcode\nentity::set_armor_stand_pose\n```\n\n**Имя:** Установить позу стойки для брони\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает позу стойки для брони.\n**Работает с:**\\\n&nbsp;&nbsp;Стойками для брони\n\n**Пример использования:** \n```justcode\nentity::set_armor_stand_pose(1, 2, 3, \"BODY\");\n\n//Или в сухую по ключам\n\nentity::set_armor_stand_pose(x_rotation=1, y_rotation=2, z_rotation=3, body_part=\"BODY\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                          | **Описание**                    |\n| :----------- | :-------------------------- | :------------------------- |\n| `x_rotation`      | Число                            | Поворот по оси X                |\n| `y_rotation`      | Число                            | Поворот по оси Y                |\n| `z_rotation`      | Число                            | Поворот по оси Z                |\n| `body_part`       | Маркер                           | Часть стойки для изменения      |\n|                   | **BODY** - Тело                  |                                 |\n|                   | **HEAD** - Голова                |                                 |\n|                   | **LEFT_ARM** - Левая рука        |                                 |\n|                   | **LEFT_LEG** - Левая нога        |                                 |\n|                   | **RIGHT_ARM** - Правая рука      |                                 |\n|                   | **RIGHT_LEG** - Правая нога      |                                 |","entity::set_arrow_hit_sound":"```justcode\nentity::set_arrow_hit_sound\n```\n\n**Имя:** Установить звук попадания снаряда\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает снаряду звук, издаваемый при попадании в сущность.\n**Работает с:**\\\n&nbsp;&nbsp;Стрелами\\\n&nbsp;&nbsp;Трезубцами\n\n**Пример использования:** \n```justcode\nentity::set_arrow_hit_sound(sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nentity::set_arrow_hit_sound(sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**        |\n| :------ | :------ | :------------- |\n| `sound`      | Звук         | Звук попадания      |","entity::set_arrow_pierce":"```justcode\nentity::set_arrow_pierce\n```\n\n**Имя:** Установить стреле количество пронзаний\\\n**Тип:** Действие без значения\\\n**Описание:** Устаналивает стреле количество раз, которые она может пронзить сущность (от 0 до 127).\n\n**Пример использования:** \n```justcode\nentity::set_arrow_pierce(1);\n\n//Или в сухую по ключам\n\nentity::set_arrow_pierce(pierce=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**              |\n| :------- | :------ | :------------------- |\n| `pierce`      | Число        | Количество пронзаний      |","entity::set_attribute":"```justcode\nentity::set_attribute\n```\n\n**Имя:** Установить атрибут\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанный атрибут на указанное значение существу.\n\n**Пример использования:** \n```justcode\nentity::set_attribute(1, \"CAMERA_DISTANCE\");\n\n//Или в сухую по ключам\n\nentity::set_attribute(value=1, attribute_type=\"CAMERA_DISTANCE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                                                                           | **Описание**           |\n| :--------------- | :------------------------------------------------------------------------------------------- | :---------------- |\n| `value`               | Число                                                                                             | Значение атрибута      |\n| `attribute_type`      | Маркер                                                                                            | Тип атрибута           |\n|                       | **CAMERA_DISTANCE** - Расстояние камеры при виде от третьего лица                                 |                        |\n|                       | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                        |\n|                       | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                        |\n|                       | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                        |\n|                       | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                        |\n|                       | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                        |\n|                       | **GENERIC_BURNING_TIME** - Время горения                                                          |                        |\n|                       | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                        |\n|                       | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                        |\n|                       | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                        |\n|                       | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                        |\n|                       | **GENERIC_GRAVITY** - Гравитация                                                                  |                        |\n|                       | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                        |\n|                       | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                        |\n|                       | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                        |\n|                       | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                        |\n|                       | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                        |\n|                       | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                        |\n|                       | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                        |\n|                       | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                        |\n|                       | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                        |\n|                       | **GENERIC_SCALE** - Масштаб                                                                       |                        |\n|                       | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                        |\n|                       | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                        |\n|                       | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                        |\n|                       | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                        |\n|                       | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                        |\n|                       | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                        |\n|                       | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                        |\n|                       | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                        |\n|                       | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                        |\n|                       | **TEMP_RANGE** - Расстояние приманивания                                                          |                        |\n|                       | **WAYPOINT_RECEIVE_RANGE** - Расстояние улавливания локатора (waypoint_receive_range)             |                        |\n|                       | **WAYPOINT_TRANSMIT_RANGE** - Расстояние улавливания локатором (waypoint_transmit_range)          |                        |\n|                       | **ZOMBIE_SPAWN_REINFORCEMENTS** - Шанс подкрепления зомби                                         |                        |","entity::set_aware":"```justcode\nentity::set_aware\n```\n\n**Имя:** Установить осведомлённость моба\\\n**Тип:** Действие без значения\\\n**Описание:** В выключенном состоянии отключает ИИ моба, но оставляет взаимодействие с гравитацией, толканием и т.д.\n**Работает с:**\\\n&nbsp;&nbsp;Мобами\n\n**Пример использования:** \n```justcode\nentity::set_aware(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_aware(aware=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                    | **Описание**         |\n| :------ | :-------------------- | :-------------- |\n| `aware`      | Маркер                     | Осведомлённость      |\n|              | **FALSE** - Выключить      |                      |\n|              | **TRUE** - Включить        |                      |","entity::set_axolotl_type":"```justcode\nentity::set_axolotl_type\n```\n\n**Имя:** Установить тип аксолотля\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тип аксолотля.\n**Работает с:**\\\n&nbsp;&nbsp;Аксолотлями\n\n**Пример использования:** \n```justcode\nentity::set_axolotl_type(\"BLUE\");\n\n//Или в сухую по ключам\n\nentity::set_axolotl_type(axolotl_type=\"BLUE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                    | **Описание**       |\n| :------------- | :-------------------- | :------------ |\n| `axolotl_type`      | Маркер                     | Тип аксолотля      |\n|                     | **BLUE** - Синий           |                    |\n|                     | **CYAN** - Голубой         |                    |\n|                     | **GOLD** - Золотой         |                    |\n|                     | **LUCY** - Лейкист         |                    |\n|                     | **WILD** - Коричневый      |                    |","entity::set_baby":"```justcode\nentity::set_baby\n```\n\n**Имя:** Установить режим ребёнка\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу режим ребёнка.\n\n**Пример использования:** \n```justcode\nentity::set_baby(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_baby(baby=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                    | **Описание**       |\n| :------ | :-------------------- | :------------ |\n| `baby`       | Маркер                     | Режим ребёнка      |\n|              | **FALSE** - Выключить      |                    |\n|              | **TRUE** - Включить        |                    |","entity::set_base_arrow_damage":"```justcode\nentity::set_base_arrow_damage\n```\n\n**Имя:** Установить первичный урон снаряду\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает снаряду первичный урон, который будет использован в формуле урона снаряда при попадании.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Формула для стрел: первичный_урон * скорость_снаряда = наносимый урон\\\n&nbsp;&nbsp;Формула для трезубцев: первичный_урон = наносимый урон\\\n**Работает с:**\\\n&nbsp;&nbsp;Стрелами\\\n&nbsp;&nbsp;Трезубцами\n\n**Пример использования:** \n```justcode\nentity::set_base_arrow_damage(1);\n\n//Или в сухую по ключам\n\nentity::set_base_arrow_damage(damage=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**      |\n| :------- | :------ | :----------- |\n| `damage`      | Число        | Урон              |","entity::set_bee_has_stinger":"```justcode\nentity::set_bee_has_stinger\n```\n\n**Имя:** Установить Пчеле жало\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает состояние жала пчеле.\n**Работает с:**\\\n&nbsp;&nbsp;Пчёлами\n\n**Пример использования:** \n```justcode\nentity::set_bee_has_stinger(\"TRUE\");\n\n//Или в сухую по ключам\n\nentity::set_bee_has_stinger(stinger=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**              | **Описание**        |\n| :-------- | :-------------- | :------------- |\n| `stinger`      | Маркер               | Состояние жала      |\n|                | **TRUE** - Есть      |                     |\n|                | **FALSE** - Нет      |                     |","entity::set_bee_nectar":"```justcode\nentity::set_bee_nectar\n```\n\n**Имя:** Установить пыльцу пчеле\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает видимость пыльцы пчеле.\n**Работает с:**\\\n&nbsp;&nbsp;Пчёлами\n\n**Пример использования:** \n```justcode\nentity::set_bee_nectar(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_bee_nectar(nectar=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                    | **Описание**          |\n| :------- | :-------------------- | :--------------- |\n| `nectar`      | Маркер                     | Видимость пыльцы      |\n|               | **FALSE** - Выключить      |                       |\n|               | **TRUE** - Включить        |                       |","entity::set_block_display_block":"```justcode\nentity::set_block_display_block\n```\n\n**Имя:** Установить отображаемый блок\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает отображаемый блок визуализатору блока.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами блока\n\n**Пример использования:** \n```justcode\nentity::set_block_display_block(item(\"stone\"));\n\n//Или в сухую по ключам\n\nentity::set_block_display_block(displayed_block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**      | **Описание**           |\n| :---------------- | :------ | :---------------- |\n| `displayed_block`      | Блок         | Отображаемый блок      |","entity::set_camel_dashing":"```justcode\nentity::set_camel_dashing\n```\n\n**Имя:** Установить анимацию рывка верблюду\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает анимацию рывка верблюду.\n**Работает с:**\\\n&nbsp;&nbsp;Верблюдами\n\n**Пример использования:** \n```justcode\nentity::set_camel_dashing(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_camel_dashing(dashing=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                    | **Описание**        |\n| :-------- | :-------------------- | :------------- |\n| `dashing`      | Маркер                     | Анимация рывка      |\n|                | **FALSE** - Выключить      |                     |\n|                | **TRUE** - Включить        |                     |","entity::set_carrying_chest":"```justcode\nentity::set_carrying_chest\n```\n\n**Имя:** Установить видимость сундука\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает видимость сундука на сущности.\n**Работает с:**\\\n&nbsp;&nbsp;Ослами\\\n&nbsp;&nbsp;Мулами\\\n&nbsp;&nbsp;Ламами\n\n**Пример использования:** \n```justcode\nentity::set_carrying_chest(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_carrying_chest(carrying=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                    | **Описание**         |\n| :--------- | :-------------------- | :-------------- |\n| `carrying`      | Маркер                     | Наличие сундука      |\n|                 | **FALSE** - Выключить      |                      |\n|                 | **TRUE** - Включить        |                      |","entity::set_cat_lying_down":"```justcode\nentity::set_cat_lying_down\n```\n\n**Имя:** Установить режим лежания кошке\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает режим лежания кошке.\n**Работает с:**\\\n&nbsp;&nbsp;Кошками\n\n**Пример использования:** \n```justcode\nentity::set_cat_lying_down(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_cat_lying_down(lying_down=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**       |\n| :----------- | :-------------------- | :------------ |\n| `lying_down`      | Маркер                     | Режим лежания      |\n|                   | **FALSE** - Выключить      |                    |\n|                   | **TRUE** - Включить        |                    |","entity::set_cat_type":"```justcode\nentity::set_cat_type\n```\n\n**Имя:** Установить тип кошки\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тип кошки.\n**Работает с:**\\\n&nbsp;&nbsp;Кошками\n\n**Пример использования:** \n```justcode\nentity::set_cat_type(\"ALL_BLACK\");\n\n//Или в сухую по ключам\n\nentity::set_cat_type(cat_type=\"ALL_BLACK\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                 | **Описание**      |\n| :--------- | :------------------------------------------------- | :----------- |\n| `cat_type`      | Маркер                                                  | Тип кошки         |\n|                 | **ALL_BLACK** - Чёрная                                  |                   |\n|                 | **BLACK** - Чёрно-белая                                 |                   |\n|                 | **BRITISH_SHORTHAIR** - Британская короткошёрстная      |                   |\n|                 | **CALICO** - Ситцевая                                   |                   |\n|                 | **JELLIE** - Бело-серая                                 |                   |\n|                 | **PERSIAN** - Персидская                                |                   |\n|                 | **RAGDOLL** - Тряпичная                                 |                   |\n|                 | **RED** - Рыжая                                         |                   |\n|                 | **SIAMESE** - Сиамская                                  |                   |\n|                 | **TABBY** - Полосатая                                   |                   |\n|                 | **WHITE** - Белая                                       |                   |","entity::set_celebrating":"```justcode\nentity::set_celebrating\n```\n\n**Имя:** Установить режим празднования\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает режим празднования существу.\n**Работает с:**\\\n&nbsp;&nbsp;Пиглинами\\\n&nbsp;&nbsp;Рейдерами\n\n**Пример использования:** \n```justcode\nentity::set_celebrating(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_celebrating(celebrating=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**            |\n| :------------ | :-------------------- | :----------------- |\n| `celebrating`      | Маркер                     | Режим празднования      |\n|                    | **FALSE** - Выключить      |                         |\n|                    | **TRUE** - Включить        |                         |","entity::set_chicken_type":"```justcode\nentity::set_chicken_type\n```\n\n**Имя:** Установить тип Курицы\\\n**Тип:** Действие без значения\\\n**Описание:** Устаналивает курице тип окраски.\n**Работает с:**\\\n&nbsp;&nbsp;Курицами\n\n**Пример использования:** \n```justcode\nentity::set_chicken_type(\"COLD\");\n\n//Или в сухую по ключам\n\nentity::set_chicken_type(variant=\"COLD\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                      | **Описание**      |\n| :-------- | :---------------------- | :----------- |\n| `variant`      | Маркер                       | Тип окраски       |\n|                | **COLD** - Снежная           |                   |\n|                | **WARM** - Тропическая       |                   |\n|                | **TEMPERATE** - Обычная      |                   |","entity::set_collidable":"```justcode\nentity::set_collidable\n```\n\n**Имя:** Установить режим столкновения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу режим столкновения с другими существами.\n\n**Пример использования:** \n```justcode\nentity::set_collidable(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_collidable(collidable=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                               | **Описание**            |\n| :----------- | :----------------------------------------------- | :----------------- |\n| `collidable`      | Маркер                                                | Режим столкновения      |\n|                   | **FALSE** - Не сталкивается с другими существами      |                         |\n|                   | **TRUE** - Сталкивается с другими существами          |                         |","entity::set_cow_type":"```justcode\nentity::set_cow_type\n```\n\n**Имя:** Установить тип Коровы\\\n**Тип:** Действие без значения\\\n**Описание:** Устаналивает корове тип окраски.\n**Работает с:**\\\n&nbsp;&nbsp;Коровами\n\n**Пример использования:** \n```justcode\nentity::set_cow_type(\"COLD\");\n\n//Или в сухую по ключам\n\nentity::set_cow_type(variant=\"COLD\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                      | **Описание**      |\n| :-------- | :---------------------- | :----------- |\n| `variant`      | Маркер                       | Тип окраски       |\n|                | **COLD** - Снежная           |                   |\n|                | **WARM** - Тропическая       |                   |\n|                | **TEMPERATE** - Обычная      |                   |","entity::set_creeper_charge":"```justcode\nentity::set_creeper_charge\n```\n\n**Имя:** Установить заряженность криперу\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает, будет ли крипер заряженным.\n**Работает с:**\\\n&nbsp;&nbsp;Криперами\n\n**Пример использования:** \n```justcode\nentity::set_creeper_charge(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_creeper_charge(charged=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                     | **Описание**              |\n| :-------- | :--------------------- | :------------------- |\n| `charged`      | Маркер                      | Заряженность крипера      |\n|                | **FALSE** - Не заряжен      |                           |\n|                | **TRUE** - Заряжен          |                           |","entity::set_creeper_fuse":"```justcode\nentity::set_creeper_fuse\n```\n\n**Имя:** Установить максимальное время взрыва криперу\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает максимальное время взрыва криперу.\n**Работает с:**\\\n&nbsp;&nbsp;Криперами\n\n**Пример использования:** \n```justcode\nentity::set_creeper_fuse(1);\n\n//Или в сухую по ключам\n\nentity::set_creeper_fuse(fuse_ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**                   |\n| :----------- | :------ | :------------------------ |\n| `fuse_ticks`      | Число        | Время до взрыва (в тиках)      |","entity::set_current_health":"```justcode\nentity::set_current_health\n```\n\n**Имя:** Установить здоровье существа\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает здоровье существа на выбранное количество.\n\n**Пример использования:** \n```justcode\nentity::set_current_health(1);\n\n//Или в сухую по ключам\n\nentity::set_current_health(health=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**             |\n| :------- | :------ | :------------------ |\n| `health`      | Число        | Количество здоровья      |","entity::set_custom_name":"```justcode\nentity::set_custom_name\n```\n\n**Имя:** Установить имя\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает имя для существа.\n\n**Пример использования:** \n```justcode\nentity::set_custom_name(\"custom_name\");\n\n//Или в сухую по ключам\n\nentity::set_custom_name(custom_name=\"custom_name\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**      | **Описание**      |\n| :------------ | :------ | :----------- |\n| `custom_name`      | Текст        | Имя существа      |","entity::set_custom_name_visibility":"```justcode\nentity::set_custom_name_visibility\n```\n\n**Имя:** Установить видимость имени\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает видимость имени существа.\n\n**Пример использования:** \n```justcode\nentity::set_custom_name_visibility(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_custom_name_visibility(visibility=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**         |\n| :----------- | :-------------------- | :-------------- |\n| `visibility`      | Маркер                     | Видимость имени      |\n|                   | **FALSE** - Выключить      |                      |\n|                   | **TRUE** - Включить        |                      |","entity::set_custom_tag":"```justcode\nentity::set_custom_tag\n```\n\n**Имя:** Установить кастомный тег\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает кастомный нбт-тег существу.\n\n**Пример использования:** \n```justcode\nentity::set_custom_tag(\"name\", \"value\");\n\n//Или в сухую по ключам\n\nentity::set_custom_tag(name=\"name\", value=\"value\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**       |\n| :------ | :------ | :------------ |\n| `name`       | Текст        | Имя тега           |\n| `value`      | Текст        | Значение тега      |","entity::set_death_drops":"```justcode\nentity::set_death_drops\n```\n\n**Имя:** Установить выпадение предметов\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает, будет ли выпадать лут с существа.\n\n**Пример использования:** \n```justcode\nentity::set_death_drops(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_death_drops(drops=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                    | **Описание**             |\n| :------ | :-------------------- | :------------------ |\n| `drops`      | Маркер                     | Выпадение предметов      |\n|              | **FALSE** - Выключить      |                          |\n|              | **TRUE** - Включить        |                          |","entity::set_death_time":"```justcode\nentity::set_death_time\n```\n\n**Имя:** Установить длительность смерти\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает длительность смерти для существа.\n\n**Пример использования:** \n```justcode\nentity::set_death_time(1);\n\n//Или в сухую по ключам\n\nentity::set_death_time(death_time=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**                       |\n| :----------- | :------ | :---------------------------- |\n| `death_time`      | Число        | Длительность смерти (в тиках)      |","entity::set_default_visible":"```justcode\nentity::set_default_visible\n```\n\n**Имя:** Установить видимость\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает сущности видимость.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Видимость сущности может быть изменена через действие \"Скрыть сущность игроку\".\n\n**Пример использования:** \n```justcode\nentity::set_default_visible(\"TRUE\");\n\n//Или в сухую по ключам\n\nentity::set_default_visible(default_visible=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                    | **Описание**      |\n| :---------------- | :-------------------- | :----------- |\n| `default_visible`      | Маркер                     | Видимость         |\n|                        | **TRUE** - Видимый         |                   |\n|                        | **FALSE** - Невидимый      |                   |","entity::set_despawning":"```justcode\nentity::set_despawning\n```\n\n**Имя:** Установить пропадание существа\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает, будет ли пропадать существо.\n\n**Пример использования:** \n```justcode\nentity::set_despawning(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_despawning(despawning=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**             |\n| :----------- | :-------------------- | :------------------ |\n| `despawning`      | Маркер                     | Пропадание существа      |\n|                   | **FALSE** - Выключить      |                          |\n|                   | **TRUE** - Включить        |                          |","entity::set_display_billboard":"```justcode\nentity::set_display_billboard\n```\n\n**Имя:** Установить режим отображения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает режим отображения сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_billboard(\"CENTER\");\n\n//Или в сухую по ключам\n\nentity::set_display_billboard(billboard_type=\"CENTER\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                            | **Описание**           |\n| :--------------- | :-------------------------------------------- | :---------------- |\n| `billboard_type`      | Маркер                                             | Режим отображения      |\n|                       | **CENTER** - Всегда повёрнут к игроку              |                        |\n|                       | **FIXED** - Фиксированный                          |                        |\n|                       | **HORIZONTAL** - Фиксированный по горизонтали      |                        |\n|                       | **VERTICAL** - Фиксированный по вертикали          |                        |","entity::set_display_brightness":"```justcode\nentity::set_display_brightness\n```\n\n**Имя:** Установить яркость\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает яркость сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_brightness(1, 2);\n\n//Или в сухую по ключам\n\nentity::set_display_brightness(block_light_level=1, sky_light_level=2);\n```\n\n**Аргументы:**\n\n| **Имя**                  | **Тип**      | **Описание**                 |\n| :------------------ | :------ | :---------------------- |\n| `block_light_level`      | Число        | Уровень света от блоков      |\n| `sky_light_level`        | Число        | Уровень света от неба        |","entity::set_display_culling_size":"```justcode\nentity::set_display_culling_size\n```\n\n**Имя:** Установить размер области видимости\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает размер области видимости модели сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_culling_size(1, 2);\n\n//Или в сухую по ключам\n\nentity::set_display_culling_size(width=1, height=2);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**               |\n| :------- | :------ | :-------------------- |\n| `width`       | Число        | Горизонтальный размер      |\n| `height`      | Число        | Вертикальный размер        |","entity::set_display_glow_color":"```justcode\nentity::set_display_glow_color\n```\n\n**Имя:** Установить цвет свечения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает цвет свечения сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами предмета\\\n&nbsp;&nbsp;Визуализаторами блока\n\n**Пример использования:** \n```justcode\nentity::set_display_glow_color(\"color_hexadecimal\");\n\n//Или в сухую по ключам\n\nentity::set_display_glow_color(color_hexadecimal=\"color_hexadecimal\");\n```\n\n**Аргументы:**\n\n| **Имя**                  | **Тип**      | **Описание**      |\n| :------------------ | :------ | :----------- |\n| `color_hexadecimal`      | Текст        | HEX цвет          |","entity::set_display_interpolation":"```justcode\nentity::set_display_interpolation\n```\n\n**Имя:** Установить интерполяцию\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает длительность интерполяции сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_interpolation(1, 2);\n\n//Или в сухую по ключам\n\nentity::set_display_interpolation(interpolation_duration=1, interpolation_delay=2);\n```\n\n**Аргументы:**\n\n| **Имя**                       | **Тип**      | **Описание**                      |\n| :----------------------- | :------ | :--------------------------- |\n| `interpolation_duration`      | Число        | Длительность интерполяции         |\n| `interpolation_delay`         | Число        | Задержка перед интерполяцией      |","entity::set_display_rotation_from_axis_angle":"```justcode\nentity::set_display_rotation_from_axis_angle\n```\n\n**Имя:** Установить поворот по осевому вектору\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает левый или правый поворот по осевому вектору и углу сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_rotation_from_axis_angle(vector(0,0,0), 1, \"ADD\", \"DEGREES\", \"LEFT_ROTATION\");\n\n//Или в сухую по ключам\n\nentity::set_display_rotation_from_axis_angle(axis_vector=vector(0,0,0), angle=1, mode=\"ADD\", input=\"DEGREES\", rotation=\"LEFT_ROTATION\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                                     | **Описание**                     |\n| :------------ | :----------------------------------------------------- | :-------------------------- |\n| `axis_vector`      | Вектор                                                      | Осевой вектор                    |\n| `angle`            | Число                                                       | Угол поворота                    |\n| `mode`             | Маркер                                                      | Режим установки                  |\n|                    | **ADD** - Добавление                                        |                                  |\n|                    | **SET** - Установка                                         |                                  |\n| `input`            | Маркер                                                      | Тип угла                         |\n|                    | **DEGREES** - Градусы                                       |                                  |\n|                    | **RADIANS** - Радианы                                       |                                  |\n| `rotation`         | Маркер                                                      | Порядок применения поворота      |\n|                    | **LEFT_ROTATION** - Левый поворот (Поворот х Размер)        |                                  |\n|                    | **RIGHT_ROTATION** - Правый поворот (Размер х Поворот)      |                                  |","entity::set_display_rotation_from_euler_angles":"```justcode\nentity::set_display_rotation_from_euler_angles\n```\n\n**Имя:** Установить поворот по углам Эйлера\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает левый или правый поворот по углам Эйлера сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_rotation_from_euler_angles(1, 2, 3, \"ADD\", \"DEGREES\", \"LEFT_ROTATION\");\n\n//Или в сухую по ключам\n\nentity::set_display_rotation_from_euler_angles(pitch=1, yaw=2, roll=3, mode=\"ADD\", input=\"DEGREES\", rotation=\"LEFT_ROTATION\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                     | **Описание**                     |\n| :--------- | :----------------------------------------------------- | :-------------------------- |\n| `pitch`         | Число                                                       | Угол тангажа (pitch)             |\n| `yaw`           | Число                                                       | Угол рыскания (yaw)              |\n| `roll`          | Число                                                       | Угол крена (roll)                |\n| `mode`          | Маркер                                                      | Режим установки                  |\n|                 | **ADD** - Добавление                                        |                                  |\n|                 | **SET** - Установка                                         |                                  |\n| `input`         | Маркер                                                      | Тип угла                         |\n|                 | **DEGREES** - Градусы                                       |                                  |\n|                 | **RADIANS** - Радианы                                       |                                  |\n| `rotation`      | Маркер                                                      | Порядок применения поворота      |\n|                 | **LEFT_ROTATION** - Левый поворот (Поворот х Размер)        |                                  |\n|                 | **RIGHT_ROTATION** - Правый поворот (Размер х Поворот)      |                                  |","entity::set_display_scale":"```justcode\nentity::set_display_scale\n```\n\n**Имя:** Установить размер\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает размер сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_scale(vector(0,0,0), \"ADD\");\n\n//Или в сухую по ключам\n\nentity::set_display_scale(scale_vector=vector(0,0,0), mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                   | **Описание**         |\n| :------------- | :------------------- | :-------------- |\n| `scale_vector`      | Вектор                    | Новый размер         |\n| `mode`              | Маркер                    | Режим установки      |\n|                     | **ADD** - Добавление      |                      |\n|                     | **SET** - Установка       |                      |","entity::set_display_shadow":"```justcode\nentity::set_display_shadow\n```\n\n**Имя:** Установить настройки тени\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает размер и прозрачность тени сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_shadow(1, 2);\n\n//Или в сухую по ключам\n\nentity::set_display_shadow(shadow_radius=1, shadow_opacity_percentage=2);\n```\n\n**Аргументы:**\n\n| **Имя**                          | **Тип**      | **Описание**                |\n| :-------------------------- | :------ | :--------------------- |\n| `shadow_radius`                  | Число        | Радиус тени                 |\n| `shadow_opacity_percentage`      | Число        | Процент непрозрачности      |","entity::set_display_teleport_duration":"```justcode\nentity::set_display_teleport_duration\n```\n\n**Имя:** Установить длительность телепорта визуализатора\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает длительность телепорта визуализатора.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_teleport_duration(1);\n\n//Или в сухую по ключам\n\nentity::set_display_teleport_duration(duration=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**                |\n| :--------- | :------ | :--------------------- |\n| `duration`      | Число        | Длительность телепорта      |","entity::set_display_transformation_matrix":"```justcode\nentity::set_display_transformation_matrix\n```\n\n**Имя:** Установить матрицу преобразования\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает матрицу преобразования (ряд-столбец) сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_transformation_matrix([1, 2]);\n\n//Или в сухую по ключам\n\nentity::set_display_transformation_matrix(row_major_matrix=[1, 2]);\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**            | **Описание**             |\n| :----------------- | :------------ | :------------------ |\n| `row_major_matrix`      | список[Число]      | Матрица из 16 чисел      |","entity::set_display_translation":"```justcode\nentity::set_display_translation\n```\n\n**Имя:** Установить смещение\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает смещение сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_translation(vector(0,0,0), \"ADD\");\n\n//Или в сухую по ключам\n\nentity::set_display_translation(translation_vector=vector(0,0,0), mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**                   | **Тип**                   | **Описание**         |\n| :------------------- | :------------------- | :-------------- |\n| `translation_vector`      | Вектор                    | Новое смещение       |\n| `mode`                    | Маркер                    | Режим установки      |\n|                           | **ADD** - Добавление      |                      |\n|                           | **SET** - Установка       |                      |","entity::set_display_view_range":"```justcode\nentity::set_display_view_range\n```\n\n**Имя:** Установить дальность видимости\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает дальность видимости сущности-визуализатору.\n**Работает с:**\\\n&nbsp;&nbsp;Любой сущностью-визуализатором\n\n**Пример использования:** \n```justcode\nentity::set_display_view_range(1);\n\n//Или в сухую по ключам\n\nentity::set_display_view_range(view_range=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**             |\n| :----------- | :------ | :------------------ |\n| `view_range`      | Число        | Дальность видимости      |","entity::set_dragon_phase":"```justcode\nentity::set_dragon_phase\n```\n\n**Имя:** Установить фазу Эндер-дракона\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённую фазу Эндер-дракону.\n**Работает с:**\\\n&nbsp;&nbsp;Эндер-драконами\n\n**Пример использования:** \n```justcode\nentity::set_dragon_phase(\"BREATH_ATTACK\");\n\n//Или в сухую по ключам\n\nentity::set_dragon_phase(phase=\"BREATH_ATTACK\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                                                                  | **Описание**            |\n| :------ | :------------------------------------------------------------------ | :----------------- |\n| `phase`      | Маркер                                                                   | Фаза Эндер-дракона      |\n|              | **BREATH_ATTACK** - Атака дыханием                                       |                         |\n|              | **CHARGE_PLAYER** - Атака на игрока                                      |                         |\n|              | **CIRCLING** - Кружение                                                  |                         |\n|              | **DYING** - Смерть                                                       |                         |\n|              | **FLY_TO_PORTAL** - Полёт к порталу                                      |                         |\n|              | **HOVER** - Полёт                                                        |                         |\n|              | **LAND_ON_PORTAL** - Приземление на портал                               |                         |\n|              | **LEAVE_PORTAL** - Покидание портала                                     |                         |\n|              | **ROAR_BEFORE_ATTACK** - Крик перед атакой                               |                         |\n|              | **SEARCH_FOR_BREATH_ATTACK_TARGET** - Поиск цели для атаки дыханием      |                         |\n|              | **STRAFING** - Уворот                                                    |                         |","entity::set_dye_color":"```justcode\nentity::set_dye_color\n```\n\n**Имя:** Установить цвет сущности\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённый цвет существу.\n**Работает с:**\\\n&nbsp;&nbsp;Овцами\\\n&nbsp;&nbsp;Шалкерами\\\n&nbsp;&nbsp;Ошейниками собак\\\n&nbsp;&nbsp;Ошейниками котов\n\n**Пример использования:** \n```justcode\nentity::set_dye_color(\"BLACK\");\n\n//Или в сухую по ключам\n\nentity::set_dye_color(color=\"BLACK\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                            | **Описание**       |\n| :------ | :---------------------------- | :------------ |\n| `color`      | Маркер                             | Цвет сущности      |\n|              | **BLACK** - Чёрный                 |                    |\n|              | **BLUE** - Синий                   |                    |\n|              | **BROWN** - Коричневый             |                    |\n|              | **CYAN** - Бирюзовый               |                    |\n|              | **GRAY** - Серый                   |                    |\n|              | **GREEN** - Зелёный                |                    |\n|              | **LIGHT_BLUE** - Голубой           |                    |\n|              | **LIGHT_GRAY** - Светло-серый      |                    |\n|              | **LIME** - Лаймовый                |                    |\n|              | **MAGENTA** - Пурпурный            |                    |\n|              | **ORANGE** - Оранжевый             |                    |\n|              | **PINK** - Розовый                 |                    |\n|              | **PURPLE** - Фиолетовый            |                    |\n|              | **RED** - Красный                  |                    |\n|              | **WHITE** - Белый                  |                    |\n|              | **YELLOW** - Жёлтый                |                    |","entity::set_end_crystal_beam":"```justcode\nentity::set_end_crystal_beam\n```\n\n**Имя:** Указать луч кристалла Энда\\\n**Тип:** Действие без значения\\\n**Описание:** Указывает луч кристалла Энда на определённое местоположение.\n**Работает с:**\\\n&nbsp;&nbsp;Кристаллами Энда\n\n**Пример использования:** \n```justcode\nentity::set_end_crystal_beam(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nentity::set_end_crystal_beam(beam=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**                     |\n| :------ | :------------- | :-------------------------- |\n| `beam`       | Местоположение      | Местоположение для указания      |","entity::set_enderman_block":"```justcode\nentity::set_enderman_block\n```\n\n**Имя:** Установить блок Эндермену\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает отображаемый блок Эндермену.\n**Работает с:**\\\n&nbsp;&nbsp;Эндерменами\n\n**Пример использования:** \n```justcode\nentity::set_enderman_block(item(\"stone\"));\n\n//Или в сухую по ключам\n\nentity::set_enderman_block(block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**           |\n| :------ | :------ | :---------------- |\n| `block`      | Блок         | Отображаемый блок      |","entity::set_equipment_item":"```justcode\nentity::set_equipment_item\n```\n\n**Имя:** Установить экипировку\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предметы в один из слотов экипировки (броня и предметы в руках) сущности.\n\n**Пример использования:** \n```justcode\nentity::set_equipment_item(item(\"stick\"), \"BODY\");\n\n//Или в сухую по ключам\n\nentity::set_equipment_item(item=item(\"stick\"), slot=\"BODY\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                                 | **Описание**             |\n| :------ | :--------------------------------- | :------------------ |\n| `item`       | Предмет                                 | Предметы для выдачи      |\n| `slot`       | Маркер                                  | Слот снаряжения          |\n|              | **BODY** - Тело                         |                          |\n|              | **CHEST** - Нагрудник                   |                          |\n|              | **FEET** - Ботинки                      |                          |\n|              | **HAND** - Основная рука                |                          |\n|              | **HEAD** - Шлем                         |                          |\n|              | **LEGS** - Поножи                       |                          |\n|              | **OFF_HAND** - Второстепенная рука      |                          |","entity::set_explosive_power":"```justcode\nentity::set_explosive_power\n```\n\n**Имя:** Установить силу взрыва\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает силу взрыва сущности.\n**Работает с:**\\\n&nbsp;&nbsp;Криперами\\\n&nbsp;&nbsp;Динамитом\\\n&nbsp;&nbsp;Огненными шарами\n\n**Пример использования:** \n```justcode\nentity::set_explosive_power(1);\n\n//Или в сухую по ключам\n\nentity::set_explosive_power(power=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `power`      | Число        | Сила взрыва       |","entity::set_fall_distance":"```justcode\nentity::set_fall_distance\n```\n\n**Имя:** Установить дистанцию падения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает дистанцию, с которой падает существо.\n\n**Пример использования:** \n```justcode\nentity::set_fall_distance(1);\n\n//Или в сухую по ключам\n\nentity::set_fall_distance(fall_distance=1);\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**      | **Описание**           |\n| :-------------- | :------ | :---------------- |\n| `fall_distance`      | Число        | Дистанция падения      |","entity::set_falling_block_type":"```justcode\nentity::set_falling_block_type\n```\n\n**Имя:** Установить тип существу Падающий блок\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает новый тип блока существу Падающий блок.\n**Работает с:**\\\n&nbsp;&nbsp;Падающими блоками\n\n**Пример использования:** \n```justcode\nentity::set_falling_block_type(item(\"stone\"));\n\n//Или в сухую по ключам\n\nentity::set_falling_block_type(block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `block`      | Блок         | Новый блок        |","entity::set_fire_ticks":"```justcode\nentity::set_fire_ticks\n```\n\n**Имя:** Поджечь существо\\\n**Тип:** Действие без значения\\\n**Описание:** Поджигает существо на выбранное время.\n\n**Пример использования:** \n```justcode\nentity::set_fire_ticks(1);\n\n//Или в сухую по ключам\n\nentity::set_fire_ticks(ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                |\n| :------ | :------ | :--------------------- |\n| `ticks`      | Число        | Длительность (в тиках)      |","entity::set_fishing_wait":"```justcode\nentity::set_fishing_wait\n```\n\n**Имя:** Установить задержку рыбалки\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает задержку рыбалки существу в тиках.\n**Работает с:**\\\n&nbsp;&nbsp;Поплавком удочки\n\n**Пример использования:** \n```justcode\nentity::set_fishing_wait(1, \"MAX_WAIT\");\n\n//Или в сухую по ключам\n\nentity::set_fishing_wait(time=1, wait_type=\"MAX_WAIT\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                                                     | **Описание**      |\n| :---------- | :----------------------------------------------------- | :----------- |\n| `time`           | Число                                                       | Задержка          |\n| `wait_type`      | Маркер                                                      | Тип задержки      |\n|                  | **MAX_WAIT** - Максимальная задержка                        |                   |\n|                  | **MIN_MAX_WAIT** - Минимальная и максимальная задержка      |                   |\n|                  | **MIN_WAIT** - Минимальная задержка                         |                   |\n|                  | **WAIT** - Текущая задержка                                 |                   |","entity::set_fox_leaping":"```justcode\nentity::set_fox_leaping\n```\n\n**Имя:** Установить анимацию прыжка лисе\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает анимацию прыжка лисе.\n**Работает с:**\\\n&nbsp;&nbsp;Лисами\n\n**Пример использования:** \n```justcode\nentity::set_fox_leaping(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_fox_leaping(leaping=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                    | **Описание**         |\n| :-------- | :-------------------- | :-------------- |\n| `leaping`      | Маркер                     | Анимация прыжка      |\n|                | **FALSE** - Выключить      |                      |\n|                | **TRUE** - Включить        |                      |","entity::set_fox_type":"```justcode\nentity::set_fox_type\n```\n\n**Имя:** Установить тип лисы\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тип лисы.\n**Работает с:**\\\n&nbsp;&nbsp;Лисами\n\n**Пример использования:** \n```justcode\nentity::set_fox_type(\"RED\");\n\n//Или в сухую по ключам\n\nentity::set_fox_type(fox_type=\"RED\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                    | **Описание**      |\n| :--------- | :-------------------- | :----------- |\n| `fox_type`      | Маркер                     | Тип лисы          |\n|                 | **RED** - Стандартный      |                   |\n|                 | **SNOW** - Зимний          |                   |","entity::set_freeze_ticks":"```justcode\nentity::set_freeze_ticks\n```\n\n**Имя:** Установить время заморозки\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу время заморозки (количество тиков, которое сущность провела в рыхлом снегу).\n\n**Пример использования:** \n```justcode\nentity::set_freeze_ticks(1, \"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_freeze_ticks(ticks=1, ticking_locked=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                    | **Описание**                                          |\n| :--------------- | :-------------------- | :----------------------------------------------- |\n| `ticks`               | Число                      | Время заморозки в тиках                               |\n| `ticking_locked`      | Маркер                     | Блокировка состояния (время не будет изменяться)      |\n|                       | **FALSE** - Выключить      |                                                       |\n|                       | **TRUE** - Включить        |                                                       |","entity::set_friction":"```justcode\nentity::set_friction\n```\n\n**Имя:** Установить трение\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает, будет ли сущность испытывать трение.\n\n**Пример использования:** \n```justcode\nentity::set_friction(\"NOT_SET\");\n\n//Или в сухую по ключам\n\nentity::set_friction(friction=\"NOT_SET\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                         | **Описание**           |\n| :--------- | :------------------------- | :---------------- |\n| `friction`      | Маркер                          | Испытывать трение      |\n|                 | **NOT_SET** - По умолчанию      |                        |\n|                 | **TRUE** - Да                   |                        |\n|                 | **FALSE** - Нет                 |                        |","entity::set_frog_type":"```justcode\nentity::set_frog_type\n```\n\n**Имя:** Установить тип жабы\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает окрас жабы.\n**Работает с:**\\\n&nbsp;&nbsp;Жабами\n\n**Пример использования:** \n```justcode\nentity::set_frog_type(\"COLD\");\n\n//Или в сухую по ключам\n\nentity::set_frog_type(frog_variant=\"COLD\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                        | **Описание**      |\n| :------------- | :------------------------ | :----------- |\n| `frog_variant`      | Маркер                         | Тип жабы          |\n|                     | **COLD** - Холодный            |                   |\n|                     | **TEMPERATE** - Умеренный      |                   |\n|                     | **WARM** - Тёплый              |                   |","entity::set_fuse_ticks":"```justcode\nentity::set_fuse_ticks\n```\n\n**Имя:** Установить время до взрыва\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает время до взрыва сущности.\n**Работает с:**\\\n&nbsp;&nbsp;Криперами\\\n&nbsp;&nbsp;Динамитом\\\n&nbsp;&nbsp;Фейерверками\n\n**Пример использования:** \n```justcode\nentity::set_fuse_ticks(1);\n\n//Или в сухую по ключам\n\nentity::set_fuse_ticks(fuse_ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**                   |\n| :----------- | :------ | :------------------------ |\n| `fuse_ticks`      | Число        | Время до взрыва (в тиках)      |","entity::set_gliding":"```justcode\nentity::set_gliding\n```\n\n**Имя:** Установить полёт на элитрах\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает для существа состояние полёта на элитрах.\n\n**Пример использования:** \n```justcode\nentity::set_gliding(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_gliding(is_gliding=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**          |\n| :----------- | :-------------------- | :--------------- |\n| `is_gliding`      | Маркер                     | Полёт на элитрах      |\n|                   | **FALSE** - Выключено      |                       |\n|                   | **TRUE** - Включено        |                       |","entity::set_glow_squid_dark":"```justcode\nentity::set_glow_squid_dark\n```\n\n**Имя:** Установить время тьмы спруту\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает время тьмы в тиках светящемуся спруту.\n**Работает с:**\\\n&nbsp;&nbsp;Светящимся спрутами\n\n**Пример использования:** \n```justcode\nentity::set_glow_squid_dark(1);\n\n//Или в сухую по ключам\n\nentity::set_glow_squid_dark(dark_ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**              |\n| :----------- | :------ | :------------------- |\n| `dark_ticks`      | Число        | Время тьмы (в тиках)      |","entity::set_glowing":"```justcode\nentity::set_glowing\n```\n\n**Имя:** Установить свечение сущности\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу эффект свечения.\n\n**Пример использования:** \n```justcode\nentity::set_glowing(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_glowing(glowing=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                    | **Описание**      |\n| :-------- | :-------------------- | :----------- |\n| `glowing`      | Маркер                     | Свечение          |\n|                | **FALSE** - Выключить      |                   |\n|                | **TRUE** - Включить        |                   |","entity::set_goat_screaming":"```justcode\nentity::set_goat_screaming\n```\n\n**Имя:** Установить козла кричащим\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тег \\\"кричащий\\\" козлу.\n**Работает с:**\\\n&nbsp;&nbsp;Козлами\n\n**Пример использования:** \n```justcode\nentity::set_goat_screaming(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_goat_screaming(screams=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                    | **Описание**        |\n| :-------- | :-------------------- | :------------- |\n| `screams`      | Маркер                     | Тег \"Кричащий\"      |\n|                | **FALSE** - Выключить      |                     |\n|                | **TRUE** - Включить        |                     |","entity::set_gravity":"```justcode\nentity::set_gravity\n```\n\n**Имя:** Установить гравитацию\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает, будет ли сущность подчиняться гравитации.\n\n**Пример использования:** \n```justcode\nentity::set_gravity(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_gravity(gravity=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                    | **Описание**      |\n| :-------- | :-------------------- | :----------- |\n| `gravity`      | Маркер                     | Гравитация        |\n|                | **FALSE** - Выключить      |                   |\n|                | **TRUE** - Включить        |                   |","entity::set_hanging_facing_location":"```justcode\nentity::set_hanging_facing_location\n```\n\n**Имя:** Установить сторону блока для висящей сущности\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает висящей сущности сторону блока, на которой она находится.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Картины не могут быть размещены сверху или снизу блока.\\\n**Работает с:**\\\n&nbsp;&nbsp;Рамками\\\n&nbsp;&nbsp;Светящимеся рамками\\\n&nbsp;&nbsp;Картинами\n\n**Пример использования:** \n```justcode\nentity::set_hanging_facing_location(\"NORTH\", \"TRUE\");\n\n//Или в сухую по ключам\n\nentity::set_hanging_facing_location(facing=\"NORTH\", force=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                | **Описание**                             |\n| :------- | :---------------- | :---------------------------------- |\n| `facing`      | Маркер                 | Сторона блока                            |\n|               | **NORTH** - Север      |                                          |\n|               | **EAST** - Восток      |                                          |\n|               | **SOUTH** - Юг         |                                          |\n|               | **WEST** - Запад       |                                          |\n|               | **UP** - Верх          |                                          |\n|               | **DOWN** - Низ         |                                          |\n| `force`       | Маркер                 | Игнорировать доступность размещения      |\n|               | **TRUE** - Да          |                                          |\n|               | **FALSE** - Нет        |                                          |","entity::set_horse_jump":"```justcode\nentity::set_horse_jump\n```\n\n**Имя:** Установить лошади силу прыжка\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает лошади силу прыжка.\n**Работает с:**\\\n&nbsp;&nbsp;Лошадьми\\\n&nbsp;&nbsp;Ослами\\\n&nbsp;&nbsp;Мулами\\\n&nbsp;&nbsp;Ламами\n\n**Пример использования:** \n```justcode\nentity::set_horse_jump(1);\n\n//Или в сухую по ключам\n\nentity::set_horse_jump(power=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `power`      | Число        | Сила прыжка       |","entity::set_horse_pattern":"```justcode\nentity::set_horse_pattern\n```\n\n**Имя:** Установить узор лошади\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает окрас и узор лошади.\n**Работает с:**\\\n&nbsp;&nbsp;Лошадьми\n\n**Пример использования:** \n```justcode\nentity::set_horse_pattern(\"BLACK\", \"BLACK_DOTS\");\n\n//Или в сухую по ключам\n\nentity::set_horse_pattern(horse_color=\"BLACK\", horse_style=\"BLACK_DOTS\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                         | **Описание**      |\n| :------------ | :----------------------------------------- | :----------- |\n| `horse_color`      | Маркер                                          | Цвет лошади       |\n|                    | **BLACK** - Чёрный                              |                   |\n|                    | **BROWN** - Коричневый                          |                   |\n|                    | **CHESTNUT** - Рыжий                            |                   |\n|                    | **CREAMY** - Бежевый                            |                   |\n|                    | **DARK_BROWN** - Тёмно-коричневый               |                   |\n|                    | **DO_NOT_CHANGE** - Не изменять                 |                   |\n|                    | **GRAY** - Серый                                |                   |\n|                    | **WHITE** - Белый                               |                   |\n| `horse_style`      | Маркер                                          | Узор лошади       |\n|                    | **BLACK_DOTS** - Тёмные пятна на спине          |                   |\n|                    | **DO_NOT_CHANGE** - Не изменять                 |                   |\n|                    | **NONE** - Без узора                            |                   |\n|                    | **WHITE** - Белые полосы на ногах и голове      |                   |\n|                    | **WHITEFIELD** - Крупные белые пятна            |                   |\n|                    | **WHITE_DOTS** - Мелкие белые пятна             |                   |","entity::set_immune_to_zombification":"```justcode\nentity::set_immune_to_zombification\n```\n\n**Имя:** Установить иммунитет к зомбифицированию\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу иммунитет к зомбифицированию.\n**Работает с:**\\\n&nbsp;&nbsp;Пиглинами\\\n&nbsp;&nbsp;Брутальными пиглинами\\\n&nbsp;&nbsp;Хоглинами\n\n**Пример использования:** \n```justcode\nentity::set_immune_to_zombification(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_immune_to_zombification(is_immune=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**                      |\n| :---------- | :-------------------- | :--------------------------- |\n| `is_immune`      | Маркер                     | Иммунитет к зомбифицированию      |\n|                  | **FALSE** - Выключить      |                                   |\n|                  | **TRUE** - Включить        |                                   |","entity::set_interaction_responsive":"```justcode\nentity::set_interaction_responsive\n```\n\n**Имя:** Установить отзывчивость сущности взаимодействия\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает, будет ли сущность взаимодействия отзываться на взаимодействия.\n**Работает с:**\\\n&nbsp;&nbsp;Сущностями взаимодействия\n\n**Пример использования:** \n```justcode\nentity::set_interaction_responsive(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_interaction_responsive(responsive=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**      |\n| :----------- | :-------------------- | :----------- |\n| `responsive`      | Маркер                     | Отзывчивость      |\n|                   | **FALSE** - Выключить      |                   |\n|                   | **TRUE** - Включить        |                   |","entity::set_interaction_size":"```justcode\nentity::set_interaction_size\n```\n\n**Имя:** Установить размер сущности взаимодействия\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает горизонтальный и вертикальный размеры сущности взаимодействия.\n**Работает с:**\\\n&nbsp;&nbsp;Сущностями взаимодействия\n\n**Пример использования:** \n```justcode\nentity::set_interaction_size(1, 2);\n\n//Или в сухую по ключам\n\nentity::set_interaction_size(width=1, height=2);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**               |\n| :------- | :------ | :-------------------- |\n| `width`       | Число        | Горизонтальный размер      |\n| `height`      | Число        | Вертикальный размер        |","entity::set_invisible":"```justcode\nentity::set_invisible\n```\n\n**Имя:** Установить режим невидимости\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу режим невидимости.\n\n**Пример использования:** \n```justcode\nentity::set_invisible(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_invisible(invisible=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**           |\n| :---------- | :-------------------- | :---------------- |\n| `invisible`      | Маркер                     | Режим невидимости      |\n|                  | **FALSE** - Выключить      |                        |\n|                  | **TRUE** - Включить        |                        |","entity::set_invulnerability_ticks":"```justcode\nentity::set_invulnerability_ticks\n```\n\n**Имя:** Установить длительность неуязвимости\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает длительность неуязвимости для существа.\n\n**Пример использования:** \n```justcode\nentity::set_invulnerability_ticks(1);\n\n//Или в сухую по ключам\n\nentity::set_invulnerability_ticks(ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                             |\n| :------ | :------ | :---------------------------------- |\n| `ticks`      | Число        | Длительность неуязвимости (в тиках)      |","entity::set_invulnerable":"```justcode\nentity::set_invulnerable\n```\n\n**Имя:** Установить неуязвимость сущности\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает неуязвимости сущности, но в режиме креатива можно нанести урон.\n\n**Пример использования:** \n```justcode\nentity::set_invulnerable(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_invulnerable(invulnerable=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                    | **Описание**      |\n| :------------- | :-------------------- | :----------- |\n| `invulnerable`      | Маркер                     | Неуязвимость      |\n|                     | **FALSE** - Выключить      |                   |\n|                     | **TRUE** - Включить        |                   |","entity::set_item":"```justcode\nentity::set_item\n```\n\n**Имя:** Установить тип существу Предмет\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённый тип (ID) существу Предмет.\n**Работает с:**\\\n&nbsp;&nbsp;Предметами\n\n**Пример использования:** \n```justcode\nentity::set_item(item(\"stick\"));\n\n//Или в сухую по ключам\n\nentity::set_item(item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**               |\n| :------ | :------ | :-------------------- |\n| `item`       | Предмет      | Предмет для установки      |","entity::set_item_display_item":"```justcode\nentity::set_item_display_item\n```\n\n**Имя:** Установить отображаемый предмет\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает отображаемый предмет визуализатору предмета.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами предмета\n\n**Пример использования:** \n```justcode\nentity::set_item_display_item(item(\"stick\"));\n\n//Или в сухую по ключам\n\nentity::set_item_display_item(displayed_item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**      | **Описание**              |\n| :--------------- | :------ | :------------------- |\n| `displayed_item`      | Предмет      | Отображаемый предмет      |","entity::set_item_display_model_type":"```justcode\nentity::set_item_display_model_type\n```\n\n**Имя:** Установить тип модели предмета\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тип отображаемой модели предмета визуализатору предмета.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами предмета\n\n**Пример использования:** \n```justcode\nentity::set_item_display_model_type(\"FIRSTPERSON_LEFTHAND\");\n\n//Или в сухую по ключам\n\nentity::set_item_display_model_type(display_model_type=\"FIRSTPERSON_LEFTHAND\");\n```\n\n**Аргументы:**\n\n| **Имя**                   | **Тип**                                                       | **Описание**      |\n| :------------------- | :------------------------------------------------------- | :----------- |\n| `display_model_type`      | Маркер                                                        | Тип модели        |\n|                           | **FIRSTPERSON_LEFTHAND** - Левая рука от первого лица         |                   |\n|                           | **FIRSTPERSON_RIGHTHAND** - Правая рука от первого лица       |                   |\n|                           | **FIXED** - Фиксированный                                     |                   |\n|                           | **GROUND** - На земле                                         |                   |\n|                           | **GUI** - Инвентарь                                           |                   |\n|                           | **HEAD** - Голова                                             |                   |\n|                           | **NONE** - Стандартный                                        |                   |\n|                           | **THIRDPERSON_LEFTHAND** - Левая рука от третьего лица        |                   |\n|                           | **THIRDPERSON_RIGHTHAND** - Правая рука от третьего лица      |                   |","entity::set_item_frame_item_drop_chance":"```justcode\nentity::set_item_frame_item_drop_chance\n```\n\n**Имя:** Установить шанс выпадения предмета из рамки\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает шанс выпадения предмета из рамки при разрушении.\n**Работает с:**\\\n&nbsp;&nbsp;Рамками\\\n&nbsp;&nbsp;Светящимеся рамками\n\n**Пример использования:** \n```justcode\nentity::set_item_frame_item_drop_chance(1);\n\n//Или в сухую по ключам\n\nentity::set_item_frame_item_drop_chance(drop_chance=1);\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**      | **Описание**                         |\n| :------------ | :------ | :------------------------------ |\n| `drop_chance`      | Число        | Шанс (0-100, по умолчанию: 100)      |","entity::set_item_in_frame":"```justcode\nentity::set_item_in_frame\n```\n\n**Имя:** Установить предмет в рамку\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанный предмет в рамку.\n**Работает с:**\\\n&nbsp;&nbsp;Рамками\n\n**Пример использования:** \n```justcode\nentity::set_item_in_frame(item(\"stick\"));\n\n//Или в сухую по ключам\n\nentity::set_item_in_frame(item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `item`       | Предмет      | Предмет           |","entity::set_item_owner":"```justcode\nentity::set_item_owner\n```\n\n**Имя:** Установить владельца предмета\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает сущности предмета владельца.\n**Работает с:**\\\n&nbsp;&nbsp;Предметами\n\n**Пример использования:** \n```justcode\nentity::set_item_owner(\"name_or_uuid\");\n\n//Или в сухую по ключам\n\nentity::set_item_owner(name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**                |\n| :------------- | :------ | :--------------------- |\n| `name_or_uuid`      | Текст        | Имя или UUID владельца      |","entity::set_llama_type":"```justcode\nentity::set_llama_type\n```\n\n**Имя:** Установить цвет ламы\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает цвет ламы.\n**Работает с:**\\\n&nbsp;&nbsp;Ламами\n\n**Пример использования:** \n```justcode\nentity::set_llama_type(\"BROWN\");\n\n//Или в сухую по ключам\n\nentity::set_llama_type(type=\"BROWN\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                     | **Описание**            |\n| :------ | :--------------------- | :----------------- |\n| `type`       | Маркер                      | Цвет для установки      |\n|              | **BROWN** - Коричневый      |                         |\n|              | **CREAMY** - Бежевый        |                         |\n|              | **GRAY** - Серый            |                         |\n|              | **WHITE** - Белый           |                         |","entity::set_location":"```justcode\nentity::set_location\n```\n\n**Имя:** Запустить по вектору\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает существо по указанному вектору.\n\n**Пример использования:** \n```justcode\nentity::set_location(vector(0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_location(velocity=vector(0,0,0), increment=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**                   |\n| :---------- | :-------------------- | :------------------------ |\n| `velocity`       | Вектор                     | Вектор движения                |\n| `increment`      | Маркер                     | Учитывать текущую инерцию      |\n|                  | **FALSE** - Выключено      |                                |\n|                  | **TRUE** - Включено        |                                |","entity::set_marker":"```justcode\nentity::set_marker\n```\n\n**Имя:** Установить режим маркера\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает режим маркера стойке для брони.\n**Работает с:**\\\n&nbsp;&nbsp;Стойками для брони\n\n**Пример использования:** \n```justcode\nentity::set_marker(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_marker(marker=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                    | **Описание**       |\n| :------- | :-------------------- | :------------ |\n| `marker`      | Маркер                     | Режим маркера      |\n|               | **FALSE** - Выключить      |                    |\n|               | **TRUE** - Включить        |                    |","entity::set_max_health":"```justcode\nentity::set_max_health\n```\n\n**Имя:** Установить максимальное здоровье существа\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает максимальное количество здоровья для существа.\n\n**Пример использования:** \n```justcode\nentity::set_max_health(1, \"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_max_health(max_health=1, heal_to_max=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**                          |\n| :------------ | :-------------- | :------------------------------- |\n| `max_health`       | Число                | Максимальное количество здоровья      |\n| `heal_to_max`      | Маркер               | Исцелить существо                     |\n|                    | **FALSE** - Нет      |                                       |\n|                    | **TRUE** - Да        |                                       |","entity::set_merchant_recipe":"```justcode\nentity::set_merchant_recipe\n```\n\n**Имя:** Установить товар Жителю\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает товар Жителю за определённые предметы по указанному индексу.\n**Работает с:**\\\n&nbsp;&nbsp;Жителями\\\n&nbsp;&nbsp;Странствующими торговцами\n\n**Пример использования:** \n```justcode\nentity::set_merchant_recipe(item(\"stick\"), 1, 2, item(\"stick\"), 3, item(\"stick\"), 4, 5, 6, 7, \"APPEND\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_merchant_recipe(result=item(\"stick\"), uses=1, max_uses=2, ingredient_one=item(\"stick\"), villager_experience=3, ingredient_two=item(\"stick\"), price_multiplifier=4, demand=5, index=6, special_price=7, mode=\"APPEND\", experience_reward=\"FALSE\", ignore_discounts=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                    | **Тип**                      | **Описание**                               |\n| :-------------------- | :---------------------- | :------------------------------------ |\n| `result`                   | Предмет                      | Покупаемый товар                           |\n| `uses`                     | Число                        | Количество использований                   |\n| `max_uses`                 | Число                        | Максимальное количество использований      |\n| `ingredient_one`           | Предмет                      | Первый предмет                             |\n| `villager_experience`      | Число                        | Опыт для Жителя                            |\n| `ingredient_two`           | Предмет                      | Второй предмет                             |\n| `price_multiplifier`       | Число                        | Множитель цены                             |\n| `demand`                   | Число                        | Спрос товара                               |\n| `index`                    | Число                        | Индекс товара                              |\n| `special_price`            | Число                        | Особая цена                                |\n| `mode`                     | Маркер                       | Режим установки                            |\n|                            | **APPEND** - Добавление      |                                            |\n|                            | **MERGE** - Замена           |                                            |\n| `experience_reward`        | Маркер                       | Награда опытом                             |\n|                            | **FALSE** - Выключить        |                                            |\n|                            | **TRUE** - Включить          |                                            |\n| `ignore_discounts`         | Маркер                       | Игнорирование скидок                       |\n|                            | **FALSE** - Выключить        |                                            |\n|                            | **TRUE** - Включить          |                                            |","entity::set_minecart_block":"```justcode\nentity::set_minecart_block\n```\n\n**Имя:** Установить блок в вагонетку\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанный блок в вагонетку.\n**Работает с:**\\\n&nbsp;&nbsp;Вагонетками\n\n**Пример использования:** \n```justcode\nentity::set_minecart_block(item(\"stone\"), 1);\n\n//Или в сухую по ключам\n\nentity::set_minecart_block(block=item(\"stone\"), block_offset=1);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**            |\n| :------------- | :------ | :----------------- |\n| `block`             | Блок         | Блок для установки      |\n| `block_offset`      | Число        | Сдвиг в блоках          |","entity::set_mob_aggressive":"```justcode\nentity::set_mob_aggressive\n```\n\n**Имя:** Установить агрессивность\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает агрессивность сущности.\n**Работает с:**\\\n&nbsp;&nbsp;Утопленниками\\\n&nbsp;&nbsp;Пиглинами\\\n&nbsp;&nbsp;Скелетами\\\n&nbsp;&nbsp;Зомби\\\n&nbsp;&nbsp;Зомби-жителями\\\n&nbsp;&nbsp;Иллюзорами\\\n&nbsp;&nbsp;Поборниками\\\n&nbsp;&nbsp;Пандами\\\n&nbsp;&nbsp;Разбойниками\\\n&nbsp;&nbsp;Брутальными пиглинами\n\n**Пример использования:** \n```justcode\nentity::set_mob_aggressive(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_mob_aggressive(aggressive=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**              | **Описание**       |\n| :----------- | :-------------- | :------------ |\n| `aggressive`      | Маркер               | Агрессивность      |\n|                   | **FALSE** - Нет      |                    |\n|                   | **TRUE** - Да        |                    |","entity::set_mushroom_cow_type":"```justcode\nentity::set_mushroom_cow_type\n```\n\n**Имя:** Установить тип грибной коровы\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тип грибной коровы.\n**Работает с:**\\\n&nbsp;&nbsp;Грибными коровами\n\n**Пример использования:** \n```justcode\nentity::set_mushroom_cow_type(\"BROWN\");\n\n//Или в сухую по ключам\n\nentity::set_mushroom_cow_type(cow_type=\"BROWN\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**            |\n| :--------- | :--------------------- | :----------------- |\n| `cow_type`      | Маркер                      | Тип грибной коровы      |\n|                 | **BROWN** - Коричневая      |                         |\n|                 | **RED** - Красная           |                         |","entity::no_physics":"```justcode\nentity::no_physics\n```\n\n**Имя:** Установить физику для сущности\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу физику.\n\n**Пример использования:** \n```justcode\nentity::no_physics(\"TRUE\");\n\n//Или в сухую по ключам\n\nentity::no_physics(no_physics=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**             | **Описание**      |\n| :----------- | :------------- | :----------- |\n| `no_physics`      | Маркер              | Физика            |\n|                   | **TRUE** - Нет      |                   |\n|                   | **FALSE** - Да      |                   |","entity::set_painting_art":"```justcode\nentity::set_painting_art\n```\n\n**Имя:** Установить рисунок картины\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает рисунок для картины.\n**Работает с:**\\\n&nbsp;&nbsp;Картинами\n\n**Пример использования:** \n```justcode\nentity::set_painting_art(\"art\", \"TRUE\");\n\n//Или в сухую по ключам\n\nentity::set_painting_art(art=\"art\", force=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**                             |\n| :------ | :-------------- | :---------------------------------- |\n| `art`        | Текст                | Ключ рисунка картины                     |\n| `force`      | Маркер               | Игнорировать доступность размещения      |\n|              | **TRUE** - Да        |                                          |\n|              | **FALSE** - Нет      |                                          |","entity::set_panda_gene":"```justcode\nentity::set_panda_gene\n```\n\n**Имя:** Установить ген панды\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает ген панды. Это влияет на их поведение и внешний вид.\n**Работает с:**\\\n&nbsp;&nbsp;Пандами\n\n**Пример использования:** \n```justcode\nentity::set_panda_gene(\"BOTH\", \"AGGRESSIVE\");\n\n//Или в сухую по ключам\n\nentity::set_panda_gene(gene=\"BOTH\", gene_type=\"AGGRESSIVE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                           | **Описание**      |\n| :---------- | :--------------------------- | :----------- |\n| `gene`           | Маркер                            | Ген               |\n|                  | **BOTH** - Оба гена               |                   |\n|                  | **HIDDEN** - Скрытый ген          |                   |\n|                  | **MAIN** - Главный ген            |                   |\n| `gene_type`      | Маркер                            | Тип гена          |\n|                  | **AGGRESSIVE** - Агрессивный      |                   |\n|                  | **BROWN** - Суровый               |                   |\n|                  | **LAZY** - Ленивый                |                   |\n|                  | **NORMAL** - Нормальный           |                   |\n|                  | **PLAYFUL** - Игривый             |                   |\n|                  | **WEAK** - Слабый                 |                   |\n|                  | **WORRIED** - Тревожный           |                   |","entity::set_panda_on_back":"```justcode\nentity::set_panda_on_back\n```\n\n**Имя:** Посадить панду\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает Панде состояние сидения.\n**Работает с:**\\\n&nbsp;&nbsp;Пандами\n\n**Пример использования:** \n```justcode\nentity::set_panda_on_back(\"TRUE\");\n\n//Или в сухую по ключам\n\nentity::set_panda_on_back(on_back=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**              | **Описание**           |\n| :-------- | :-------------- | :---------------- |\n| `on_back`      | Маркер               | Состояние сидения      |\n|                | **TRUE** - Да        |                        |\n|                | **FALSE** - Нет      |                        |","entity::set_panda_rolling":"```justcode\nentity::set_panda_rolling\n```\n\n**Имя:** Установить Панде состояние переката\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает Панде состояние переката.\n**Работает с:**\\\n&nbsp;&nbsp;Пандами\n\n**Пример использования:** \n```justcode\nentity::set_panda_rolling(\"TRUE\");\n\n//Или в сухую по ключам\n\nentity::set_panda_rolling(rolling=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**              | **Описание**            |\n| :-------- | :-------------- | :----------------- |\n| `rolling`      | Маркер               | Состояние переката      |\n|                | **TRUE** - Да        |                         |\n|                | **FALSE** - Нет      |                         |","entity::set_panda_sad_ticks":"```justcode\nentity::set_panda_sad_ticks\n```\n\n**Имя:** Установить время грусти Панды\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает время грусти Панды в тиках.\n**Работает с:**\\\n&nbsp;&nbsp;Пандами\n\n**Пример использования:** \n```justcode\nentity::set_panda_sad_ticks(1);\n\n//Или в сухую по ключам\n\nentity::set_panda_sad_ticks(sad_ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**      | **Описание**      |\n| :---------- | :------ | :----------- |\n| `sad_ticks`      | Число        | Время грусти      |","entity::set_parrot_type":"```justcode\nentity::set_parrot_type\n```\n\n**Имя:** Установить тип попугая\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тип попугая.\n**Работает с:**\\\n&nbsp;&nbsp;Попугаями\n\n**Пример использования:** \n```justcode\nentity::set_parrot_type(\"BLUE\");\n\n//Или в сухую по ключам\n\nentity::set_parrot_type(parrot_type=\"BLUE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                   | **Описание**      |\n| :------------ | :------------------- | :----------- |\n| `parrot_type`      | Маркер                    | Тип попугая       |\n|                    | **BLUE** - Синий          |                   |\n|                    | **CYAN** - Бирюзовый      |                   |\n|                    | **GRAY** - Серый          |                   |\n|                    | **GREEN** - Зелёный       |                   |\n|                    | **RED** - Красный         |                   |","entity::set_persistence":"```justcode\nentity::set_persistence\n```\n\n**Имя:** Установить исчезание существа\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает, будет ли предмет или падающий блок исчезать.\n**Работает с:**\\\n&nbsp;&nbsp;Предметами\\\n&nbsp;&nbsp;Падающими блоками\n\n**Пример использования:** \n```justcode\nentity::set_persistence(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_persistence(persistence=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                           | **Описание**            |\n| :------------ | :--------------------------- | :----------------- |\n| `persistence`      | Маркер                            | Исчезание существа      |\n|                    | **FALSE** - Будет исчезать        |                         |\n|                    | **TRUE** - Не будет исчезать      |                         |","entity::set_pickup":"```justcode\nentity::set_pickup\n```\n\n**Имя:** Установить возможность подбора\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает сущности возможность подбора.\n**Работает с:**\\\n&nbsp;&nbsp;Сущностями предметов\n\n**Пример использования:** \n```justcode\nentity::set_pickup(\"TRUE\", \"TRUE\");\n\n//Или в сухую по ключам\n\nentity::set_pickup(can_mob_pickup=\"TRUE\", can_player_pickup=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**                  | **Тип**                   | **Описание**         |\n| :------------------ | :------------------- | :-------------- |\n| `can_mob_pickup`         | Маркер                    | Подбор мобами        |\n|                          | **TRUE** - Включен        |                      |\n|                          | **FALSE** - Отключен      |                      |\n| `can_player_pickup`      | Маркер                    | Подбор игроками      |\n|                          | **TRUE** - Включен        |                      |\n|                          | **FALSE** - Отключен      |                      |","entity::set_pickup_delay":"```justcode\nentity::set_pickup_delay\n```\n\n**Имя:** Установить задержку для поднятия\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает количество тиков, за которое предмет не может быть поднят.\n**Работает с:**\\\n&nbsp;&nbsp;Предметами\n\n**Пример использования:** \n```justcode\nentity::set_pickup_delay(1);\n\n//Или в сухую по ключам\n\nentity::set_pickup_delay(delay=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `delay`      | Число        | Задержка          |","entity::set_pig_type":"```justcode\nentity::set_pig_type\n```\n\n**Имя:** Установить тип Свиньи\\\n**Тип:** Действие без значения\\\n**Описание:** Устаналивает свинье тип окраски.\n**Работает с:**\\\n&nbsp;&nbsp;Свиньями\n\n**Пример использования:** \n```justcode\nentity::set_pig_type(\"COLD\");\n\n//Или в сухую по ключам\n\nentity::set_pig_type(variant=\"COLD\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                      | **Описание**      |\n| :-------- | :---------------------- | :----------- |\n| `variant`      | Маркер                       | Тип окраски       |\n|                | **COLD** - Снежная           |                   |\n|                | **WARM** - Тропическая       |                   |\n|                | **TEMPERATE** - Обычная      |                   |","entity::set_piglin_able_to_hunt":"```justcode\nentity::set_piglin_able_to_hunt\n```\n\n**Имя:** Установить состояние охоты\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает пиглину состояние охоты на хоглинов.\n**Работает с:**\\\n&nbsp;&nbsp;Пиглинами\n\n**Пример использования:** \n```justcode\nentity::set_piglin_able_to_hunt(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_piglin_able_to_hunt(able=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                      | **Описание**         |\n| :------ | :---------------------- | :-------------- |\n| `able`       | Маркер                       | Состояние охоты      |\n|              | **FALSE** - Не охотится      |                      |\n|              | **TRUE** - Охотится          |                      |","entity::set_piglin_charging_crossbow":"```justcode\nentity::set_piglin_charging_crossbow\n```\n\n**Имя:** Установить состояние зарядки арбалета\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает пиглину состояние зарядки арбалета.\n**Работает с:**\\\n&nbsp;&nbsp;Пиглинами\n\n**Пример использования:** \n```justcode\nentity::set_piglin_charging_crossbow(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_piglin_charging_crossbow(charging=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                      | **Описание**           |\n| :--------- | :---------------------- | :---------------- |\n| `charging`      | Маркер                       | Состояние зарядки      |\n|                 | **FALSE** - Не заряжать      |                        |\n|                 | **TRUE** - Заряжать          |                        |","entity::set_piglin_dancing":"```justcode\nentity::set_piglin_dancing\n```\n\n**Имя:** Установить стадию танца\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает пиглину стадию танца на указанное время.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Если значение продолжительности меньше 0, то танец будет длиться бесконечно.\\\n**Работает с:**\\\n&nbsp;&nbsp;Пиглинами\n\n**Пример использования:** \n```justcode\nentity::set_piglin_dancing(1);\n\n//Или в сухую по ключам\n\nentity::set_piglin_dancing(dancing_time=1);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**                           |\n| :------------- | :------ | :-------------------------------- |\n| `dancing_time`      | Число        | Продолжительность танца (в тиках)      |","entity::set_pose":"```justcode\nentity::set_pose\n```\n\n**Имя:** Установить позу сущности\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённую позу существу.\n\n**Пример использования:** \n```justcode\nentity::set_pose(\"CROAKING\");\n\n//Или в сухую по ключам\n\nentity::set_pose(pose=\"CROAKING\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                                                | **Описание**           |\n| :------ | :------------------------------------------------ | :---------------- |\n| `pose`       | Маркер                                                 | Отображаемая поза      |\n|              | **CROAKING** - Кваканье (для Жаб)                      |                        |\n|              | **CROUCHING** - Приседание                             |                        |\n|              | **DIGGING** - Зарывание в землю (для Хранителя)        |                        |\n|              | **DYING** - Смерть                                     |                        |\n|              | **EMERGING** - Появление из земли (для Хранителя)      |                        |\n|              | **FALL_FLYING** - Полёт на Элитрах                     |                        |\n|              | **INHALING** - Вдыхание (для Вихря)                    |                        |\n|              | **LONG_JUMPING** - Длинный прыжок                      |                        |\n|              | **ROARING** - Рёв (для Хранителя)                      |                        |\n|              | **SHOOTING** - Выстреливание (для Вихря)               |                        |\n|              | **SITTING** - Сидение                                  |                        |\n|              | **SLEEPING** - Лежание                                 |                        |\n|              | **SLIDING** - Скольжение (для Вихря)                   |                        |\n|              | **SNEAKING** - None                                    |                        |\n|              | **SNIFFING** - Нюханье (для Хранителя)                 |                        |\n|              | **SPIN_ATTACK** - Использование Тягуна                 |                        |\n|              | **STANDING** - Обычное состояние                       |                        |\n|              | **SWIMMING** - Плавание                                |                        |\n|              | **USING_TONGUE** - Использование языка (для Жаб)       |                        |","entity::set_potion_cloud_radius":"```justcode\nentity::set_potion_cloud_radius\n```\n\n**Имя:** Установить радиус облака эффекта\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает радиус облака эффекта и скорость его расширения.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Скорость расширения - величина изменения радиуса за тик, может быть отрицательной.\\\n**Работает с:**\\\n&nbsp;&nbsp;Облаком эффекта\n\n**Пример использования:** \n```justcode\nentity::set_potion_cloud_radius(1, 2);\n\n//Или в сухую по ключам\n\nentity::set_potion_cloud_radius(radius=1, shrinking_speed=2);\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**      | **Описание**      |\n| :---------------- | :------ | :----------- |\n| `radius`               | Число        | Радиус            |\n| `shrinking_speed`      | Число        | Скорость          |","entity::set_primed_tnt_block":"```justcode\nentity::set_primed_tnt_block\n```\n\n**Имя:** Замаскировать зажжённый динамит под блок\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует зажжённый динамит под указанный блок.\n**Работает с:**\\\n&nbsp;&nbsp;Зажжённым динамитом\n\n**Пример использования:** \n```justcode\nentity::set_primed_tnt_block(item(\"stone\"));\n\n//Или в сухую по ключам\n\nentity::set_primed_tnt_block(block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `block`      | Блок         | Блок              |","entity::set_projectile_display_item":"```justcode\nentity::set_projectile_display_item\n```\n\n**Имя:** Установить предмет снаряда\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает видимый предмет снаряду.\n**Работает с:**\\\n&nbsp;&nbsp;Снежками\\\n&nbsp;&nbsp;Яйцами\\\n&nbsp;&nbsp;Огненными шарами\\\n&nbsp;&nbsp;Огненными шарами Гаста\\\n&nbsp;&nbsp;Эндер-жемчугами\\\n&nbsp;&nbsp;Пузырьками опыта\\\n&nbsp;&nbsp;Очами Края\\\n&nbsp;&nbsp;Брошенными зельями\n\n**Пример использования:** \n```justcode\nentity::set_projectile_display_item(item(\"stick\"));\n\n//Или в сухую по ключам\n\nentity::set_projectile_display_item(item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**               |\n| :------ | :------ | :-------------------- |\n| `item`       | Предмет      | Предмет для установки      |","entity::set_projectile_power":"```justcode\nentity::set_projectile_power\n```\n\n**Имя:** Установить снаряду вектор движения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает снаряду вектор движения.\n**Работает с:**\\\n&nbsp;&nbsp;Огненными шарами\\\n&nbsp;&nbsp;Зарядами дракона\\\n&nbsp;&nbsp;Головами Иссушителя\n\n**Пример использования:** \n```justcode\nentity::set_projectile_power(vector(0,0,0));\n\n//Или в сухую по ключам\n\nentity::set_projectile_power(power=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**         |\n| :------ | :------ | :-------------- |\n| `power`      | Вектор       | Вектор движения      |","entity::set_projectile_shooter":"```justcode\nentity::set_projectile_shooter\n```\n\n**Имя:** Установить стрелка снаряду\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанное существо как стрелка для снаряда.\n\n**Пример использования:** \n```justcode\nentity::set_projectile_shooter(\"uuid\");\n\n//Или в сухую по ключам\n\nentity::set_projectile_shooter(uuid=\"uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**              |\n| :------ | :------ | :------------------- |\n| `uuid`       | Текст        | Имя или UUID стрелка      |","entity::set_rabbit_type":"```justcode\nentity::set_rabbit_type\n```\n\n**Имя:** Установить тип кролика\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тип кролика.\n**Работает с:**\\\n&nbsp;&nbsp;Кроликами\n\n**Пример использования:** \n```justcode\nentity::set_rabbit_type(\"BLACK\");\n\n//Или в сухую по ключам\n\nentity::set_rabbit_type(rabbit_type=\"BLACK\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                    | **Описание**      |\n| :------------ | :------------------------------------ | :----------- |\n| `rabbit_type`      | Маркер                                     | Тип кролика       |\n|                    | **BLACK** - Чёрный                         |                   |\n|                    | **BLACK_AND_WHITE** - Чёрно-белый          |                   |\n|                    | **BROWN** - Коричневый                     |                   |\n|                    | **GOLD** - Золотой                         |                   |\n|                    | **SALT_AND_PEPPER** - Бело-коричневый      |                   |\n|                    | **THE_KILLER_BUNNY** - Кролик-убийца       |                   |\n|                    | **WHITE** - Белый                          |                   |","entity::set_rearing":"```justcode\nentity::set_rearing\n```\n\n**Имя:** Установить позу лошади\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает, будет ли лошадь стоять на задних ногах.\n**Работает с:**\\\n&nbsp;&nbsp;Лошадьми\n\n**Пример использования:** \n```justcode\nentity::set_rearing(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_rearing(rearing=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                                | **Описание**      |\n| :-------- | :-------------------------------- | :----------- |\n| `rearing`      | Маркер                                 | Поза лошади       |\n|                | **FALSE** - Обычное состояние          |                   |\n|                | **TRUE** - Стоять на задних ногах      |                   |","entity::set_riptiding":"```justcode\nentity::set_riptiding\n```\n\n**Имя:** Установить анимацию Тягун\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу анимацию использования зачарования трезубца Тягун.\n\n**Пример использования:** \n```justcode\nentity::set_riptiding(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_riptiding(riptiding=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**          |\n| :---------- | :-------------------- | :--------------- |\n| `riptiding`      | Маркер                     | Анимация 'Тягун'      |\n|                  | **FALSE** - Выключить      |                       |\n|                  | **TRUE** - Включить        |                       |","entity::set_rotation":"```justcode\nentity::set_rotation\n```\n\n**Имя:** Установить поворот\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает поворот сущности.\n\n**Пример использования:** \n```justcode\nentity::set_rotation(1, 2);\n\n//Или в сухую по ключам\n\nentity::set_rotation(yaw=1, pitch=2);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                      |\n| :------ | :------ | :--------------------------- |\n| `yaw`        | Число        | Горизонтальный поворот (yaw)      |\n| `pitch`      | Число        | Вертикальный поворот (pitch)      |","entity::set_rotation_by_vector":"```justcode\nentity::set_rotation_by_vector\n```\n\n**Имя:** Установить поворот по вектору\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает поворот сущности по вектору.\n\n**Пример использования:** \n```justcode\nentity::set_rotation_by_vector(vector(0,0,0));\n\n//Или в сухую по ключам\n\nentity::set_rotation_by_vector(vector=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**             |\n| :------- | :------ | :------------------ |\n| `vector`      | Вектор       | Вектор для поворота      |","entity::set_sheep_sheared":"```justcode\nentity::set_sheep_sheared\n```\n\n**Имя:** Установить шерсть овце\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает, будет ли шерсть на овце.\n**Работает с:**\\\n&nbsp;&nbsp;Овцами\n\n**Пример использования:** \n```justcode\nentity::set_sheep_sheared(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_sheep_sheared(sheared=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                     | **Описание**            |\n| :-------- | :--------------------- | :----------------- |\n| `sheared`      | Маркер                      | Присутствие шерсти      |\n|                | **FALSE** - Без шерсти      |                         |\n|                | **TRUE** - С шерстью        |                         |","entity::set_shulker_bullet_target":"```justcode\nentity::set_shulker_bullet_target\n```\n\n**Имя:** Установить цель снаряду Шалкера\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает цель атаки снаряду Шалкера.\n**Работает с:**\\\n&nbsp;&nbsp;Снарядами Шалкера\n\n**Пример использования:** \n```justcode\nentity::set_shulker_bullet_target(\"target\");\n\n//Или в сухую по ключам\n\nentity::set_shulker_bullet_target(target=\"target\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**           |\n| :------- | :------ | :---------------- |\n| `target`      | Текст        | Имя или UUID цели      |","entity::set_shulker_peek":"```justcode\nentity::set_shulker_peek\n```\n\n**Имя:** Установить процент открытия шалкера\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает шалкеру процент, на который он открыт.\n**Работает с:**\\\n&nbsp;&nbsp;Шалкерами\n\n**Пример использования:** \n```justcode\nentity::set_shulker_peek(1, \"TRUE\");\n\n//Или в сухую по ключам\n\nentity::set_shulker_peek(rolling=1, silent=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**             | **Описание**                      |\n| :-------- | :------------- | :--------------------------- |\n| `rolling`      | Число               | Процент открытия                  |\n| `silent`       | Маркер              | Звук от изменения открытости      |\n|                | **TRUE** - Нет      |                                   |\n|                | **FALSE** - Да      |                                   |","entity::set_silenced":"```justcode\nentity::set_silenced\n```\n\n**Имя:** Заглушить сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Убирает звуки сущности.\n\n**Пример использования:** \n```justcode\nentity::set_silenced(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_silenced(silenced=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                    | **Описание**      |\n| :--------- | :-------------------- | :----------- |\n| `silenced`      | Маркер                     | Заглушение        |\n|                 | **FALSE** - Выключить      |                   |\n|                 | **TRUE** - Включить        |                   |","entity::set_sitting":"```justcode\nentity::set_sitting\n```\n\n**Имя:** Установить режим сидения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу режим сидения.\n**Работает с:**\\\n&nbsp;&nbsp;Волками\\\n&nbsp;&nbsp;Кошками\\\n&nbsp;&nbsp;Попугаями\\\n&nbsp;&nbsp;Лисами\\\n&nbsp;&nbsp;Пандами\n\n**Пример использования:** \n```justcode\nentity::set_sitting(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_sitting(sitting=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                    | **Описание**       |\n| :-------- | :-------------------- | :------------ |\n| `sitting`      | Маркер                     | Режим сидения      |\n|                | **FALSE** - Выключить      |                    |\n|                | **TRUE** - Включить        |                    |","entity::set_size":"```justcode\nentity::set_size\n```\n\n**Имя:** Установить размер существа\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает размер существу.\n**Работает с:**\\\n&nbsp;&nbsp;Слизнями\\\n&nbsp;&nbsp;Фантомами\n\n**Пример использования:** \n```justcode\nentity::set_size(1);\n\n//Или в сухую по ключам\n\nentity::set_size(size=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `size`       | Число        | Размер            |","entity::set_sniffer_state":"```justcode\nentity::set_sniffer_state\n```\n\n**Имя:** Установить состояние нюхача\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённое состояние нюхачу.\n**Работает с:**\\\n&nbsp;&nbsp;Нюхачами\n\n**Пример использования:** \n```justcode\nentity::set_sniffer_state(\"DIGGING\");\n\n//Или в сухую по ключам\n\nentity::set_sniffer_state(state=\"DIGGING\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                                           | **Описание**          |\n| :------ | :------------------------------------------- | :--------------- |\n| `state`      | Маркер                                            | Состояние нюхача      |\n|              | **DIGGING** - Копает                              |                       |\n|              | **FEELING_HAPPY** - Чувстует себя счастливым      |                       |\n|              | **IDLING** - Обычное состояние                    |                       |\n|              | **RISING** - Поднимается                          |                       |\n|              | **SCENTING** - Идёт по следу                      |                       |\n|              | **SEARCHING** - Ищет                              |                       |\n|              | **SNIFFING** - Нюхает                             |                       |","entity::set_snowman_pumpkin":"```justcode\nentity::set_snowman_pumpkin\n```\n\n**Имя:** Установить тыкву снеговику\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает видимость тыквы снеговику.\n**Работает с:**\\\n&nbsp;&nbsp;Снежными големами\n\n**Пример использования:** \n```justcode\nentity::set_snowman_pumpkin(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_snowman_pumpkin(pumpkin=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                    | **Описание**         |\n| :-------- | :-------------------- | :-------------- |\n| `pumpkin`      | Маркер                     | Видимость тыквы      |\n|                | **FALSE** - Выключить      |                      |\n|                | **TRUE** - Включить        |                      |","entity::set_tame":"```justcode\nentity::set_tame\n```\n\n**Имя:** Приручить существо\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает привязанность существа к указанному хозяину.\n**Работает с:**\\\n&nbsp;&nbsp;Волками\\\n&nbsp;&nbsp;Кошками\\\n&nbsp;&nbsp;Лошадьми\\\n&nbsp;&nbsp;Мулами\\\n&nbsp;&nbsp;Ламами\\\n&nbsp;&nbsp;Попугаями\n\n**Пример использования:** \n```justcode\nentity::set_tame(\"name_or_uuid\");\n\n//Или в сухую по ключам\n\nentity::set_tame(name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**              |\n| :------------- | :------ | :------------------- |\n| `name_or_uuid`      | Текст        | Имя или UUID хозяина      |","entity::set_target":"```justcode\nentity::set_target\n```\n\n**Имя:** Установить цель существу\\\n**Тип:** Действие без значения\\\n**Описание:** Инструктирует ИИ существа нацеливаться на определённое существо.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Оставьте пустой слот в поле Текст, чтобы убрать цель.\\\n**Работает с:**\\\n&nbsp;&nbsp;Мобами\n\n**Пример использования:** \n```justcode\nentity::set_target(\"name_or_uuid\");\n\n//Или в сухую по ключам\n\nentity::set_target(name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**           |\n| :------------- | :------ | :---------------- |\n| `name_or_uuid`      | Текст        | Имя или UUID цели      |","entity::set_text_display_alignment":"```justcode\nentity::set_text_display_alignment\n```\n\n**Имя:** Установить выравнивание текста\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает выравнивание текста визуализатору текста.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами текста\n\n**Пример использования:** \n```justcode\nentity::set_text_display_alignment(\"CENTER\");\n\n//Или в сухую по ключам\n\nentity::set_text_display_alignment(text_alignment=\"CENTER\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                     | **Описание**             |\n| :--------------- | :--------------------- | :------------------ |\n| `text_alignment`      | Маркер                      | Выравнивание текста      |\n|                       | **CENTER** - По центру      |                          |\n|                       | **LEFT** - Слева            |                          |\n|                       | **RIGHT** - Справа          |                          |","entity::set_text_display_background":"```justcode\nentity::set_text_display_background\n```\n\n**Имя:** Установить цвет фона\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает цвет и прозрачность фона визуализатору текста.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами текста\n\n**Пример использования:** \n```justcode\nentity::set_text_display_background(\"color_hexadecimal\", 1);\n\n//Или в сухую по ключам\n\nentity::set_text_display_background(color_hexadecimal=\"color_hexadecimal\", opacity=1);\n```\n\n**Аргументы:**\n\n| **Имя**                  | **Тип**      | **Описание**                |\n| :------------------ | :------ | :--------------------- |\n| `color_hexadecimal`      | Текст        | HEX цвет                    |\n| `opacity`                | Число        | Процент непрозрачности      |","entity::set_text_display_line_width":"```justcode\nentity::set_text_display_line_width\n```\n\n**Имя:** Установить ширину строки\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает максимальную ширину строки визуализатору текста.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами текста\n\n**Пример использования:** \n```justcode\nentity::set_text_display_line_width(1);\n\n//Или в сухую по ключам\n\nentity::set_text_display_line_width(line_width=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**       |\n| :----------- | :------ | :------------ |\n| `line_width`      | Число        | Ширина строки      |","entity::set_text_display_opacity":"```justcode\nentity::set_text_display_opacity\n```\n\n**Имя:** Установить прозрачность текста\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает прозрачность текста визуализатору текста.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами текста\n\n**Пример использования:** \n```justcode\nentity::set_text_display_opacity(1);\n\n//Или в сухую по ключам\n\nentity::set_text_display_opacity(text_opacity=1);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**             |\n| :------------- | :------ | :------------------ |\n| `text_opacity`      | Число        | Прозрачность текста      |","entity::set_text_display_see_through":"```justcode\nentity::set_text_display_see_through\n```\n\n**Имя:** Установить видимость через блоки\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает видимость текста через блоки визуализатору текста.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами текста\n\n**Пример использования:** \n```justcode\nentity::set_text_display_see_through(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_text_display_see_through(enable_see_through=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                   | **Тип**                    | **Описание**               |\n| :------------------- | :-------------------- | :-------------------- |\n| `enable_see_through`      | Маркер                     | Видимость через блоки      |\n|                           | **FALSE** - Выключить      |                            |\n|                           | **TRUE** - Включить        |                            |","entity::set_text_display_text":"```justcode\nentity::set_text_display_text\n```\n\n**Имя:** Установить отображаемый текст\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает отображаемый текст визуализатору текста.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами текста\n\n**Пример использования:** \n```justcode\nentity::set_text_display_text([\"displayed_text\", \"displayed_text\"], \"CONCATENATION\");\n\n//Или в сухую по ключам\n\nentity::set_text_display_text(displayed_text=[\"displayed_text\", \"displayed_text\"], merging_mode=\"CONCATENATION\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                        | **Описание**            |\n| :--------------- | :---------------------------------------- | :----------------- |\n| `displayed_text`      | список[Текст]                                  | Отображаемый текст      |\n| `merging_mode`        | Маркер                                         | Объединение текста      |\n|                       | **CONCATENATION** - Объединение                |                         |\n|                       | **SEPARATE_LINES** - Разделение на строки      |                         |\n|                       | **SPACES** - Разделение пробелом               |                         |","entity::set_text_display_text_shadow":"```justcode\nentity::set_text_display_text_shadow\n```\n\n**Имя:** Установить тень текста\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает видимость тени текста визуализатору текста.\n**Работает с:**\\\n&nbsp;&nbsp;Визуализаторами текста\n\n**Пример использования:** \n```justcode\nentity::set_text_display_text_shadow(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_text_display_text_shadow(enable_text_shadow=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                   | **Тип**                    | **Описание**      |\n| :------------------- | :-------------------- | :----------- |\n| `enable_text_shadow`      | Маркер                     | Тень текста       |\n|                           | **FALSE** - Выключить      |                   |\n|                           | **TRUE** - Включить        |                   |","entity::set_tropical_fish_pattern":"```justcode\nentity::set_tropical_fish_pattern\n```\n\n**Имя:** Установить узор рыбы\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает окрас и узор тропической рыбе.\n**Работает с:**\\\n&nbsp;&nbsp;Тропической рыбой\n\n**Пример использования:** \n```justcode\nentity::set_tropical_fish_pattern(\"BLACK\", \"BLACK\", \"BETTY\");\n\n//Или в сухую по ключам\n\nentity::set_tropical_fish_pattern(pattern_color=\"BLACK\", body_color=\"BLACK\", pattern=\"BETTY\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                              | **Описание**      |\n| :-------------- | :------------------------------ | :----------- |\n| `pattern_color`      | Маркер                               | Цвет узора        |\n|                      | **BLACK** - Чёрный                   |                   |\n|                      | **BLUE** - Синий                     |                   |\n|                      | **BROWN** - Коричневый               |                   |\n|                      | **CYAN** - Бирюзовый                 |                   |\n|                      | **DO_NOT_CHANGE** - Не изменять      |                   |\n|                      | **GRAY** - Серый                     |                   |\n|                      | **GREEN** - Зелёный                  |                   |\n|                      | **LIGHT_BLUE** - Голубой             |                   |\n|                      | **LIGHT_GRAY** - Светло-серый        |                   |\n|                      | **LIME** - Лаймовый                  |                   |\n|                      | **MAGENTA** - Пурпурный              |                   |\n|                      | **ORANGE** - Оранжевый               |                   |\n|                      | **PINK** - Розовый                   |                   |\n|                      | **PURPLE** - Фиолетовый              |                   |\n|                      | **RED** - Красный                    |                   |\n|                      | **WHITE** - Белый                    |                   |\n|                      | **YELLOW** - Жёлтый                  |                   |\n| `body_color`         | Маркер                               | Цвет тела         |\n|                      | **BLACK** - Чёрный                   |                   |\n|                      | **BLUE** - Синий                     |                   |\n|                      | **BROWN** - Коричневый               |                   |\n|                      | **CYAN** - Бирюзовый                 |                   |\n|                      | **DO_NOT_CHANGE** - Не изменять      |                   |\n|                      | **GRAY** - Серый                     |                   |\n|                      | **GREEN** - Зелёный                  |                   |\n|                      | **LIGHT_BLUE** - Голубой             |                   |\n|                      | **LIGHT_GRAY** - Светло-серый        |                   |\n|                      | **LIME** - Лаймовый                  |                   |\n|                      | **MAGENTA** - Пурпурный              |                   |\n|                      | **ORANGE** - Оранжевый               |                   |\n|                      | **PINK** - Розовый                   |                   |\n|                      | **PURPLE** - Фиолетовый              |                   |\n|                      | **RED** - Красный                    |                   |\n|                      | **WHITE** - Белый                    |                   |\n|                      | **YELLOW** - Жёлтый                  |                   |\n| `pattern`            | Маркер                               | Узор              |\n|                      | **BETTY** - Betty                    |                   |\n|                      | **BLOCKFISH** - Blockfish            |                   |\n|                      | **BRINELY** - Brinely                |                   |\n|                      | **CLAYFISH** - Clayfish              |                   |\n|                      | **DASHER** - Dasher                  |                   |\n|                      | **DO_NOT_CHANGE** - Не изменять      |                   |\n|                      | **FLOPPER** - Flopper                |                   |\n|                      | **GLITTER** - Glitter                |                   |\n|                      | **KOB** - Kob                        |                   |\n|                      | **SNOOPER** - Snooper                |                   |\n|                      | **SPOTTY** - Spotty                  |                   |\n|                      | **STRIPEY** - Stripey                |                   |\n|                      | **SUNSTREAK** - SunStreak            |                   |","entity::set_vex_charging":"```justcode\nentity::set_vex_charging\n```\n\n**Имя:** Установить Вредине злость\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает Вредине стадию злости.\n**Работает с:**\\\n&nbsp;&nbsp;Врединами\n\n**Пример использования:** \n```justcode\nentity::set_vex_charging(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_vex_charging(charging=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                  | **Описание**       |\n| :--------- | :------------------ | :------------ |\n| `charging`      | Маркер                   | Стадия злости      |\n|                 | **FALSE** - Не злой      |                    |\n|                 | **TRUE** - Злой          |                    |","entity::set_vex_limited_lifetime_ticks":"```justcode\nentity::set_vex_limited_lifetime_ticks\n```\n\n**Имя:** Установить время жизни Вредины\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает время жизни Вредины в тиках.\n**Работает с:**\\\n&nbsp;&nbsp;Врединами\n\n**Пример использования:** \n```justcode\nentity::set_vex_limited_lifetime_ticks(1);\n\n//Или в сухую по ключам\n\nentity::set_vex_limited_lifetime_ticks(lifetime=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**      |\n| :--------- | :------ | :----------- |\n| `lifetime`      | Число        | Время жизни       |","entity::set_villager_biome":"```justcode\nentity::set_villager_biome\n```\n\n**Имя:** Установить биом жителю\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает жителю окрас в зависимости от выбранного биома.\n**Работает с:**\\\n&nbsp;&nbsp;Жителями\n\n**Пример использования:** \n```justcode\nentity::set_villager_biome(\"DESERT\");\n\n//Или в сухую по ключам\n\nentity::set_villager_biome(biome=\"DESERT\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                     | **Описание**      |\n| :------ | :--------------------- | :----------- |\n| `biome`      | Маркер                      | Биом              |\n|              | **DESERT** - Пустынный      |                   |\n|              | **JUNGLE** - Джунгли        |                   |\n|              | **PLAINS** - Равнины        |                   |\n|              | **SAVANNA** - Саванна       |                   |\n|              | **SNOW** - Снежный          |                   |\n|              | **SWAMP** - Болото          |                   |\n|              | **TAIGA** - Тайга           |                   |","entity::set_villager_experience":"```justcode\nentity::set_villager_experience\n```\n\n**Имя:** Установить опыт жителю\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает жителю количество опыта.\n**Работает с:**\\\n&nbsp;&nbsp;Жителями\n\n**Пример использования:** \n```justcode\nentity::set_villager_experience(1);\n\n//Или в сухую по ключам\n\nentity::set_villager_experience(experience=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**          |\n| :----------- | :------ | :--------------- |\n| `experience`      | Число        | Количество опыта      |","entity::set_villager_profession":"```justcode\nentity::set_villager_profession\n```\n\n**Имя:** Установить профессию жителю\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённую профессию жителю.\n**Работает с:**\\\n&nbsp;&nbsp;Жителями\\\n&nbsp;&nbsp;Зомби-жителями\n\n**Пример использования:** \n```justcode\nentity::set_villager_profession(\"ARMORER\");\n\n//Или в сухую по ключам\n\nentity::set_villager_profession(profession=\"ARMORER\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                               | **Описание**          |\n| :----------- | :------------------------------- | :--------------- |\n| `profession`      | Маркер                                | Профессия жителя      |\n|                   | **ARMORER** - Бронник                 |                       |\n|                   | **BUTCHER** - Мясник                  |                       |\n|                   | **CARTOGRAPHER** - Картограф          |                       |\n|                   | **CLERIC** - Священник                |                       |\n|                   | **FARMER** - Фермер                   |                       |\n|                   | **FISHERMAN** - Рыбак                 |                       |\n|                   | **FLETCHER** - Лучник                 |                       |\n|                   | **LEATHERWORKER** - Кожевник          |                       |\n|                   | **LIBRARIAN** - Библиотекарь          |                       |\n|                   | **MASON** - Каменщик                  |                       |\n|                   | **NITWIT** - Нищий                    |                       |\n|                   | **NONE** - Без профессии              |                       |\n|                   | **SHEPHERD** - Пастух                 |                       |\n|                   | **TOOLSMITH** - Инструментальщик      |                       |\n|                   | **WEAPONSMITH** - Оружейник           |                       |","entity::set_visual_fire":"```justcode\nentity::set_visual_fire\n```\n\n**Имя:** Отображать огонь\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает огонь на существе.\n\n**Пример использования:** \n```justcode\nentity::set_visual_fire(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_visual_fire(visual_fire=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                         | **Описание**          |\n| :------------ | :------------------------- | :--------------- |\n| `visual_fire`      | Маркер                          | Отображение огня      |\n|                    | **FALSE** - Выключить           |                       |\n|                    | **NOT_SET** - По умолчанию      |                       |\n|                    | **TRUE** - Включить             |                       |","entity::set_warden_anger_level":"```justcode\nentity::set_warden_anger_level\n```\n\n**Имя:** Установить уровень гнева Хранителя\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённый уровень гнева Хранителя на указанное существо.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Если уровень гнева на сущность достигает 80, Хранитель начинает активно преследовать её.\\\n**Работает с:**\\\n&nbsp;&nbsp;Хранителями\n\n**Пример использования:** \n```justcode\nentity::set_warden_anger_level(\"name_or_uuid\", 1);\n\n//Или в сухую по ключам\n\nentity::set_warden_anger_level(name_or_uuid=\"name_or_uuid\", anger=1);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**                     |\n| :------------- | :------ | :-------------------------- |\n| `name_or_uuid`      | Текст        | Имя или UUID сущности            |\n| `anger`             | Число        | Уровень гнева (от 0 до 150)      |","entity::set_warden_digging":"```justcode\nentity::set_warden_digging\n```\n\n**Имя:** Установить Вардену тип копания\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает Вардену тип копания.\n**Работает с:**\\\n&nbsp;&nbsp;Варденом\n\n**Пример использования:** \n```justcode\nentity::set_warden_digging(\"DIG_DOWN\");\n\n//Или в сухую по ключам\n\nentity::set_warden_digging(digging=\"DIG_DOWN\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                         | **Описание**           |\n| :-------- | :------------------------- | :---------------- |\n| `digging`      | Маркер                          | Состояние копания      |\n|                | **DIG_DOWN** - Закапывание      |                        |\n|                | **EMERGE** - Появление          |                        |","entity::set_wearing_saddle":"```justcode\nentity::set_wearing_saddle\n```\n\n**Имя:** Установить видимость седла\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу седло.\n**Работает с:**\\\n&nbsp;&nbsp;Свиньями\\\n&nbsp;&nbsp;Лошадьми\\\n&nbsp;&nbsp;Лавомерками\n\n**Пример использования:** \n```justcode\nentity::set_wearing_saddle(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_wearing_saddle(wearing=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                    | **Описание**       |\n| :-------- | :-------------------- | :------------ |\n| `wearing`      | Маркер                     | Наличие седла      |\n|                | **FALSE** - Выключить      |                    |\n|                | **TRUE** - Включить        |                    |","entity::set_wither_invulnerability_ticks":"```justcode\nentity::set_wither_invulnerability_ticks\n```\n\n**Имя:** Установить неуязвимость иссушителю\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает длительность неуязвимости иссушителю.\n**Работает с:**\\\n&nbsp;&nbsp;Иссушителем\n\n**Пример использования:** \n```justcode\nentity::set_wither_invulnerability_ticks(1);\n\n//Или в сухую по ключам\n\nentity::set_wither_invulnerability_ticks(ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                             |\n| :------ | :------ | :---------------------------------- |\n| `ticks`      | Число        | Длительность неуязвимости (в тиках)      |","entity::set_wolf_sound_variant":"```justcode\nentity::set_wolf_sound_variant\n```\n\n**Имя:** Установить звук Волка\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тип издаваемых звуков волку.\n**Работает с:**\\\n&nbsp;&nbsp;Волками\n\n**Пример использования:** \n```justcode\nentity::set_wolf_sound_variant(\"ANGRY\");\n\n//Или в сухую по ключам\n\nentity::set_wolf_sound_variant(sound_variant=\"ANGRY\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                     | **Описание**               |\n| :-------------- | :--------------------- | :-------------------- |\n| `sound_variant`      | Маркер                      | Тип издаваемых звуков      |\n|                      | **ANGRY** - Злой            |                            |\n|                      | **BIG** - Большой           |                            |\n|                      | **CLASSIC** - Обычный       |                            |\n|                      | **CUTE** - Добрый           |                            |\n|                      | **GRUMPY** - Сварливый      |                            |\n|                      | **PUGLIN** - Мопс           |                            |\n|                      | **SAD** - Грустный          |                            |","entity::set_wolf_type":"```justcode\nentity::set_wolf_type\n```\n\n**Имя:** Установить тип волка\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает тип волка.\n**Работает с:**\\\n&nbsp;&nbsp;Волками\n\n**Пример использования:** \n```justcode\nentity::set_wolf_type(\"ASHEN\");\n\n//Или в сухую по ключам\n\nentity::set_wolf_type(wolf_type=\"ASHEN\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                        | **Описание**      |\n| :---------- | :------------------------ | :----------- |\n| `wolf_type`      | Маркер                         | Тип волка         |\n|                  | **ASHEN** - Пепельный          |                   |\n|                  | **SNOWY** - Снежный            |                   |\n|                  | **RUSTY** - Рыжий              |                   |\n|                  | **BLACK** - Чёрный             |                   |\n|                  | **CHESTNUT** - Каштановый      |                   |\n|                  | **SPOTTED** - Пятнистый        |                   |\n|                  | **STRIPED** - Полосатый        |                   |\n|                  | **PALE** - Обычный             |                   |","entity::set_zombie_arms_raised":"```justcode\nentity::set_zombie_arms_raised\n```\n\n**Имя:** Установить поднятие рук зомби\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает анимацию поднятия рук для зомби.\n**Работает с:**\\\n&nbsp;&nbsp;Зомби\n\n**Пример использования:** \n```justcode\nentity::set_zombie_arms_raised(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::set_zombie_arms_raised(arms_raised=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**      |\n| :------------ | :-------------------- | :----------- |\n| `arms_raised`      | Маркер                     | Поднятие рук      |\n|                    | **FALSE** - Выключить      |                   |\n|                    | **TRUE** - Включить        |                   |","entity::shear":"```justcode\nentity::shear\n```\n\n**Имя:** Подстричь сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Стрижёт сущность.\n**Работает с:**\\\n&nbsp;&nbsp;Овцами\\\n&nbsp;&nbsp;Грибными коровами\\\n&nbsp;&nbsp;Болотником\\\n&nbsp;&nbsp;Снеговиками\n\n**Пример использования:** \n```justcode\nentity::shear();\n```\n\n","entity::shear_sheep":"```justcode\nentity::shear_sheep\n```\n\n**Имя:** Подстричь овцу\\\n**Тип:** Действие без значения\\\n**Описание:** Подстригает овцу.\n**Работает с:**\\\n&nbsp;&nbsp;Овцами\n\n**Пример использования:** \n```justcode\nentity::shear_sheep();\n```\n\n","entity::sleep":"```justcode\nentity::sleep\n```\n\n**Имя:** Установить анимацию сна\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает существу анимацию сна. Лучше всего использовать это действие в цикле.\n**Работает с:**\\\n&nbsp;&nbsp;Лисами\n\n**Пример использования:** \n```justcode\nentity::sleep(\"FALSE\");\n\n//Или в сухую по ключам\n\nentity::sleep(sleep=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                    | **Описание**      |\n| :------ | :-------------------- | :----------- |\n| `sleep`      | Маркер                     | Режим сна         |\n|              | **FALSE** - Выключить      |                   |\n|              | **TRUE** - Включить        |                   |","entity::swing_hand":"```justcode\nentity::swing_hand\n```\n\n**Имя:** Проиграть анимацию взмаха руки\\\n**Тип:** Действие без значения\\\n**Описание:** Проигрывает для сущности анимацию взмаха руки.\n\n**Пример использования:** \n```justcode\nentity::swing_hand(\"MAIN\");\n\n//Или в сухую по ключам\n\nentity::swing_hand(hand_type=\"MAIN\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                       | **Описание**      |\n| :---------- | :----------------------- | :----------- |\n| `hand_type`      | Маркер                        | Тип руки          |\n|                  | **MAIN** - Главная            |                   |\n|                  | **OFF** - Второстепенная      |                   |","entity::teleport":"```justcode\nentity::teleport\n```\n\n**Имя:** Телепортация\\\n**Тип:** Действие без значения\\\n**Описание:** Телепортирует существо в выбранное местоположение.\n\n**Пример использования:** \n```justcode\nentity::teleport(location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nentity::teleport(location=location(0,0,0,0,0), keep_rotation=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                    | **Описание**                  |\n| :-------------- | :-------------------- | :----------------------- |\n| `location`           | Местоположение             | Новая позиция                 |\n| `keep_rotation`      | Маркер                     | Оставить текущий поворот      |\n|                      | **FALSE** - Выключено      |                               |\n|                      | **TRUE** - Включено        |                               |","entity::use_item":"```justcode\nentity::use_item\n```\n\n**Имя:** Использовать предмет\\\n**Тип:** Действие без значения\\\n**Описание:** Инструктирует ИИ существа на использование предмета в его руке.\n**Работает с:**\\\n&nbsp;&nbsp;Мобами\n\n**Пример использования:** \n```justcode\nentity::use_item(\"MAIN_HAND\", \"FALSE\");\n\n//Или в сухую по ключам\n\nentity::use_item(hand=\"MAIN_HAND\", enable=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                                 | **Описание**       |\n| :------- | :--------------------------------- | :------------ |\n| `hand`        | Маркер                                  | Тип руки           |\n|               | **MAIN_HAND** - Основная рука           |                    |\n|               | **OFF_HAND** - Второстепенная рука      |                    |\n| `enable`      | Маркер                                  | Использование      |\n|               | **FALSE** - Выключить                   |                    |\n|               | **TRUE** - Включить                     |                    |","world::block_growth":"```justcode\nworld::block_growth\n```\n\n**Имя:** Установить стадию роста блока\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает стадию роста для блока на выбранном местоположении.\n\n**Пример использования:** \n```justcode\nworld::block_growth(location(0,0,0,0,0), 1, \"PERCENTAGE\");\n\n//Или в сухую по ключам\n\nworld::block_growth(location=location(0,0,0,0,0), growth_stage=1, growth_type=\"PERCENTAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                    | **Описание**              |\n| :------------- | :------------------------------------ | :------------------- |\n| `location`          | Местоположение                             | Местоположение блока      |\n| `growth_stage`      | Число                                      | Стадия роста              |\n| `growth_type`       | Маркер                                     | Тип роста                 |\n|                     | **PERCENTAGE** - Процент роста             |                           |\n|                     | **STAGE_NUMBER** - Номер стадии роста      |                           |","world::bloom_skulk_catalyst":"```justcode\nworld::bloom_skulk_catalyst\n```\n\n**Имя:** Продлить скалк-заражение к местоположению\\\n**Тип:** Действие без значения\\\n**Описание:** Продлевает скалк-заражение к местоположению.\n**Работает с:**\\\n&nbsp;&nbsp;Скалк-катализаторами\n\n**Пример использования:** \n```justcode\nworld::bloom_skulk_catalyst(location(0,0,0,0,0), location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nworld::bloom_skulk_catalyst(location=location(0,0,0,0,0), bloom_location=location(0,0,0,0,0), charge=1);\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**             | **Описание**                                |\n| :--------------- | :------------- | :------------------------------------- |\n| `location`            | Местоположение      | Местоположение скалкового катализатора      |\n| `bloom_location`      | Местоположение      | Конечное местоположение                     |\n| `charge`              | Число               | Сила заражения                              |","world::bone_meal_block":"```justcode\nworld::bone_meal_block\n```\n\n**Имя:** Удобрить блок\\\n**Тип:** Действие без значения\\\n**Описание:** Удобряет блок на выбранном местоположении.\n\n**Пример использования:** \n```justcode\nworld::bone_meal_block(location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nworld::bone_meal_block(location=location(0,0,0,0,0), count=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                     |\n| :--------- | :------------- | :-------------------------- |\n| `location`      | Местоположение      | Местоположение блока             |\n| `count`         | Число               | Количество попыток удобрить      |","world::break_block":"```justcode\nworld::break_block\n```\n\n**Имя:** Сломать блок\\\n**Тип:** Действие без значения\\\n**Описание:** Разрушает блоки на указанных местоположениях, как если бы это сделал игрок в режиме выживания нужным инструментом.\n\n**Пример использования:** \n```justcode\nworld::break_block([location(0,0,0,0,0), location(0,0,0,0,0)], item(\"stick\"), \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::break_block(locations=[location(0,0,0,0,0), location(0,0,0,0,0)], tool=item(\"stick\"), drop_exp=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                     | **Описание**               |\n| :---------- | :--------------------- | :-------------------- |\n| `locations`      | список[Местоположение]      | Местоположения блоков      |\n| `tool`           | Предмет                     | Инструмент                 |\n| `drop_exp`       | Маркер                      | Выпадение опыта            |\n|                  | **FALSE** - Выключить       |                            |\n|                  | **TRUE** - Включить         |                            |","world::cancel_event":"```justcode\nworld::cancel_event\n```\n\n**Имя:** Отмена события\\\n**Тип:** Действие без значения\\\n**Описание:** Отменяет начальное событие, которое вызвало этот код.\n\n**Пример использования:** \n```justcode\nworld::cancel_event();\n```\n\n","world::clear_container":"```justcode\nworld::clear_container\n```\n\n**Имя:** Очистить контейнер\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет все предметы из контейнера на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Любыми контейнерами\n\n**Пример использования:** \n```justcode\nworld::clear_container(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nworld::clear_container(location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `location`      | Местоположение      | Местоположение контейнера      |","world::clear_container_items":"```justcode\nworld::clear_container_items\n```\n\n**Имя:** Очистить предметы в контейнере\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает указанные предметы из контейнера.\n**Работает с:**\\\n&nbsp;&nbsp;Любыми контейнерами\n\n**Пример использования:** \n```justcode\nworld::clear_container_items([item(\"stick\"), item(\"stick\")], location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nworld::clear_container_items(items=[item(\"stick\"), item(\"stick\")], location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**              | **Описание**                   |\n| :--------- | :-------------- | :------------------------ |\n| `items`         | список[Предмет]      | Предметы                       |\n| `location`      | Местоположение       | Местоположение контейнера      |","world::clear_exploded_blocks":"```justcode\nworld::clear_exploded_blocks\n```\n\n**Имя:** Очистить взорванные блоки\\\n**Тип:** Действие без значения\\\n**Описание:** Возвращает взорванные блоки в исходное положение.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Сущность взрывается\"\\\n&nbsp;&nbsp;Событием \"Блок взрывается\"\n\n**Пример использования:** \n```justcode\nworld::clear_exploded_blocks([location(0,0,0,0,0), location(0,0,0,0,0)]);\n\n//Или в сухую по ключам\n\nworld::clear_exploded_blocks(location=[location(0,0,0,0,0), location(0,0,0,0,0)]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**               |\n| :--------- | :--------------------- | :-------------------- |\n| `location`      | список[Местоположение]      | Местоположения блоков      |","world::clear_region":"```justcode\nworld::clear_region\n```\n\n**Имя:** Очистить регион\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет все блоки в регионе.\n\n**Пример использования:** \n```justcode\nworld::clear_region(location(0,0,0,0,0), location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nworld::clear_region(pos_1=location(0,0,0,0,0), pos_2=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**                      |\n| :------ | :------------- | :--------------------------- |\n| `pos_1`      | Местоположение      | Угол региона                      |\n| `pos_2`      | Местоположение      | Противоположный угол региона      |","world::clear_scoreboard_scores":"```justcode\nworld::clear_scoreboard_scores\n```\n\n**Имя:** Очистить значения скорборда\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает все значения указанного скорборда.\n\n**Пример использования:** \n```justcode\nworld::clear_scoreboard_scores(\"id\");\n\n//Или в сухую по ключам\n\nworld::clear_scoreboard_scores(id=\"id\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `id`         | Текст        | ID скорборда      |","world::clone_region":"```justcode\nworld::clone_region\n```\n\n**Имя:** Клонировать блоки региона\\\n**Тип:** Действие без значения\\\n**Описание:** Клонирует регион на выбраное местоположение.\n\n**Пример использования:** \n```justcode\nworld::clone_region(location(0,0,0,0,0), location(0,0,0,0,0), location(0,0,0,0,0), location(0,0,0,0,0), \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::clone_region(pos_1=location(0,0,0,0,0), pos_2=location(0,0,0,0,0), target_pos=location(0,0,0,0,0), paste_pos=location(0,0,0,0,0), ignore_air=\"FALSE\", copy_entity=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                          | **Описание**                      |\n| :------------ | :-------------------------- | :--------------------------- |\n| `pos_1`            | Местоположение                   | Угол региона                      |\n| `pos_2`            | Местоположение                   | Противоположный угол региона      |\n| `target_pos`       | Местоположение                   | Местоположение копирования        |\n| `paste_pos`        | Местоположение                   | Местоположение для вставки        |\n| `ignore_air`       | Маркер                           | Игнорировать воздух               |\n|                    | **FALSE** - Не игнорировать      |                                   |\n|                    | **TRUE** - Игнорировать          |                                   |\n| `copy_entity`      | Маркер                           | Клонировать существ               |\n|                    | **FALSE** - Не клонировать       |                                   |\n|                    | **TRUE** - Клонировать           |                                   |","world::create_explosion":"```justcode\nworld::create_explosion\n```\n\n**Имя:** Создать взрыв\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт взрыв в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::create_explosion(location(0,0,0,0,0), 1, \"name_or_uuid\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::create_explosion(location=location(0,0,0,0,0), power=1, name_or_uuid=\"name_or_uuid\", fire=\"FALSE\", break_blocks=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                    | **Описание**                       |\n| :------------- | :-------------------- | :---------------------------- |\n| `location`          | Местоположение             | Место создания                     |\n| `power`             | Число                      | Сила взрыва (от 0 до 4)            |\n| `name_or_uuid`      | Текст                      | Имя или UUID источника взрыва      |\n| `fire`              | Маркер                     | Появление огня                     |\n|                     | **FALSE** - Выключить      |                                    |\n|                     | **TRUE** - Включить        |                                    |\n| `break_blocks`      | Маркер                     | Разрушение блоков                  |\n|                     | **FALSE** - Выключить      |                                    |\n|                     | **TRUE** - Включить        |                                    |","world::create_scoreboard":"```justcode\nworld::create_scoreboard\n```\n\n**Имя:** Создать скорборд\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт скорборд с определённым ID. Чтобы отобразить скорборд игроку, используйте действие \\\"Показать скорборд\\\".\n\n**Пример использования:** \n```justcode\nworld::create_scoreboard(\"id\", \"display_name\");\n\n//Или в сухую по ключам\n\nworld::create_scoreboard(id=\"id\", display_name=\"display_name\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**      |\n| :------------- | :------ | :----------- |\n| `id`                | Текст        | ID скорборда      |\n| `display_name`      | Текст        | Заголовок         |","world::dummy":"```justcode\nworld::dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие без значения\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nworld::dummy();\n```\n\n","world::fill_container":"```justcode\nworld::fill_container\n```\n\n**Имя:** Заполнить контейнер\\\n**Тип:** Действие без значения\\\n**Описание:** Заполняет контейнер на выбранном местоположении указанными предметами.\n**Работает с:**\\\n&nbsp;&nbsp;Любыми контейнерами\n\n**Пример использования:** \n```justcode\nworld::fill_container([item(\"stick\"), item(\"stick\")], location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nworld::fill_container(items=[item(\"stick\"), item(\"stick\")], location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**              | **Описание**                   |\n| :--------- | :-------------- | :------------------------ |\n| `items`         | список[Предмет]      | Предметы для заполнения        |\n| `location`      | Местоположение       | Местоположение контейнера      |","world::generate_tree":"```justcode\nworld::generate_tree\n```\n\n**Имя:** Создать дерево\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт дерево на выбранном местоположении.\n\n**Пример использования:** \n```justcode\nworld::generate_tree(location(0,0,0,0,0), \"ACACIA\");\n\n//Или в сухую по ключам\n\nworld::generate_tree(location=location(0,0,0,0,0), tree_type=\"ACACIA\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                                              | **Описание**               |\n| :---------- | :---------------------------------------------- | :-------------------- |\n| `location`       | Местоположение                                       | Местоположение дерева      |\n| `tree_type`      | Маркер                                               | Тип дерева                 |\n|                  | **ACACIA** - Акация                                  |                            |\n|                  | **AZALEA** - Азалия                                  |                            |\n|                  | **BIG_TREE** - Большое дерево                        |                            |\n|                  | **BIRCH** - Обычная берёза                           |                            |\n|                  | **BROWN_MUSHROOM** - Коричневый гриб                 |                            |\n|                  | **CHERRY** - Вишня                                   |                            |\n|                  | **CHORUS_PLANT** - Дерево хоруса                     |                            |\n|                  | **COCOA_TREE** - Дерево джунглей с какао-бобами      |                            |\n|                  | **CRIMSON_FUNGUS** - Багровый гриб                   |                            |\n|                  | **DARK_OAK** - Тёмный дуб                            |                            |\n|                  | **JUNGLE** - Дерево джунглей                         |                            |\n|                  | **JUNGLE_BUSH** - Куст джунглей                      |                            |\n|                  | **MANGROVE** - Мангровое дерево                      |                            |\n|                  | **MEGA_PINE** - Огромная сосна                       |                            |\n|                  | **MEGA_REDWOOD** - Огромная секвойя                  |                            |\n|                  | **REDWOOD** - Обычная ель                            |                            |\n|                  | **RED_MUSHROOM** - Красный гриб                      |                            |\n|                  | **SMALL_JUNGLE** - Маленькое дерево джунглей         |                            |\n|                  | **SWAMP** - Болотное дерево                          |                            |\n|                  | **TALL_BIRCH** - Высокая берёза                      |                            |\n|                  | **TALL_MANGROVE** - Высокое мангровое дерево         |                            |\n|                  | **TALL_REDWOOD** - Высокая ель                       |                            |\n|                  | **TREE** - Обычное дерево                            |                            |\n|                  | **WARPED_FUNGUS** - Искажённый гриб                  |                            |","world::hide_event_message":"```justcode\nworld::hide_event_message\n```\n\n**Имя:** Убрать сообщение события\\\n**Тип:** Действие без значения\\\n**Описание:** Убирает отправку сообщения события, которое вызвало этот код.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок зашёл в мир\"\\\n&nbsp;&nbsp;Событием \"Игрок вышел из мира\"\\\n&nbsp;&nbsp;Событием \"Игрок умирает\"\n\n**Пример использования:** \n```justcode\nworld::hide_event_message(\"FALSE\");\n\n//Или в сухую по ключам\n\nworld::hide_event_message(hide=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**          |\n| :------ | :-------------- | :--------------- |\n| `hide`       | Маркер               | Убрать сообщение      |\n|              | **FALSE** - Нет      |                       |\n|              | **TRUE** - Да        |                       |","world::launch_firework":"```justcode\nworld::launch_firework\n```\n\n**Имя:** Создать фейерверк\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает фейерверк в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::launch_firework(item(\"stick\"), location(0,0,0,0,0), \"DIRECTIONAL\", \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::launch_firework(firework=item(\"stick\"), location=location(0,0,0,0,0), movement=\"DIRECTIONAL\", instant=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                             | **Описание**                |\n| :--------- | :----------------------------- | :--------------------- |\n| `firework`      | Предмет                             | Фейерверк для создания      |\n| `location`      | Местоположение                      | Место создания              |\n| `movement`      | Маркер                              | Движение                    |\n|                 | **DIRECTIONAL** - Направленное      |                             |\n|                 | **UPWARDS** - Вверх                 |                             |\n| `instant`       | Маркер                              | Мгновенный взрыв            |\n|                 | **FALSE** - Нет                     |                             |\n|                 | **TRUE** - Да                       |                             |","world::launch_projectile":"```justcode\nworld::launch_projectile\n```\n\n**Имя:** Запустить снаряд\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает снаряд в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::launch_projectile(item(\"stick\"), location(0,0,0,0,0), 1, 2, \"custom_name\", particle(\"fire\"));\n\n//Или в сухую по ключам\n\nworld::launch_projectile(projectile=item(\"stick\"), location=location(0,0,0,0,0), speed=1, inaccuracy=2, custom_name=\"custom_name\", trail=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**             | **Описание**                                          |\n| :------------ | :------------- | :----------------------------------------------- |\n| `projectile`       | Предмет             | Снаряд для запуска                                    |\n| `location`         | Местоположение      | Место запуска                                         |\n| `speed`            | Число               | Скорость снаряда                                      |\n| `inaccuracy`       | Число               | Отклонение снаряда (0, чтобы снаряд летел ровно)      |\n| `custom_name`      | Текст               | Имя снаряда                                           |\n| `trail`            | Эффект частиц       | След, который будет оставаться за снарядом            |","world::random_tick_block":"```justcode\nworld::random_tick_block\n```\n\n**Имя:** Вызвать случайный тик\\\n**Тип:** Действие без значения\\\n**Описание:** Вызывает случайный тик на выбранном местоположении.\n\n**Пример использования:** \n```justcode\nworld::random_tick_block(location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nworld::random_tick_block(location=location(0,0,0,0,0), times=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**          |\n| :--------- | :------------- | :--------------- |\n| `location`      | Местоположение      | Местоположение        |\n| `times`         | Число               | Количество тиков      |","world::remove_container_items":"```justcode\nworld::remove_container_items\n```\n\n**Имя:** Удалить предметы из контейнера\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет из контейнера на выбранном местоположении указанные предметы.\n**Работает с:**\\\n&nbsp;&nbsp;Любыми контейнерами\n\n**Пример использования:** \n```justcode\nworld::remove_container_items([item(\"stick\"), item(\"stick\")], location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nworld::remove_container_items(items=[item(\"stick\"), item(\"stick\")], location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**              | **Описание**                   |\n| :--------- | :-------------- | :------------------------ |\n| `items`         | список[Предмет]      | Предметы                       |\n| `location`      | Местоположение       | Местоположение контейнера      |","world::remove_scoreboard":"```justcode\nworld::remove_scoreboard\n```\n\n**Имя:** Удалить скорборд\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет указанный скорборд.\n\n**Пример использования:** \n```justcode\nworld::remove_scoreboard(\"id\");\n\n//Или в сухую по ключам\n\nworld::remove_scoreboard(id=\"id\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `id`         | Текст        | ID скорборда      |","world::remove_scoreboard_score_by_name":"```justcode\nworld::remove_scoreboard_score_by_name\n```\n\n**Имя:** Удалить значение скорборда по тексту\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет значение указанной строки в скорборде.\n\n**Пример использования:** \n```justcode\nworld::remove_scoreboard_score_by_name(\"id\", \"text\");\n\n//Или в сухую по ключам\n\nworld::remove_scoreboard_score_by_name(id=\"id\", text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `id`         | Текст        | ID скорборда      |\n| `text`       | Текст        | ID линии          |","world::remove_scoreboard_score_by_score":"```justcode\nworld::remove_scoreboard_score_by_score\n```\n\n**Имя:** Удалить значение скорборда по счёту\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет значение указанного скорборда по счёту.\n\n**Пример использования:** \n```justcode\nworld::remove_scoreboard_score_by_score(\"id\", 1);\n\n//Или в сухую по ключам\n\nworld::remove_scoreboard_score_by_score(id=\"id\", score=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                    |\n| :------ | :------ | :------------------------- |\n| `id`         | Текст        | ID скорборда                    |\n| `score`      | Число        | Счёт значения для удаления      |","world::replace_blocks_in_region":"```justcode\nworld::replace_blocks_in_region\n```\n\n**Имя:** Заменить блоки в регионе\\\n**Тип:** Действие без значения\\\n**Описание:** Заменяет одни блоки на другие в выбранном регионе.\n\n**Пример использования:** \n```justcode\nworld::replace_blocks_in_region([item(\"stone\"), item(\"stone\")], location(0,0,0,0,0), location(0,0,0,0,0), item(\"stone\"));\n\n//Или в сухую по ключам\n\nworld::replace_blocks_in_region(old_block=[item(\"stone\"), item(\"stone\")], pos_1=location(0,0,0,0,0), pos_2=location(0,0,0,0,0), new_block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**             | **Описание**                      |\n| :---------- | :------------- | :--------------------------- |\n| `old_block`      | список[Блок]        | Блоки для замены                  |\n| `pos_1`          | Местоположение      | Угол региона                      |\n| `pos_2`          | Местоположение      | Противоположный угол региона      |\n| `new_block`      | Блок                | Новый блок                        |","world::replace_container_items":"```justcode\nworld::replace_container_items\n```\n\n**Имя:** Заменить предметы в контейнере\\\n**Тип:** Действие без значения\\\n**Описание:** Заменяет указанные предметы в контейнере на выбранном местоположении на определённый предмет.\n**Работает с:**\\\n&nbsp;&nbsp;Любыми контейнерами\n\n**Пример использования:** \n```justcode\nworld::replace_container_items([item(\"stick\"), item(\"stick\")], location(0,0,0,0,0), item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nworld::replace_container_items(items=[item(\"stick\"), item(\"stick\")], location=location(0,0,0,0,0), replace=item(\"stick\"), count=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**              | **Описание**                         |\n| :--------- | :-------------- | :------------------------------ |\n| `items`         | список[Предмет]      | Заменяемые предметы                  |\n| `location`      | Местоположение       | Местоположение контейнера            |\n| `replace`       | Предмет              | Заменяющий предмет                   |\n| `count`         | Число                | Количество предметов для замены      |","world::send_web_request":"```justcode\nworld::send_web_request\n```\n\n**Имя:** Отправить веб-запрос\\\n**Тип:** Действие без значения\\\n**Описание:** Отправляет веб-запрос с выбранным методом и телом на выбранный URL.\n\n**Пример использования:** \n```justcode\nworld::send_web_request(\"url\", \"content_body\", `headers`, \"DELETE\", \"APPLICATION_JSON\");\n\n//Или в сухую по ключам\n\nworld::send_web_request(url=\"url\", content_body=\"content_body\", headers=`headers`, request_type=\"DELETE\", content_type=\"APPLICATION_JSON\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                             | **Описание**           |\n| :------------- | :--------------------------------------------- | :---------------- |\n| `url`               | Текст                                               | URL                    |\n| `content_body`      | Текст                                               | Тело запроса           |\n| `headers`           | Словарь                                             | Заголовки запроса      |\n| `request_type`      | Маркер                                              | Тип запроса            |\n|                     | **DELETE** - DELETE                                 |                        |\n|                     | **GET** - GET                                       |                        |\n|                     | **HEAD** - HEAD                                     |                        |\n|                     | **PATCH** - PATCH                                   |                        |\n|                     | **POST** - POST                                     |                        |\n|                     | **PUT** - PUT                                       |                        |\n| `content_type`      | Маркер                                              | Медиа тип запроса      |\n|                     | **APPLICATION_JSON** - JSON (application/json)      |                        |\n|                     | **TEXT_PLAIN** - Обычный текст (text/plain)         |                        |","world::set_age":"```justcode\nworld::set_age\n```\n\n**Имя:** Установить возраст\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает возраст блока на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Любыми блоками, которые могут иметь возраст\n\n**Пример использования:** \n```justcode\nworld::set_age(location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nworld::set_age(location=location(0,0,0,0,0), tick=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**              |\n| :--------- | :------------- | :------------------- |\n| `location`      | Местоположение      | Местоположение блока      |\n| `tick`          | Число               | Тики                      |","world::set_block":"```justcode\nworld::set_block\n```\n\n**Имя:** Установить блок\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает выбранный тип блока на выбранных местоположениях.\n\n**Пример использования:** \n```justcode\nworld::set_block([location(0,0,0,0,0), location(0,0,0,0,0)], item(\"stone\"), \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::set_block(locations=[location(0,0,0,0,0), location(0,0,0,0,0)], block=item(\"stone\"), update_blocks=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                       | **Описание**                        |\n| :-------------- | :----------------------- | :----------------------------- |\n| `locations`          | список[Местоположение]        | Местоположения установки блока      |\n| `block`              | Блок                          | Блок                                |\n| `update_blocks`      | Маркер                        | Обновлять блоки вокруг              |\n|                      | **FALSE** - Не обновлять      |                                     |\n|                      | **TRUE** - Обновлять          |                                     |","world::set_block_analogue_power":"```justcode\nworld::set_block_analogue_power\n```\n\n**Имя:** Установить силу редстоун-сигнала\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает на выбранном местоположении определённую силу сигнала.\n**Работает с:**\\\n&nbsp;&nbsp;Активируемыми блоками\n\n**Пример использования:** \n```justcode\nworld::set_block_analogue_power(location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nworld::set_block_analogue_power(location=location(0,0,0,0,0), power_level=1);\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**             | **Описание**              |\n| :------------ | :------------- | :------------------- |\n| `location`         | Местоположение      | Местоположение блока      |\n| `power_level`      | Число               | Новая сила сигнала        |","world::set_block_custom_tag":"```justcode\nworld::set_block_custom_tag\n```\n\n**Имя:** None\\\n**Тип:** Действие без значения\\\n**Описание:** None\n\n**Пример использования:** \n```justcode\nworld::set_block_custom_tag(location(0,0,0,0,0), \"tag_name\", \"tag_value\");\n\n//Или в сухую по ключам\n\nworld::set_block_custom_tag(location=location(0,0,0,0,0), tag_name=\"tag_name\", tag_value=\"tag_value\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**             | **Описание**      |\n| :---------- | :------------- | :----------- |\n| `location`       | Местоположение      | None              |\n| `tag_name`       | Текст               | None              |\n| `tag_value`      | Текст               | None              |","world::set_block_data":"```justcode\nworld::set_block_data\n```\n\n**Имя:** Установить параметры блоку\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает параметры блоку на определённом местоположении.\n\n**Пример использования:** \n```justcode\nworld::set_block_data(location(0,0,0,0,0), \"block_data\");\n\n//Или в сухую по ключам\n\nworld::set_block_data(location=location(0,0,0,0,0), block_data=\"block_data\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**             | **Описание**               |\n| :----------- | :------------- | :-------------------- |\n| `location`        | Местоположение      | Местоположение блока       |\n| `block_data`      | Текст               | Новые параметры блока      |","world::set_block_drops_enabled":"```justcode\nworld::set_block_drops_enabled\n```\n\n**Имя:** Установить выпадение блоков\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает правило в мире на выпадение блоков при их разрушении.\n\n**Пример использования:** \n```justcode\nworld::set_block_drops_enabled(\"FALSE\");\n\n//Или в сухую по ключам\n\nworld::set_block_drops_enabled(enable=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                    | **Описание**          |\n| :------- | :-------------------- | :--------------- |\n| `enable`      | Маркер                     | Выпадение блоков      |\n|               | **FALSE** - Выключено      |                       |\n|               | **TRUE** - Включено        |                       |","world::set_block_powered":"```justcode\nworld::set_block_powered\n```\n\n**Имя:** Активировать блок\\\n**Тип:** Действие без значения\\\n**Описание:** Активирует блок на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Активируемыми блоками\n\n**Пример использования:** \n```justcode\nworld::set_block_powered(location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::set_block_powered(location=location(0,0,0,0,0), powered=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                    | **Описание**              |\n| :--------- | :-------------------- | :------------------- |\n| `location`      | Местоположение             | Местоположение блока      |\n| `powered`       | Маркер                     | Активация                 |\n|                 | **FALSE** - Выключить      |                           |\n|                 | **TRUE** - Включить        |                           |","world::set_block_single_data":"```justcode\nworld::set_block_single_data\n```\n\n**Имя:** Установить параметр блоку\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанный параметр блоку на местоположении на заданое значение.\n\n**Пример использования:** \n```justcode\nworld::set_block_single_data(location(0,0,0,0,0), \"data\", \"value\");\n\n//Или в сухую по ключам\n\nworld::set_block_single_data(location=location(0,0,0,0,0), data=\"data\", value=\"value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**              |\n| :--------- | :------------- | :------------------- |\n| `location`      | Местоположение      | Местоположение блока      |\n| `data`          | Текст               | Изменяемый параметр       |\n| `value`         | Текст               | Новое значение            |","world::set_brushable_block_item":"```justcode\nworld::set_brushable_block_item\n```\n\n**Имя:** Установить предмет в подозрительный блок\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предмет в подозрительный блок (песок, гравий) на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Подозрительным песком\\\n&nbsp;&nbsp;Подозрительным гравием\n\n**Пример использования:** \n```justcode\nworld::set_brushable_block_item(location(0,0,0,0,0), item(\"stick\"));\n\n//Или в сухую по ключам\n\nworld::set_brushable_block_item(location=location(0,0,0,0,0), item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**              |\n| :--------- | :------------- | :------------------- |\n| `location`      | Местоположение      | Местоположение блока      |\n| `item`          | Предмет             | Предмет                   |","world::set_campfire_item":"```justcode\nworld::set_campfire_item\n```\n\n**Имя:** Установить предмет в костёр\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предмет в костёр на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Кострами\n\n**Пример использования:** \n```justcode\nworld::set_campfire_item(location(0,0,0,0,0), item(\"stick\"), 1, \"FIRST\");\n\n//Или в сухую по ключам\n\nworld::set_campfire_item(location=location(0,0,0,0,0), item=item(\"stick\"), cooking_time=1, slot=\"FIRST\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                     | **Описание**               |\n| :------------- | :--------------------- | :-------------------- |\n| `location`          | Местоположение              | Местоположение костра      |\n| `item`              | Предмет                     | Предмет                    |\n| `cooking_time`      | Число                       | Время готовки              |\n| `slot`              | Маркер                      | Слот                       |\n|                     | **FIRST** - Первый          |                            |\n|                     | **FOURTH** - Четвёртый      |                            |\n|                     | **SECOND** - Второй         |                            |\n|                     | **THIRD** - Третий          |                            |","world::set_container":"```justcode\nworld::set_container\n```\n\n**Имя:** Установить предметы в контейнере\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанные предметы в контейнер на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Любыми контейнерами\n\n**Пример использования:** \n```justcode\nworld::set_container([item(\"stick\"), item(\"stick\")], [location(0,0,0,0,0), location(0,0,0,0,0)]);\n\n//Или в сухую по ключам\n\nworld::set_container(items=[item(\"stick\"), item(\"stick\")], location=[location(0,0,0,0,0), location(0,0,0,0,0)]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**                   |\n| :--------- | :--------------------- | :------------------------ |\n| `items`         | список[Предмет]             | Предметы для установки         |\n| `location`      | список[Местоположение]      | Местоположение контейнера      |","world::set_container_lock":"```justcode\nworld::set_container_lock\n```\n\n**Имя:** Установить ключ контейнера\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённый ключ контейнеру на выбранном местоположении.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;В качестве ключа контейнера служит любой предмет с определённым именем.\n\n**Пример использования:** \n```justcode\nworld::set_container_lock(location(0,0,0,0,0), \"container_key\");\n\n//Или в сухую по ключам\n\nworld::set_container_lock(location=location(0,0,0,0,0), container_key=\"container_key\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                   |\n| :-------------- | :------------- | :------------------------ |\n| `location`           | Местоположение      | Местоположение контейнера      |\n| `container_key`      | Текст               | Имя ключа контейнера           |","world::set_container_name":"```justcode\nworld::set_container_name\n```\n\n**Имя:** Установить имя контейнеру\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает имя контейнеру на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Любыми контейнерами\n\n**Пример использования:** \n```justcode\nworld::set_container_name(location(0,0,0,0,0), \"name\");\n\n//Или в сухую по ключам\n\nworld::set_container_name(location=location(0,0,0,0,0), name=\"name\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `location`      | Местоположение      | Местоположение контейнера      |\n| `name`          | Текст               | Имя контейнера                 |","world::set_creaking_heart_natural":"```justcode\nworld::set_creaking_heart_natural\n```\n\n**Имя:** Установить натуральность скрипцевины\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает натуральность скрипцевины, находящейся на указанном местоположении.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Натуральность скрипцевины определяет выпадет ли опыт при её разрушении.\\\n**Работает с:**\\\n&nbsp;&nbsp;Скрипцевинами\n\n**Пример использования:** \n```justcode\nworld::set_creaking_heart_natural(location(0,0,0,0,0), \"TRUE\");\n\n//Или в сухую по ключам\n\nworld::set_creaking_heart_natural(location=location(0,0,0,0,0), natural=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**              | **Описание**        |\n| :--------- | :-------------- | :------------- |\n| `location`      | Местоположение       | Местоположение      |\n| `natural`       | Маркер               | Натуральность       |\n|                 | **TRUE** - Да        |                     |\n|                 | **FALSE** - Нет      |                     |","world::set_creaking_heart_state":"```justcode\nworld::set_creaking_heart_state\n```\n\n**Имя:** Установить состояние скрипцевине\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает состояние скрипцевине, находящейся на указанном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Скрипцевинами\n\n**Пример использования:** \n```justcode\nworld::set_creaking_heart_state(location(0,0,0,0,0), \"UPROOTED\");\n\n//Или в сухую по ключам\n\nworld::set_creaking_heart_state(location=location(0,0,0,0,0), heart_state=\"UPROOTED\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                        | **Описание**        |\n| :------------ | :------------------------ | :------------- |\n| `location`         | Местоположение                 | Местоположение      |\n| `heart_state`      | Маркер                         | Состояние           |\n|                    | **UPROOTED** - Неактивная      |                     |\n|                    | **DORMANT** - Спящая           |                     |\n|                    | **AWAKE** - Активная           |                     |","world::set_decorate_pot_sherd":"```justcode\nworld::set_decorate_pot_sherd\n```\n\n**Имя:** Установить украшение вазы\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанный черепок выбранной стороне вазы на указанном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Вазами\n\n**Пример использования:** \n```justcode\nworld::set_decorate_pot_sherd(location(0,0,0,0,0), item(\"stick\"), \"BACK\");\n\n//Или в сухую по ключам\n\nworld::set_decorate_pot_sherd(location=location(0,0,0,0,0), item=item(\"stick\"), side=\"BACK\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                           | **Описание**               |\n| :--------- | :--------------------------- | :-------------------- |\n| `location`      | Местоположение                    | Местоположение вазы        |\n| `item`          | Предмет                           | Черепок для установки      |\n| `side`          | Маркер                            | Сторона вазы               |\n|                 | **BACK** - Задняя сторона         |                            |\n|                 | **FRONT** - Передняя сторона      |                            |\n|                 | **LEFT** - Левая сторона          |                            |\n|                 | **RIGHT** - Правая сторона        |                            |","world::set_dried_ghast_hydration":"```justcode\nworld::set_dried_ghast_hydration\n```\n\n**Имя:** Установить влажность Высушенному гасту\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает влажность Высушенному гасту, который находится на указанном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Высушенными гастами\n\n**Пример использования:** \n```justcode\nworld::set_dried_ghast_hydration(location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nworld::set_dried_ghast_hydration(location=location(0,0,0,0,0), hydration=1);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**             | **Описание**        |\n| :---------- | :------------- | :------------- |\n| `location`       | Местоположение      | Местоположение      |\n| `hydration`      | Число               | Влажность           |","world::set_event_anvil_repair_cost":"```justcode\nworld::set_event_anvil_repair_cost\n```\n\n**Имя:** Установить стоимость действия наковальни\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает стоимость совершаемого действия в наковальне.\n\n**Пример использования:** \n```justcode\nworld::set_event_anvil_repair_cost(1, \"REPAIR_COST\", \"TRUE\");\n\n//Или в сухую по ключам\n\nworld::set_event_anvil_repair_cost(repair_cost=1, repair_cost_type=\"REPAIR_COST\", bypass_cost=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                                                       | **Описание**                 |\n| :----------------- | :------------------------------------------------------- | :---------------------- |\n| `repair_cost`           | Число                                                         | Стоимость                    |\n| `repair_cost_type`      | Маркер                                                        | Тип стоимости                |\n|                         | **REPAIR_COST** - Конечная стоимость                          |                              |\n|                         | **REPAIR_ITEM_COUNT_COST** - Стоимость за каждый предмет      |                              |\n|                         | **MAXIMUM_REPAIR_COST** - Максимальная стоимость              |                              |\n| `bypass_cost`           | Маркер                                                        | Игнорирование стоимости      |\n|                         | **TRUE** - Да                                                 |                              |\n|                         | **FALSE** - Нет                                               |                              |","world::set_event_combust_duration":"```justcode\nworld::set_event_combust_duration\n```\n\n**Имя:** Установить время горения события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает время горения, связанное с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок загорелся\"\\\n&nbsp;&nbsp;Событием \"Сущность загорелась\"\n\n**Пример использования:** \n```justcode\nworld::set_event_combust_duration(1);\n\n//Или в сухую по ключам\n\nworld::set_event_combust_duration(duration=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**       |\n| :--------- | :------ | :------------ |\n| `duration`      | Число        | Время горения      |","world::set_event_damage":"```justcode\nworld::set_event_damage\n```\n\n**Имя:** Установить урон события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает урон, связанный с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событиями урона\n\n**Пример использования:** \n```justcode\nworld::set_event_damage(1);\n\n//Или в сухую по ключам\n\nworld::set_event_damage(damage=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**          |\n| :------- | :------ | :--------------- |\n| `damage`      | Число        | Количество урона      |","world::set_event_death_screen_message":"```justcode\nworld::set_event_death_screen_message\n```\n\n**Имя:** Установить сообщение при смерти\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает сообщение при смерти, отображаемое на экране смерти, связанное с этим событием.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Если передаваемое значение пустое, устанавливается сообщение по умолчанию.\\\n&nbsp;&nbsp;Устанавливаемое сообщение ограничено 256 символами.\\\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок умирает\"\n\n**Пример использования:** \n```justcode\nworld::set_event_death_screen_message(\"message\");\n\n//Или в сухую по ключам\n\nworld::set_event_death_screen_message(message=\"message\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**      |\n| :-------- | :------ | :----------- |\n| `message`      | Текст        | Сообщение         |","world::set_event_enchantment_offers":"```justcode\nworld::set_event_enchantment_offers\n```\n\n**Имя:** Установить предлагаемые зачарования события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предлагаемые зачарования события.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок выбирает зачарование\"\n\n**Пример использования:** \n```justcode\nworld::set_event_enchantment_offers([\"enchantments\", \"enchantments\"], [\"levels\", \"levels\"], [\"costs\", \"costs\"]);\n\n//Или в сухую по ключам\n\nworld::set_event_enchantment_offers(enchantments=[\"enchantments\", \"enchantments\"], levels=[\"levels\", \"levels\"], costs=[\"costs\", \"costs\"]);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**            | **Описание**                  |\n| :------------- | :------------ | :----------------------- |\n| `enchantments`      | список[Текст]      | Предлагаемые зачарования      |\n| `levels`            | список[Текст]      | Уровни зачарований            |\n| `costs`             | список[Текст]      | Стоимость зачарований         |","world::set_event_exhaustion":"```justcode\nworld::set_event_exhaustion\n```\n\n**Имя:** Установить истощение события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает значение истощения, связанное с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок истощается\"\n\n**Пример использования:** \n```justcode\nworld::set_event_exhaustion(1);\n\n//Или в сухую по ключам\n\nworld::set_event_exhaustion(exhaustion=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**              |\n| :----------- | :------ | :------------------- |\n| `exhaustion`      | Число        | Количество истощения      |","world::set_event_experience":"```justcode\nworld::set_event_experience\n```\n\n**Имя:** Установить опыт события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает значение опыта, связанное с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок рыбачит\"\\\n&nbsp;&nbsp;Событием \"Игрок поднял сферу опыта\"\\\n&nbsp;&nbsp;Событиями убийства\n\n**Пример использования:** \n```justcode\nworld::set_event_experience(1);\n\n//Или в сухую по ключам\n\nworld::set_event_experience(experience=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**          |\n| :----------- | :------ | :--------------- |\n| `experience`      | Число        | Количество опыта      |","world::set_event_gamemode":"```justcode\nworld::set_event_gamemode\n```\n\n**Имя:** Установить режим игры события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает режим игры, связанный с событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок запросил меню смены режима игры\"\n\n**Пример использования:** \n```justcode\nworld::set_event_gamemode(\"CREATIVE\");\n\n//Или в сухую по ключам\n\nworld::set_event_gamemode(gamemode=\"CREATIVE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                          | **Описание**      |\n| :--------- | :-------------------------- | :----------- |\n| `gamemode`      | Маркер                           | Режим игры        |\n|                 | **CREATIVE** - Творческий        |                   |\n|                 | **SURVIVAL** - Выживание         |                   |\n|                 | **ADVENTURE** - Приключение      |                   |\n|                 | **SPECTATOR** - Наблюдатель      |                   |","world::set_event_heal":"```justcode\nworld::set_event_heal\n```\n\n**Имя:** Установить лечение события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает значение лечения, связанное с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок восстанавливает здоровье\"\\\n&nbsp;&nbsp;Событием \"Сущность исцеляется\"\n\n**Пример использования:** \n```justcode\nworld::set_event_heal(1);\n\n//Или в сухую по ключам\n\nworld::set_event_heal(heal=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**            |\n| :------ | :------ | :----------------- |\n| `heal`       | Число        | Количество лечения      |","world::set_event_item":"```justcode\nworld::set_event_item\n```\n\n**Имя:** Установить предмет события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предмет, связанный с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Раздатчик надевает броню\"\\\n&nbsp;&nbsp;Событием \"Блок выбрасывает предмет\"\\\n&nbsp;&nbsp;Событием \"Игрок употребляет предмет\"\\\n&nbsp;&nbsp;Событием \"Игрок крафтит предмет\"\\\n&nbsp;&nbsp;Событием \"Игрок выбрасывает предмет\"\\\n&nbsp;&nbsp;Событием \"Существо выбрасывает предмет\"\\\n&nbsp;&nbsp;Событием \"Существо поднимает предмет\"\\\n&nbsp;&nbsp;Событием \"Игрок кликает в своём инвентаре\"\\\n&nbsp;&nbsp;Событием \"Игрок кликает в инвентаре\"\\\n&nbsp;&nbsp;Событием \"Игрок изменяет книгу\"\\\n&nbsp;&nbsp;Событием \"Игрок поднял снаряд\"\\\n&nbsp;&nbsp;Событием \"Ведьма кидает зелье\"\n\n**Пример использования:** \n```justcode\nworld::set_event_item(item(\"stick\"));\n\n//Или в сухую по ключам\n\nworld::set_event_item(item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**               |\n| :------ | :------ | :-------------------- |\n| `item`       | Предмет      | Новый предмет события      |","world::set_event_item_cooldown":"```justcode\nworld::set_event_item_cooldown\n```\n\n**Имя:** Установить задержку предмета события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает задержку предмета, связанную с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок использует предмет с задержкой\"\\\n&nbsp;&nbsp;Событием \"Игрок получает задержку для группы предметов\"\n\n**Пример использования:** \n```justcode\nworld::set_event_item_cooldown(1);\n\n//Или в сухую по ключам\n\nworld::set_event_item_cooldown(cooldown=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**          |\n| :--------- | :------ | :--------------- |\n| `cooldown`      | Число        | Задержка в тиках      |","world::set_event_items":"```justcode\nworld::set_event_items\n```\n\n**Имя:** Установить предметы события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предметы, связанные с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок находит предмет в инвентаре\"\n\n**Пример использования:** \n```justcode\nworld::set_event_items([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую по ключам\n\nworld::set_event_items(items=[item(\"stick\"), item(\"stick\")]);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**                |\n| :------ | :-------------- | :--------------------- |\n| `items`      | список[Предмет]      | Предметы для установки      |","world::set_event_knockback_vector":"```justcode\nworld::set_event_knockback_vector\n```\n\n**Имя:** Установить вектор отталкивания события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает вектор отталкивания, связанный с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок отталкивается\"\\\n&nbsp;&nbsp;Событием \"Сущность отталкивается\"\n\n**Пример использования:** \n```justcode\nworld::set_event_knockback_vector(vector(0,0,0));\n\n//Или в сухую по ключам\n\nworld::set_event_knockback_vector(knockback=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**      | **Описание**             |\n| :---------- | :------ | :------------------ |\n| `knockback`      | Вектор       | Вектор отталкивания      |","world::set_event_move_allowed":"```justcode\nworld::set_event_move_allowed\n```\n\n**Имя:** Разрешить передвижение\\\n**Тип:** Действие без значения\\\n**Описание:** Разрешает передвижение, если оно не удалось.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игроку не удалось передвинуться\"\n\n**Пример использования:** \n```justcode\nworld::set_event_move_allowed(\"FALSE\");\n\n//Или в сухую по ключам\n\nworld::set_event_move_allowed(allowed=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**              | **Описание**                |\n| :-------- | :-------------- | :--------------------- |\n| `allowed`      | Маркер               | Разрешить передвижение      |\n|                | **FALSE** - Нет      |                             |\n|                | **TRUE** - Да        |                             |","world::set_event_projectile":"```justcode\nworld::set_event_projectile\n```\n\n**Имя:** Установить снаряд события\\\n**Тип:** Действие без значения\\\n**Описание:** Заменяет снаряд, который связан с этим событием.\n\n**Пример использования:** \n```justcode\nworld::set_event_projectile(item(\"stick\"), \"name\");\n\n//Или в сухую по ключам\n\nworld::set_event_projectile(projectile=item(\"stick\"), name=\"name\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**                  |\n| :----------- | :------ | :----------------------- |\n| `projectile`      | Предмет      | Снаряд                        |\n| `name`            | Текст        | Отображаемое имя снаряда      |","world::set_event_sound":"```justcode\nworld::set_event_sound\n```\n\n**Имя:** Установить звук события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает звук для проигрывания, связанный с этим событием, заменяя изначальный.\n\n**Пример использования:** \n```justcode\nworld::set_event_sound(sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nworld::set_event_sound(sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**            |\n| :------ | :------ | :----------------- |\n| `sound`      | Звук         | Проигрываемый звук      |","world::set_event_source_slot":"```justcode\nworld::set_event_source_slot\n```\n\n**Имя:** Установить начальный слот события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает начальный слот, связанный с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок находит предмет в инвентаре\"\n\n**Пример использования:** \n```justcode\nworld::set_event_source_slot(1);\n\n//Или в сухую по ключам\n\nworld::set_event_source_slot(source_slot=1);\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**      | **Описание**            |\n| :------------ | :------ | :----------------- |\n| `source_slot`      | Число        | Слот для установки      |","world::set_event_target_slot":"```justcode\nworld::set_event_target_slot\n```\n\n**Имя:** Установить конечный слот события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает конечный слот, связанный с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок находит предмет в инвентаре\"\n\n**Пример использования:** \n```justcode\nworld::set_event_target_slot(1);\n\n//Или в сухую по ключам\n\nworld::set_event_target_slot(target=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**            |\n| :------- | :------ | :----------------- |\n| `target`      | Число        | Слот для установки      |","world::set_event_uery_info":"```justcode\nworld::set_event_uery_info\n```\n\n**Имя:** Установить теги в полученную информацию\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает дополнительные теги в полученную отладочную информацию, которые скопируются в буфер обмена, если событие не отменено.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Изменения касаются только дополнительной информации.\\\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок получает информацию о блоке\"\\\n&nbsp;&nbsp;Событием \"Игрок получает информацию о сущности\"\n\n**Пример использования:** \n```justcode\nworld::set_event_uery_info(\"information\");\n\n//Или в сухую по ключам\n\nworld::set_event_uery_info(information=\"information\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**      | **Описание**             |\n| :------------ | :------ | :------------------ |\n| `information`      | Текст        | Дополнительные теги      |","world::set_event_velocity":"```justcode\nworld::set_event_velocity\n```\n\n**Имя:** Установить вектор скорости события\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает вектор скорости, связанный с этим событием.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок изменил вектор скорости\"\n\n**Пример использования:** \n```justcode\nworld::set_event_velocity(vector(0,0,0));\n\n//Или в сухую по ключам\n\nworld::set_event_velocity(velocity=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**         |\n| :--------- | :------ | :-------------- |\n| `velocity`      | Вектор       | Вектор скорости      |","world::set_furnace_cook_time":"```justcode\nworld::set_furnace_cook_time\n```\n\n**Имя:** Установить время готовки печи\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает время готовки печи на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Печками\\\n&nbsp;&nbsp;Плавильнями\\\n&nbsp;&nbsp;Коптильнями\n\n**Пример использования:** \n```justcode\nworld::set_furnace_cook_time(location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nworld::set_furnace_cook_time(location=location(0,0,0,0,0), time=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**             |\n| :--------- | :------------- | :------------------ |\n| `location`      | Местоположение      | Местоположение печи      |\n| `time`          | Число               | Время готовки            |","world::set_item_in_container_slot":"```justcode\nworld::set_item_in_container_slot\n```\n\n**Имя:** Установить предмет в слот контейнера\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предмет в указанный слот контейнера на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Любыми контейнерами\n\n**Пример использования:** \n```justcode\nworld::set_item_in_container_slot(location(0,0,0,0,0), item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nworld::set_item_in_container_slot(location=location(0,0,0,0,0), item=item(\"stick\"), slot=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `location`      | Местоположение      | Местоположение контейнера      |\n| `item`          | Предмет             | Предмет                        |\n| `slot`          | Число               | Номер слота                    |","world::set_lectern_book":"```justcode\nworld::set_lectern_book\n```\n\n**Имя:** Установить книгу в кафедру\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает книгу в кафедру на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Кафедрами\n\n**Пример использования:** \n```justcode\nworld::set_lectern_book(location(0,0,0,0,0), item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nworld::set_lectern_book(location=location(0,0,0,0,0), item=item(\"stick\"), page=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                |\n| :--------- | :------------- | :--------------------- |\n| `location`      | Местоположение      | Местоположение кафедры      |\n| `item`          | Предмет             | Книга для установки         |\n| `page`          | Число               | Страница                    |","world::set_player_head":"```justcode\nworld::set_player_head\n```\n\n**Имя:** Установить голову игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает голову игрока на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Головами игроков\n\n**Пример использования:** \n```justcode\nworld::set_player_head(location(0,0,0,0,0), \"name_or_uuid\", \"NAME_OR_UUID\");\n\n//Или в сухую по ключам\n\nworld::set_player_head(location=location(0,0,0,0,0), name_or_uuid=\"name_or_uuid\", receive_type=\"NAME_OR_UUID\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                     | **Описание**               |\n| :------------- | :------------------------------------- | :-------------------- |\n| `location`          | Местоположение                              | Местоположение головы      |\n| `name_or_uuid`      | Текст                                       | Значение                   |\n| `receive_type`      | Маркер                                      | Тип значения               |\n|                     | **NAME_OR_UUID** - Имя или UUID игрока      |                            |\n|                     | **VALUE** - Параметр \"value\" скина          |                            |","world::set_region":"```justcode\nworld::set_region\n```\n\n**Имя:** Установить блоки в регионе\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает выбранный тип блока на весь выбранный регион.\n\n**Пример использования:** \n```justcode\nworld::set_region(item(\"stone\"), location(0,0,0,0,0), location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nworld::set_region(block=item(\"stone\"), pos_1=location(0,0,0,0,0), pos_2=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**                      |\n| :------ | :------------- | :--------------------------- |\n| `block`      | Блок                | Блок                              |\n| `pos_1`      | Местоположение      | Угол региона                      |\n| `pos_2`      | Местоположение      | Противоположный угол региона      |","world::set_scoreboard_line":"```justcode\nworld::set_scoreboard_line\n```\n\n**Имя:** Установить линию в скорборде\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает линию в скорборде.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_line(\"id\", \"line\", \"display\", 1, \"format_content\", \"BLANK\");\n\n//Или от объекта\n\n\"id\".set_scoreboard_line(\"line\", \"display\", 1, \"format_content\", \"BLANK\");\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_line(id=\"id\", line=\"line\", display=\"display\", score=1, format_content=\"format_content\", format=\"BLANK\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                    | **Описание**            |\n| :--------------- | :-------------------- | :----------------- |\n| `id`                  | Текст                      | ID скорборда            |\n| `line`                | Текст                      | ID линии                |\n| `display`             | Текст                      | Отображаемый текст      |\n| `score`               | Число                      | Значение                |\n| `format_content`      | Текст                      | Формат текста           |\n| `format`              | Маркер                     | Тип формата             |\n|                       | **BLANK** - Пустое         |                         |\n|                       | **FIXED** - Текстовое      |                         |\n|                       | **RESET** - Обычное        |                         |\n|                       | **STYLED** - Стиль         |                         |",".set_scoreboard_line":"```justcode\nworld::set_scoreboard_line\n```\n\n**Имя:** Установить линию в скорборде\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает линию в скорборде.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_line(\"id\", \"line\", \"display\", 1, \"format_content\", \"BLANK\");\n\n//Или от объекта\n\n\"id\".set_scoreboard_line(\"line\", \"display\", 1, \"format_content\", \"BLANK\");\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_line(id=\"id\", line=\"line\", display=\"display\", score=1, format_content=\"format_content\", format=\"BLANK\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                    | **Описание**            |\n| :--------------- | :-------------------- | :----------------- |\n| `id`                  | Текст                      | ID скорборда            |\n| `line`                | Текст                      | ID линии                |\n| `display`             | Текст                      | Отображаемый текст      |\n| `score`               | Число                      | Значение                |\n| `format_content`      | Текст                      | Формат текста           |\n| `format`              | Маркер                     | Тип формата             |\n|                       | **BLANK** - Пустое         |                         |\n|                       | **FIXED** - Текстовое      |                         |\n|                       | **RESET** - Обычное        |                         |\n|                       | **STYLED** - Стиль         |                         |","world::set_scoreboard_line_display":"```justcode\nworld::set_scoreboard_line_display\n```\n\n**Имя:** Установить отображаемый текст линии скорборда\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанной линии скорборда отображаемый текст.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_line_display(\"id\", \"line\", \"display\");\n\n//Или от объекта\n\n\"id\".set_scoreboard_line_display(\"line\", \"display\");\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_line_display(id=\"id\", line=\"line\", display=\"display\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**            |\n| :-------- | :------ | :----------------- |\n| `id`           | Текст        | ID скорборда            |\n| `line`         | Текст        | ID линии                |\n| `display`      | Текст        | Отображаемый текст      |",".set_scoreboard_line_display":"```justcode\nworld::set_scoreboard_line_display\n```\n\n**Имя:** Установить отображаемый текст линии скорборда\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанной линии скорборда отображаемый текст.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_line_display(\"id\", \"line\", \"display\");\n\n//Или от объекта\n\n\"id\".set_scoreboard_line_display(\"line\", \"display\");\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_line_display(id=\"id\", line=\"line\", display=\"display\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**            |\n| :-------- | :------ | :----------------- |\n| `id`           | Текст        | ID скорборда            |\n| `line`         | Текст        | ID линии                |\n| `display`      | Текст        | Отображаемый текст      |","world::set_scoreboard_line_format":"```justcode\nworld::set_scoreboard_line_format\n```\n\n**Имя:** Установить формат текста линии скорборда\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает форматирование текста указанной линии скорборда.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_line_format(\"id\", \"line\", \"format_content\", \"BLANK\");\n\n//Или от объекта\n\n\"id\".set_scoreboard_line_format(\"line\", \"format_content\", \"BLANK\");\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_line_format(id=\"id\", line=\"line\", format_content=\"format_content\", format=\"BLANK\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                    | **Описание**       |\n| :--------------- | :-------------------- | :------------ |\n| `id`                  | Текст                      | ID скорборда       |\n| `line`                | Текст                      | ID линии           |\n| `format_content`      | Текст                      | Формат текста      |\n| `format`              | Маркер                     | Тип формата        |\n|                       | **BLANK** - Пустое         |                    |\n|                       | **FIXED** - Текстовое      |                    |\n|                       | **RESET** - Обычное        |                    |\n|                       | **STYLED** - Стиль         |                    |",".set_scoreboard_line_format":"```justcode\nworld::set_scoreboard_line_format\n```\n\n**Имя:** Установить формат текста линии скорборда\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает форматирование текста указанной линии скорборда.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_line_format(\"id\", \"line\", \"format_content\", \"BLANK\");\n\n//Или от объекта\n\n\"id\".set_scoreboard_line_format(\"line\", \"format_content\", \"BLANK\");\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_line_format(id=\"id\", line=\"line\", format_content=\"format_content\", format=\"BLANK\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                    | **Описание**       |\n| :--------------- | :-------------------- | :------------ |\n| `id`                  | Текст                      | ID скорборда       |\n| `line`                | Текст                      | ID линии           |\n| `format_content`      | Текст                      | Формат текста      |\n| `format`              | Маркер                     | Тип формата        |\n|                       | **BLANK** - Пустое         |                    |\n|                       | **FIXED** - Текстовое      |                    |\n|                       | **RESET** - Обычное        |                    |\n|                       | **STYLED** - Стиль         |                    |","world::set_scoreboard_number_format":"```justcode\nworld::set_scoreboard_number_format\n```\n\n**Имя:** Установить форматирование значений скорборда\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает форматирование значений для скорборда.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_number_format(\"id\", \"format_content\", \"BLANK\");\n\n//Или от объекта\n\n\"id\".set_scoreboard_number_format(\"format_content\", \"BLANK\");\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_number_format(id=\"id\", format_content=\"format_content\", format=\"BLANK\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                    | **Описание**       |\n| :--------------- | :-------------------- | :------------ |\n| `id`                  | Текст                      | ID скорборда       |\n| `format_content`      | Текст                      | Формат текста      |\n| `format`              | Маркер                     | Тип формата        |\n|                       | **BLANK** - Пустое         |                    |\n|                       | **FIXED** - Текстовое      |                    |\n|                       | **RESET** - Обычное        |                    |\n|                       | **STYLED** - Стиль         |                    |",".set_scoreboard_number_format":"```justcode\nworld::set_scoreboard_number_format\n```\n\n**Имя:** Установить форматирование значений скорборда\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает форматирование значений для скорборда.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_number_format(\"id\", \"format_content\", \"BLANK\");\n\n//Или от объекта\n\n\"id\".set_scoreboard_number_format(\"format_content\", \"BLANK\");\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_number_format(id=\"id\", format_content=\"format_content\", format=\"BLANK\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                    | **Описание**       |\n| :--------------- | :-------------------- | :------------ |\n| `id`                  | Текст                      | ID скорборда       |\n| `format_content`      | Текст                      | Формат текста      |\n| `format`              | Маркер                     | Тип формата        |\n|                       | **BLANK** - Пустое         |                    |\n|                       | **FIXED** - Текстовое      |                    |\n|                       | **RESET** - Обычное        |                    |\n|                       | **STYLED** - Стиль         |                    |","world::set_scoreboard_score":"```justcode\nworld::set_scoreboard_score\n```\n\n**Имя:** Установить значение скорборда\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает значение указанной строке в скорборде.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_score(\"id\", \"text\", 1);\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_score(id=\"id\", text=\"text\", score=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `id`         | Текст        | ID скорборда      |\n| `text`       | Текст        | ID линии          |\n| `score`      | Число        | Счёт              |","world::set_scoreboard_title":"```justcode\nworld::set_scoreboard_title\n```\n\n**Имя:** Изменить заголовок скорборда\\\n**Тип:** Действие без значения\\\n**Описание:** Изменяет заголовок указанного скорборда.\n\n**Пример использования:** \n```justcode\nworld::set_scoreboard_title(\"id\", \"title\");\n\n//Или в сухую по ключам\n\nworld::set_scoreboard_title(id=\"id\", title=\"title\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**         |\n| :------ | :------ | :-------------- |\n| `id`         | Текст        | ID скорборда         |\n| `title`      | Текст        | Новый заголовок      |","world::set_sculk_shrieker_can_summon":"```justcode\nworld::set_sculk_shrieker_can_summon\n```\n\n**Имя:** Установить скалк-крикуну возможность призыва\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанному скалк-крикуну возможность призыва Вардена.\n**Работает с:**\\\n&nbsp;&nbsp;Скалк-крикунами\n\n**Пример использования:** \n```justcode\nworld::set_sculk_shrieker_can_summon(location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::set_sculk_shrieker_can_summon(location=location(0,0,0,0,0), can_summon=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                             | **Описание**                      |\n| :----------- | :----------------------------- | :--------------------------- |\n| `location`        | Местоположение                      | Местоположение скалк-крикуна      |\n| `can_summon`      | Маркер                              | Возможность призыва               |\n|                   | **FALSE** - Не может призывать      |                                   |\n|                   | **TRUE** - Может призывать          |                                   |","world::set_sculk_shrieker_shrieking":"```justcode\nworld::set_sculk_shrieker_shrieking\n```\n\n**Имя:** Установить состояние скалк-крикуну\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанному скалк-крикуну состояние.\n**Работает с:**\\\n&nbsp;&nbsp;Скалк-крикунами\n\n**Пример использования:** \n```justcode\nworld::set_sculk_shrieker_shrieking(location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::set_sculk_shrieker_shrieking(location=location(0,0,0,0,0), shrieking=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                      | **Описание**                      |\n| :---------- | :---------------------- | :--------------------------- |\n| `location`       | Местоположение               | Местоположение скалк-крикуна      |\n| `shrieking`      | Маркер                       | Состояние                         |\n|                  | **FALSE** - Не кричащий      |                                   |\n|                  | **TRUE** - Кричащий          |                                   |","world::set_sculk_shrieker_warning_level":"```justcode\nworld::set_sculk_shrieker_warning_level\n```\n\n**Имя:** Установить скалк-крикуну уровень опасности\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает указанному скалк-крикуну уровень опасности.\n**Работает с:**\\\n&nbsp;&nbsp;Скалк-крикунами\n\n**Пример использования:** \n```justcode\nworld::set_sculk_shrieker_warning_level(location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nworld::set_sculk_shrieker_warning_level(location=location(0,0,0,0,0), warning_level=1);\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                      |\n| :-------------- | :------------- | :--------------------------- |\n| `location`           | Местоположение      | Местоположение скалк-крикуна      |\n| `warning_level`      | Число               | Уровень опасности                 |","world::set_sign_text":"```justcode\nworld::set_sign_text\n```\n\n**Имя:** Установить текст таблички\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает текст таблички на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Табличками\n\n**Пример использования:** \n```justcode\nworld::set_sign_text(location(0,0,0,0,0), \"text\", 1, \"ALL\");\n\n//Или в сухую по ключам\n\nworld::set_sign_text(location=location(0,0,0,0,0), text=\"text\", line=1, side=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                   | **Описание**                 |\n| :--------- | :------------------- | :---------------------- |\n| `location`      | Местоположение            | Местоположение таблички      |\n| `text`          | Текст                     | Текст для установки          |\n| `line`          | Число                     | Строка                       |\n| `side`          | Маркер                    | Сторона таблички             |\n|                 | **ALL** - Все             |                              |\n|                 | **BACK** - Задняя         |                              |\n|                 | **FRONT** - Передняя      |                              |","world::set_sign_text_color":"```justcode\nworld::set_sign_text_color\n```\n\n**Имя:** Установить цвет текста таблички\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает цвет текста таблички на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Табличками\n\n**Пример использования:** \n```justcode\nworld::set_sign_text_color(location(0,0,0,0,0), \"ALL\", \"BLACK\", \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::set_sign_text_color(location=location(0,0,0,0,0), side=\"ALL\", sign_text_color=\"BLACK\", glowing=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                            | **Описание**                 |\n| :---------------- | :---------------------------- | :---------------------- |\n| `location`             | Местоположение                     | Местоположение таблички      |\n| `side`                 | Маркер                             | Сторона таблички             |\n|                        | **ALL** - Все                      |                              |\n|                        | **BACK** - Задняя                  |                              |\n|                        | **FRONT** - Передняя               |                              |\n| `sign_text_color`      | Маркер                             | Цвет текста                  |\n|                        | **BLACK** - Чёрный                 |                              |\n|                        | **BLUE** - Синий                   |                              |\n|                        | **BROWN** - Коричневый             |                              |\n|                        | **CYAN** - Бирюзовый               |                              |\n|                        | **GRAY** - Серый                   |                              |\n|                        | **GREEN** - Зелёный                |                              |\n|                        | **LIGHT_BLUE** - Голубой           |                              |\n|                        | **LIGHT_GRAY** - Светло-серый      |                              |\n|                        | **LIME** - Лаймовый                |                              |\n|                        | **MAGENTA** - Пурпурный            |                              |\n|                        | **ORANGE** - Оранжевый             |                              |\n|                        | **PINK** - Розовый                 |                              |\n|                        | **PURPLE** - Фиолетовый            |                              |\n|                        | **RED** - Красный                  |                              |\n|                        | **WHITE** - Белый                  |                              |\n|                        | **YELLOW** - Жёлтый                |                              |\n| `glowing`              | Маркер                             | Свечение текста              |\n|                        | **FALSE** - Выключить              |                              |\n|                        | **TRUE** - Включить                |                              |","world::set_sign_waxed":"```justcode\nworld::set_sign_waxed\n```\n\n**Имя:** Установить вощённость таблички\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает вощённость таблички на выбранном местоположении.\n**Работает с:**\\\n&nbsp;&nbsp;Табличками\n\n**Пример использования:** \n```justcode\nworld::set_sign_waxed(location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::set_sign_waxed(location=location(0,0,0,0,0), waxed=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                    | **Описание**                 |\n| :--------- | :-------------------- | :---------------------- |\n| `location`      | Местоположение             | Местоположение таблички      |\n| `waxed`         | Маркер                     | Вощённость                   |\n|                 | **FALSE** - Выключить      |                              |\n|                 | **TRUE** - Включить        |                              |","world::set_spawner_entity":"```justcode\nworld::set_spawner_entity\n```\n\n**Имя:** Установить сущность в спавнере\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает спавнеру на выбранном местоположении сущность внутри.\n**Работает с:**\\\n&nbsp;&nbsp;Спавнерами\n\n**Пример использования:** \n```justcode\nworld::set_spawner_entity(location(0,0,0,0,0), item(\"stick\"));\n\n//Или от объекта\n\nlocation(0,0,0,0,0).set_spawner_entity(item(\"stick\"));\n\n//Или в сухую по ключам\n\nworld::set_spawner_entity(location=location(0,0,0,0,0), entity=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                 |\n| :--------- | :------------- | :---------------------- |\n| `location`      | Местоположение      | Местоположение спавнера      |\n| `entity`        | Предмет             | Яйцо призыва сущности        |",".set_spawner_entity":"```justcode\nworld::set_spawner_entity\n```\n\n**Имя:** Установить сущность в спавнере\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает спавнеру на выбранном местоположении сущность внутри.\n**Работает с:**\\\n&nbsp;&nbsp;Спавнерами\n\n**Пример использования:** \n```justcode\nworld::set_spawner_entity(location(0,0,0,0,0), item(\"stick\"));\n\n//Или от объекта\n\nlocation(0,0,0,0,0).set_spawner_entity(item(\"stick\"));\n\n//Или в сухую по ключам\n\nworld::set_spawner_entity(location=location(0,0,0,0,0), entity=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                 |\n| :--------- | :------------- | :---------------------- |\n| `location`      | Местоположение      | Местоположение спавнера      |\n| `entity`        | Предмет             | Яйцо призыва сущности        |","world::set_vault_displayed_item":"```justcode\nworld::set_vault_displayed_item\n```\n\n**Имя:** Установить отображаемый предмет сокровищнице\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает отображаемый предмет сокровищнице, находящейся на указанном местоположении.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Повторный вызов действия, перезаписывает отображаемый предмет.\\\n**Работает с:**\\\n&nbsp;&nbsp;Сокровищницами\n\n**Пример использования:** \n```justcode\nworld::set_vault_displayed_item(location(0,0,0,0,0), item(\"stick\"));\n\n//Или в сухую по ключам\n\nworld::set_vault_displayed_item(location=location(0,0,0,0,0), item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                     |\n| :--------- | :------------- | :-------------------------- |\n| `location`      | Местоположение      | Местоположение сокровищницы      |\n| `item`          | Предмет             | Отображаемый предмет             |","world::set_vault_next_state_update_time":"```justcode\nworld::set_vault_next_state_update_time\n```\n\n**Имя:** Установить время до следующего состояния сокровищнице\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает время до перехода в следующее состоянии сокровищнице, находящейся на указанном местоположении.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Необходимо установить точное время, когда сокровищница перейдёт в следующее состояние.\\\n**Работает с:**\\\n&nbsp;&nbsp;Сокровищницами\n\n**Пример использования:** \n```justcode\nworld::set_vault_next_state_update_time(location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nworld::set_vault_next_state_update_time(location=location(0,0,0,0,0), time=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                     |\n| :--------- | :------------- | :-------------------------- |\n| `location`      | Местоположение      | Местоположение сокровищницы      |\n| `time`          | Число               | Время                            |","world::set_world_difficulty":"```justcode\nworld::set_world_difficulty\n```\n\n**Имя:** Установить сложность мира\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённую сложность в мире.\n\n**Пример использования:** \n```justcode\nworld::set_world_difficulty(\"EASY\");\n\n//Или в сухую по ключам\n\nworld::set_world_difficulty(difficulty=\"EASY\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                      | **Описание**      |\n| :----------- | :---------------------- | :----------- |\n| `difficulty`      | Маркер                       | Сложность         |\n|                   | **EASY** - Лёгкая            |                   |\n|                   | **HARD** - Сложная           |                   |\n|                   | **NORMAL** - Нормальная      |                   |\n|                   | **PEACEFUL** - Мирная        |                   |","world::set_gamerule":"```justcode\nworld::set_gamerule\n```\n\n**Имя:** Установить игровое правило мира\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённое игровое правило (gamerule) мира.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Оставьте аргумент \\\"Значение\"\\ пустым, чтобы сбросить его на состояние по умолчанию.\n\n**Пример использования:** \n```justcode\nworld::set_gamerule(\"DISABLE_RAIDS\", \"value\");\n\n//Или в сухую по ключам\n\nworld::set_gamerule(gamerule=\"DISABLE_RAIDS\", value=\"value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                                                                                                  | **Описание**         |\n| :--------- | :---------------------------------------------------------------------------------------------------------------------------------- | :-------------- |\n| `gamerule`      | Маркер                                                                                                                                   | Игровое правило      |\n|                 | **DISABLE_RAIDS** - Отключение рейдов (disableRaids)                                                                                     |                      |\n|                 | **DO_DAYLIGHT_CYCLE** - Смена дня и ночи (doDaylightCycle)                                                                               |                      |\n|                 | **DO_ENTITY_DROPS** - Выпадение экипировки сущностей (doEntityDrops)                                                                     |                      |\n|                 | **DO_FIRE_TICK** - Распространение огня (doFireTick)                                                                                     |                      |\n|                 | **DO_IMMEDIATE_RESPAWN** - Мгновенное возрождение (doImmediateRespawn)                                                                   |                      |\n|                 | **DO_INSOMNIA** - Появление фантомов (doInsomnia)                                                                                        |                      |\n|                 | **DO_MOB_LOOT** - Выпадение добычи с мобов (doMobLoot)                                                                                   |                      |\n|                 | **DO_MOB_SPAWNING** - Появление мобов (doMobSpawning)                                                                                    |                      |\n|                 | **DO_PATROL_SPAWNING** - Патрули Разбойников (doPatrolSpawning)                                                                          |                      |\n|                 | **DO_TILE_DROPS** - Выпадение блоков (doTileDrops)                                                                                       |                      |\n|                 | **DO_TRADER_SPAWNING** - Странствующие торговцы (doTraderSpawning)                                                                       |                      |\n|                 | **DO_WEATHER_CYCLE** - Изменения погоды (doWeatherCycle)                                                                                 |                      |\n|                 | **DROWNING_DAMAGE** - Урон от утопления (drowningDamage)                                                                                 |                      |\n|                 | **FALL_DAMAGE** - Урон от падения (fallDamage)                                                                                           |                      |\n|                 | **FIRE_DAMAGE** - Урон от огня (fireDamage)                                                                                              |                      |\n|                 | **FORGIVE_DEAD_PLAYERS** - Прощение умерших игроков (forgiveDeadPlayers)                                                                 |                      |\n|                 | **KEEP_INVENTORY** - Сохранение инвентаря при смерти (keepInventory)                                                                     |                      |\n|                 | **MOB_GRIEFING** - Разрушительные действия мобов (mobGriefing)                                                                           |                      |\n|                 | **PROJECTILES_CAN_BREAK_BLOCKS** - Снаряды могут разрушать блоки (projectilesCanBreakBlocks)                                             |                      |\n|                 | **SHOW_DEATH_MESSAGES** - Сообщения о смерти (showDeathMessages)                                                                         |                      |\n|                 | **NATURAL_REGENERATION** - Регенерация здоровья (naturalRegeneration)                                                                    |                      |\n|                 | **UNIVERSAL_ANGER** - Слепая ярость (universalAnger)                                                                                     |                      |\n|                 | **PLAYERS_SLEEPING_PERCENTAGE** - Процент спящих (playersSleepingPercentage)                                                             |                      |\n|                 | **REDUCED_DEBUG_INFO** - Малый экран отладки (reducedDebugInfo)                                                                          |                      |\n|                 | **FREEZE_DAMAGE** - Урон от замерзания (freezeDamage)                                                                                    |                      |\n|                 | **RANDOM_TICK_SPEED** - Частота случайных тиков (randomTickSpeed)                                                                        |                      |\n|                 | **MAX_ENTITY_CRAMMING** - Предел сущностей в одном блоке (maxEntityCramming)                                                             |                      |\n|                 | **SPAWN_RADIUS** - Радиус области возрождения (spawnRadius)                                                                              |                      |\n|                 | **LAVA_SOURCE_CONVERSION** - Возобновление источников лавы (lavaSourceConversion)                                                        |                      |\n|                 | **WATER_SOURCE_CONVERSION** - Возобновление источников воды (waterSourceConversion)                                                      |                      |\n|                 | **TNT_EXPLOSION_DROP_DECAY** - Потеря части добычи при взрыве динамита (tntExplosionDropDecay)                                           |                      |\n|                 | **BLOCK_EXPLOSION_DROP_DECAY** - Потеря части добычи при взрыве от взаимодействия с блоком (blockExplosionDropDecay)                     |                      |\n|                 | **MOB_EXPLOSION_DROP_DECAY** - Потеря части добычи при взрыве моба (mobExplosionDropDecay)                                               |                      |\n|                 | **DO_LIMITED_CRAFTING** - Создание только по рецепту (doLimitedCrafting)                                                                 |                      |\n|                 | **PLAYERS_NETHER_PORTAL_DEFAULT_DELAY** - Время прохождения портала Незера вне творческого режима (playersNetherPortalDefaultDelay)      |                      |\n|                 | **PLAYERS_NETHER_PORTAL_CREATIVE_DELAY** - Время прохождения портала Незера в творческом режиме (playersNetherPortalCreativeDelay)       |                      |\n|                 | **SNOW_ACCUMULATION_HEIGHT** - Высота снежного покрова (showAccumulationHeight)                                                          |                      |\n|                 | **SPAWN_CHUNK_RADIUS** - Радиус чанков возрождения (shawnChunkRadius)                                                                    |                      |\n|                 | **DO_WARDEN_SPAWNING** - Появление Хранителей (doWardenSpawning)                                                                         |                      |\n|                 | **ENDER_PEARLS_VANISH_ON_DEATH** - Исчезновение брошенного эндер-жемчуга при смерти (enderPearlsVanishOnDeath)                           |                      |\n|                 | **DO_VINES_SPREAD** - Распространение лозы (doVinesSpread)                                                                               |                      |\n|                 | **ALLOW_FIRE_TICKS_AWAY_FROM_PLAYER** - Обновление огня вдали от игроков                                                                 |                      |\n|                 | **TNT_EXPLODER** - Активация и взрыв динамита                                                                                            |                      |\n|                 | **LOCATOR_BAR** - Видимость локатора игроков                                                                                             |                      |\n| `value`         | Текст                                                                                                                                    | Значение             |","world::set_world_simulation_distance":"```justcode\nworld::set_world_simulation_distance\n```\n\n**Имя:** Установить дистанцию симуляции мира\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает дистанцию симуляции чанков для мира.\n\n**Пример использования:** \n```justcode\nworld::set_world_simulation_distance(1);\n\n//Или в сухую по ключам\n\nworld::set_world_simulation_distance(distance=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**                             |\n| :--------- | :------ | :---------------------------------- |\n| `distance`      | Число        | Дистанция симуляции в чанках (2-32)      |","world::set_world_time":"```justcode\nworld::set_world_time\n```\n\n**Имя:** Установить время мира\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает время мира в тиках.\n\n**Пример использования:** \n```justcode\nworld::set_world_time(1);\n\n//Или в сухую по ключам\n\nworld::set_world_time(time=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**       |\n| :------ | :------ | :------------ |\n| `time`       | Число        | Время в тиках      |","world::set_world_weather":"```justcode\nworld::set_world_weather\n```\n\n**Имя:** Установить погоду мира\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает погоду мира на определённое время.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;По умолчанию, если не указать длительность, погода не будет изменяться.\n\n**Пример использования:** \n```justcode\nworld::set_world_weather(1, \"CLEAR\");\n\n//Или в сухую по ключам\n\nworld::set_world_weather(weather_duration=1, weather_type=\"CLEAR\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                      | **Описание**      |\n| :----------------- | :---------------------- | :----------- |\n| `weather_duration`      | Число                        | Длительность      |\n| `weather_type`          | Маркер                       | Тип погоды        |\n|                         | **CLEAR** - Ясная            |                   |\n|                         | **RAINING** - Дождливая      |                   |\n|                         | **THUNDER** - Гроза          |                   |","world::spawn_armor_stand":"```justcode\nworld::spawn_armor_stand\n```\n\n**Имя:** Создать стойку для брони\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт стойку для брони в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_armor_stand(item(\"stick\"), item(\"stick\"), item(\"stick\"), item(\"stick\"), item(\"stick\"), item(\"stick\"), location(0,0,0,0,0), \"custom_name\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::spawn_armor_stand(helmet=item(\"stick\"), chestplate=item(\"stick\"), leggings=item(\"stick\"), boots=item(\"stick\"), right_hand=item(\"stick\"), left_hand=item(\"stick\"), location=location(0,0,0,0,0), custom_name=\"custom_name\", gravity=\"FALSE\", marker=\"FALSE\", small=\"FALSE\", show_arms=\"FALSE\", base_plate=\"FALSE\", invisible=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**               |\n| :------------ | :-------------------- | :-------------------- |\n| `helmet`           | Предмет                    | Головной убор              |\n| `chestplate`       | Предмет                    | Нагрудник                  |\n| `leggings`         | Предмет                    | Поножи                     |\n| `boots`            | Предмет                    | Ботинки                    |\n| `right_hand`       | Предмет                    | Предмет в правой руке      |\n| `left_hand`        | Предмет                    | Предмет в левой руке       |\n| `location`         | Местоположение             | Место создания             |\n| `custom_name`      | Текст                      | Имя стойки                 |\n| `gravity`          | Маркер                     | Установить гравитацию      |\n|                    | **FALSE** - Выключить      |                            |\n|                    | **TRUE** - Включить        |                            |\n| `marker`           | Маркер                     | Режим маркера              |\n|                    | **FALSE** - Выключен       |                            |\n|                    | **TRUE** - Включён         |                            |\n| `small`            | Маркер                     | Сделать маленьким          |\n|                    | **FALSE** - Выключить      |                            |\n|                    | **TRUE** - Включить        |                            |\n| `show_arms`        | Маркер                     | Отображение рук            |\n|                    | **FALSE** - Выключить      |                            |\n|                    | **TRUE** - Включить        |                            |\n| `base_plate`       | Маркер                     | Отображение плиты          |\n|                    | **FALSE** - Выключить      |                            |\n|                    | **TRUE** - Включить        |                            |\n| `invisible`        | Маркер                     | Невидимость                |\n|                    | **FALSE** - Выключить      |                            |\n|                    | **TRUE** - Включить        |                            |","world::spawn_block_display":"```justcode\nworld::spawn_block_display\n```\n\n**Имя:** Создать визуализатор блока\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт визуализатор блока на указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_block_display(location(0,0,0,0,0), \"custom_name\", item(\"stone\"));\n\n//Или в сухую по ключам\n\nworld::spawn_block_display(spawn_location=location(0,0,0,0,0), custom_name=\"custom_name\", block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**             | **Описание**           |\n| :--------------- | :------------- | :---------------- |\n| `spawn_location`      | Местоположение      | Место создания         |\n| `custom_name`         | Текст               | Имя                    |\n| `block`               | Блок                | Отображаемый блок      |","world::spawn_effect_cloud":"```justcode\nworld::spawn_effect_cloud\n```\n\n**Имя:** Создать облако туманного зелья\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт облако туманного зелья, которое пропитывает эффектами сущностей в нём.\n\n**Пример использования:** \n```justcode\nworld::spawn_effect_cloud(location(0,0,0,0,0), 1, 2, [potion(\"slow_falling\"), potion(\"slow_falling\")], particle(\"fire\"), \"custom_name\");\n\n//Или в сухую по ключам\n\nworld::spawn_effect_cloud(location=location(0,0,0,0,0), duration=1, radius=2, effects=[potion(\"slow_falling\"), potion(\"slow_falling\")], particle=particle(\"fire\"), custom_name=\"custom_name\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**             | **Описание**        |\n| :------------ | :------------- | :------------- |\n| `location`         | Местоположение      | Место создания      |\n| `duration`         | Число               | Длительность        |\n| `radius`           | Число               | Радиус облака       |\n| `effects`          | список[Зелье]       | Эффекты зелья       |\n| `particle`         | Эффект частиц       | Частицы облака      |\n| `custom_name`      | Текст               | Имя                 |","world::spawn_end_crystal":"```justcode\nworld::spawn_end_crystal\n```\n\n**Имя:** Создать кристалл Энда\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт кристалл Энда в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_end_crystal(location(0,0,0,0,0), \"custom_name\", \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::spawn_end_crystal(location=location(0,0,0,0,0), custom_name=\"custom_name\", show_bottom=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**             |\n| :------------ | :-------------- | :------------------ |\n| `location`         | Местоположение       | Место создания           |\n| `custom_name`      | Текст                | Имя                      |\n| `show_bottom`      | Маркер               | Создание фундамента      |\n|                    | **FALSE** - Нет      |                          |\n|                    | **TRUE** - Да        |                          |","world::spawn_evoker_fangs":"```justcode\nworld::spawn_evoker_fangs\n```\n\n**Имя:** Создать челюсти заклинателя\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт челюсти заклинателя в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_evoker_fangs(location(0,0,0,0,0), \"custom_name\");\n\n//Или в сухую по ключам\n\nworld::spawn_evoker_fangs(location=location(0,0,0,0,0), custom_name=\"custom_name\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**             | **Описание**        |\n| :------------ | :------------- | :------------- |\n| `location`         | Местоположение      | Место создания      |\n| `custom_name`      | Текст               | Имя                 |","world::spawn_experience_orb":"```justcode\nworld::spawn_experience_orb\n```\n\n**Имя:** Создать сферу опыта\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт сферу опыта в указанном местоположении с выбранными параметрами.\n\n**Пример использования:** \n```justcode\nworld::spawn_experience_orb(location(0,0,0,0,0), 1, \"custom_name\");\n\n//Или в сухую по ключам\n\nworld::spawn_experience_orb(location=location(0,0,0,0,0), experience_amount=1, custom_name=\"custom_name\");\n```\n\n**Аргументы:**\n\n| **Имя**                  | **Тип**             | **Описание**          |\n| :------------------ | :------------- | :--------------- |\n| `location`               | Местоположение      | Место создания        |\n| `experience_amount`      | Число               | Количество опыта      |\n| `custom_name`            | Текст               | Имя                   |","world::spawn_eye_of_ender":"```justcode\nworld::spawn_eye_of_ender\n```\n\n**Имя:** Создать око Энда\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт в указанном местоположении око Энда, которое будет двигаться в сторону цели.\n\n**Пример использования:** \n```justcode\nworld::spawn_eye_of_ender(location(0,0,0,0,0), location(0,0,0,0,0), 1, \"custom_name\", \"DROP\");\n\n//Или в сухую по ключам\n\nworld::spawn_eye_of_ender(location=location(0,0,0,0,0), destination=location(0,0,0,0,0), lifespan=1, custom_name=\"custom_name\", end_of_lifespan=\"DROP\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                           | **Описание**            |\n| :---------------- | :--------------------------- | :----------------- |\n| `location`             | Местоположение                    | Место создания          |\n| `destination`          | Местоположение                    | Цель                    |\n| `lifespan`             | Число                             | Длительность жизни      |\n| `custom_name`          | Текст                             | Имя                     |\n| `end_of_lifespan`      | Маркер                            | По окончанию            |\n|                        | **DROP** - Выпасть предметом      |                         |\n|                        | **RANDOM** - Случайно             |                         |\n|                        | **SHATTER** - Расколоться         |                         |","world::spawn_falling_block":"```justcode\nworld::spawn_falling_block\n```\n\n**Имя:** Создать падающий блок\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт падающий блок в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_falling_block(item(\"stone\"), location(0,0,0,0,0), \"name\", \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::spawn_falling_block(block=item(\"stone\"), location=location(0,0,0,0,0), name=\"name\", should_expire=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**              | **Описание**           |\n| :-------------- | :-------------- | :---------------- |\n| `block`              | Блок                 | Блок для создания      |\n| `location`           | Местоположение       | Место создания         |\n| `name`               | Текст                | Имя                    |\n| `should_expire`      | Маркер               | Должен исчезать        |\n|                      | **FALSE** - Нет      |                        |\n|                      | **TRUE** - Да        |                        |","world::spawn_interaction_entity":"```justcode\nworld::spawn_interaction_entity\n```\n\n**Имя:** Создать сущность взаимодействия\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт сущность взаимодействия на указанном местоположении.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Определяйте взаимодействие при помощи событий атаки и клика по сущности.\n\n**Пример использования:** \n```justcode\nworld::spawn_interaction_entity(location(0,0,0,0,0), \"custom_name\", 1, 2, \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::spawn_interaction_entity(location=location(0,0,0,0,0), custom_name=\"custom_name\", width=1, height=2, responsive=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**               |\n| :------------ | :-------------------- | :-------------------- |\n| `location`         | Местоположение             | Место создания             |\n| `custom_name`      | Текст                      | Имя                        |\n| `width`            | Число                      | Горизонтальный размер      |\n| `height`           | Число                      | Вертикальный размер        |\n| `responsive`       | Маркер                     | Отзывчивость               |\n|                    | **FALSE** - Выключить      |                            |\n|                    | **TRUE** - Включить        |                            |","world::spawn_item":"```justcode\nworld::spawn_item\n```\n\n**Имя:** Создать предмет\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт предмет в указанном местоположении с выбранными параметрами.\n\n**Пример использования:** \n```justcode\nworld::spawn_item(location(0,0,0,0,0), item(\"stick\"), \"custom_name\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::spawn_item(location=location(0,0,0,0,0), item=item(\"stick\"), custom_name=\"custom_name\", can_mob_pickup=\"FALSE\", can_player_pickup=\"FALSE\", apply_motion=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                  | **Тип**              | **Описание**                               |\n| :------------------ | :-------------- | :------------------------------------ |\n| `location`               | Местоположение       | Место создания                             |\n| `item`                   | Предмет              | Предмет для создания                       |\n| `custom_name`            | Текст                | Имя                                        |\n| `can_mob_pickup`         | Маркер               | Смогут ли подбирать предмет мобы           |\n|                          | **FALSE** - Нет      |                                            |\n|                          | **TRUE** - Да        |                                            |\n| `can_player_pickup`      | Маркер               | Смогут ли подбирать предмет игроки         |\n|                          | **FALSE** - Нет      |                                            |\n|                          | **TRUE** - Да        |                                            |\n| `apply_motion`           | Маркер               | Задать движение предмета при создании      |\n|                          | **FALSE** - Нет      |                                            |\n|                          | **TRUE** - Да        |                                            |","world::spawn_item_display":"```justcode\nworld::spawn_item_display\n```\n\n**Имя:** Создать визуализатор предмета\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт визуализатор предмета на указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_item_display(location(0,0,0,0,0), \"custom_name\", item(\"stick\"));\n\n//Или в сухую по ключам\n\nworld::spawn_item_display(spawn_location=location(0,0,0,0,0), custom_name=\"custom_name\", displayed_item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**             | **Описание**              |\n| :--------------- | :------------- | :------------------- |\n| `spawn_location`      | Местоположение      | Место создания            |\n| `custom_name`         | Текст               | Имя                       |\n| `displayed_item`      | Предмет             | Отображаемый предмет      |","world::spawn_item_frame":"```justcode\nworld::spawn_item_frame\n```\n\n**Имя:** Создать рамку\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт рамку в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_item_frame(location(0,0,0,0,0), item(\"stick\"), \"NONE\", \"NORTH\", \"TRUE\", \"TRUE\", \"TRUE\");\n\n//Или в сухую по ключам\n\nworld::spawn_item_frame(location=location(0,0,0,0,0), item=item(\"stick\"), rotation=\"NONE\", block_face=\"NORTH\", glowing=\"TRUE\", visible=\"TRUE\", fixed=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                      | **Описание**            |\n| :----------- | :-------------------------------------- | :----------------- |\n| `location`        | Местоположение                               | Местоположение          |\n| `item`            | Предмет                                      | Предмет в рамке         |\n| `rotation`        | Маркер                                       | Поворот предмета        |\n|                   | **NONE** - Нет                               |                         |\n|                   | **CLOCKWISE_45** - 45 градусов               |                         |\n|                   | **CLOCKWISE** - 90 градусов                  |                         |\n|                   | **CLOCKWISE_135** - 135 градусов             |                         |\n|                   | **FLIPPED** - 180 градусов                   |                         |\n|                   | **FLIPPED_45** - 225 градусов                |                         |\n|                   | **COUNTER_CLOCKWISE** - 270 градусов         |                         |\n|                   | **COUNTER_CLOCKWISE_45** - 315 градусов      |                         |\n| `block_face`      | Маркер                                       | Сторона блока           |\n|                   | **NORTH** - Север                            |                         |\n|                   | **EAST** - Восток                            |                         |\n|                   | **SOUTH** - Юг                               |                         |\n|                   | **WEST** - Запад                             |                         |\n|                   | **UP** - Верх                                |                         |\n|                   | **DOWN** - Низ                               |                         |\n| `glowing`         | Маркер                                       | Свечение                |\n|                   | **TRUE** - Да                                |                         |\n|                   | **FALSE** - Нет                              |                         |\n| `visible`         | Маркер                                       | Видимость               |\n|                   | **TRUE** - Да                                |                         |\n|                   | **FALSE** - Нет                              |                         |\n| `fixed`           | Маркер                                       | Защита содержимого      |\n|                   | **TRUE** - Да                                |                         |\n|                   | **FALSE** - Нет                              |                         |","world::spawn_lightning_bolt":"```justcode\nworld::spawn_lightning_bolt\n```\n\n**Имя:** Создать молнию\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт молнию в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_lightning_bolt(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nworld::spawn_lightning_bolt(location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**        |\n| :--------- | :------------- | :------------- |\n| `location`      | Местоположение      | Место создания      |","world::spawn_mob":"```justcode\nworld::spawn_mob\n```\n\n**Имя:** Создать моба\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт моба в указанном местоположении с выбранными параметрами.\n\n**Пример использования:** \n```justcode\nworld::spawn_mob(item(\"stick\"), location(0,0,0,0,0), 1, \"custom_name\", [potion(\"slow_falling\"), potion(\"slow_falling\")], item(\"stick\"), item(\"stick\"), item(\"stick\"), item(\"stick\"), item(\"stick\"), item(\"stick\"), \"FALSE\");\n\n//Или в сухую по ключам\n\nworld::spawn_mob(mob=item(\"stick\"), location=location(0,0,0,0,0), health=1, custom_name=\"custom_name\", potion_effects=[potion(\"slow_falling\"), potion(\"slow_falling\")], main_hand=item(\"stick\"), helmet=item(\"stick\"), chestplate=item(\"stick\"), leggings=item(\"stick\"), boots=item(\"stick\"), off_hand=item(\"stick\"), natural_equipment=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                  | **Тип**                    | **Описание**                        |\n| :------------------ | :-------------------- | :----------------------------- |\n| `mob`                    | Предмет                    | Тип моба                            |\n| `location`               | Местоположение             | Место создания                      |\n| `health`                 | Число                      | Количество здоровья                 |\n| `custom_name`            | Текст                      | Имя                                 |\n| `potion_effects`         | список[Зелье]              | Эффекты                             |\n| `main_hand`              | Предмет                    | Предмет в основной руке             |\n| `helmet`                 | Предмет                    | Головной убор                       |\n| `chestplate`             | Предмет                    | Нагрудник                           |\n| `leggings`               | Предмет                    | Поножи                              |\n| `boots`                  | Предмет                    | Ботинки                             |\n| `off_hand`               | Предмет                    | Предмет во второстепенной руке      |\n| `natural_equipment`      | Маркер                     | Стандартное снаряжение              |\n|                          | **FALSE** - Выключить      |                                     |\n|                          | **TRUE** - Включить        |                                     |","world::spawn_painting":"```justcode\nworld::spawn_painting\n```\n\n**Имя:** Создать картину\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт картину в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_painting(location(0,0,0,0,0), \"art\", \"NORTH\");\n\n//Или в сухую по ключам\n\nworld::spawn_painting(spawn_location=location(0,0,0,0,0), art=\"art\", block_face=\"NORTH\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                | **Описание**          |\n| :--------------- | :---------------- | :--------------- |\n| `spawn_location`      | Местоположение         | Местоположение        |\n| `art`                 | Текст                  | Название картины      |\n| `block_face`          | Маркер                 | Сторона блока         |\n|                       | **NORTH** - Север      |                       |\n|                       | **EAST** - Восток      |                       |\n|                       | **SOUTH** - Юг         |                       |\n|                       | **WEST** - Запад       |                       |","world::spawn_primed_tnt":"```justcode\nworld::spawn_primed_tnt\n```\n\n**Имя:** Создать подожжённый динамит\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт подожжённый динамит в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_primed_tnt(location(0,0,0,0,0), 1, 2, \"custom_name\", item(\"stone\"));\n\n//Или в сухую по ключам\n\nworld::spawn_primed_tnt(location=location(0,0,0,0,0), tnt_power=1, fuse_duration=2, custom_name=\"custom_name\", block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                       |\n| :-------------- | :------------- | :---------------------------- |\n| `location`           | Местоположение      | Место создания                     |\n| `tnt_power`          | Число               | Мощность динамита (от 0 до 4)      |\n| `fuse_duration`      | Число               | Время задержки взрыва              |\n| `custom_name`        | Текст               | Имя                                |\n| `block`              | Блок                | Блок для маскировки                |","world::spawn_shulker_bullet":"```justcode\nworld::spawn_shulker_bullet\n```\n\n**Имя:** Создать снаряд Шалкера\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт снаряд Шалкера в указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_shulker_bullet(location(0,0,0,0,0), \"custom_name\");\n\n//Или в сухую по ключам\n\nworld::spawn_shulker_bullet(location=location(0,0,0,0,0), custom_name=\"custom_name\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**             | **Описание**        |\n| :------------ | :------------- | :------------- |\n| `location`         | Местоположение      | Место создания      |\n| `custom_name`      | Текст               | Имя                 |","world::spawn_text_display":"```justcode\nworld::spawn_text_display\n```\n\n**Имя:** Создать визуализатор текста\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт визуализатор текста на указанном местоположении.\n\n**Пример использования:** \n```justcode\nworld::spawn_text_display(location(0,0,0,0,0), \"custom_name\", [\"displayed_text\", \"displayed_text\"], \"CONCATENATION\");\n\n//Или в сухую по ключам\n\nworld::spawn_text_display(spawn_location=location(0,0,0,0,0), custom_name=\"custom_name\", displayed_text=[\"displayed_text\", \"displayed_text\"], merging_mode=\"CONCATENATION\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                        | **Описание**            |\n| :--------------- | :---------------------------------------- | :----------------- |\n| `spawn_location`      | Местоположение                                 | Место создания          |\n| `custom_name`         | Текст                                          | Имя                     |\n| `displayed_text`      | список[Текст]                                  | Отображаемый текст      |\n| `merging_mode`        | Маркер                                         | Объединение текста      |\n|                       | **CONCATENATION** - Объединение                |                         |\n|                       | **SEPARATE_LINES** - Разделение на строки      |                         |\n|                       | **SPACES** - Разделение пробелом               |                         |","world::spawn_vehicle":"```justcode\nworld::spawn_vehicle\n```\n\n**Имя:** Создать транспорт\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт транспорт в указанном местоположении с выбранными параметрами.\n\n**Пример использования:** \n```justcode\nworld::spawn_vehicle(item(\"stick\"), location(0,0,0,0,0), \"custom_name\");\n\n//Или в сухую по ключам\n\nworld::spawn_vehicle(vehicle=item(\"stick\"), location=location(0,0,0,0,0), custom_name=\"custom_name\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**             | **Описание**        |\n| :------------ | :------------- | :------------- |\n| `vehicle`          | Предмет             | Тип транспорта      |\n| `location`         | Местоположение      | Место создания      |\n| `custom_name`      | Текст               | Имя                 |","world::uncancel_event":"```justcode\nworld::uncancel_event\n```\n\n**Имя:** Возврат события\\\n**Тип:** Действие без значения\\\n**Описание:** Возвращает отмену события, которое вызвало этот код.\n\n**Пример использования:** \n```justcode\nworld::uncancel_event();\n```\n\n","world::update_block":"```justcode\nworld::update_block\n```\n\n**Имя:** Обновить смежные блоки\\\n**Тип:** Действие без значения\\\n**Описание:** Обновляет соседние блоки на указанном местоположении, если блок на местоположении не является воздухом. Сам по себе блок на местоположении не обновляется, но может обновиться от соседних.\n\n**Пример использования:** \n```justcode\nworld::update_block(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nworld::update_block(location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**        |\n| :--------- | :------------- | :------------- |\n| `location`      | Местоположение      | Местоположение      |","entity::collides_at_location":"```justcode\nentity::collides_at_location\n```\n\n**Имя:** Сталкивается на местоположении\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, сталкивается ли сущность с блоками, шалкерами, лодками и границей мира на указанном местоположении.\n\n**Пример использования:** \n```justcode\nif(entity::collides_at_location(location(0,0,0,0,0))){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::collides_at_location(location=location(0,0,0,0,0)){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                     |\n| :--------- | :------------- | :-------------------------- |\n| `location`      | Местоположение      | Местоположение для проверки      |","entity::collides_using_hitbox":"```justcode\nentity::collides_using_hitbox\n```\n\n**Имя:** Сталкивается используя кастомный хитбокс\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, сталкивается ли сущность с блоками, шалкерами, лодками и границей мира используя кастомный хитбокс.\n\n**Пример использования:** \n```justcode\nif(entity::collides_using_hitbox(location(0,0,0,0,0), location(0,0,0,0,0))){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::collides_using_hitbox(min=location(0,0,0,0,0), max=location(0,0,0,0,0)){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**              |\n| :------ | :------------- | :------------------- |\n| `min`        | Местоположение      | Первый угол хитбокса      |\n| `max`        | Местоположение      | Второй угол хитбокса      |","entity::collides_with_entity":"```justcode\nentity::collides_with_entity\n```\n\n**Имя:** Сталкивается с сущностью\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, сталкивается ли хитбокс сущности с хитбоксом другой указанной сущности.\n\n**Пример использования:** \n```justcode\nif(entity::collides_with_entity(\"name_or_uuid\", \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::collides_with_entity(name_or_uuid=\"name_or_uuid\", check_type=\"CONTAINS\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                          | **Описание**                   |\n| :------------- | :-------------------------- | :------------------------ |\n| `name_or_uuid`      | Текст                            | Имя или UUID сущности          |\n| `check_type`        | Маркер                           | Тип проверки столкновения      |\n|                     | **CONTAINS** - Содержит          |                                |\n|                     | **OVERLAPS** - Пересекается      |                                |","entity::is_dummy":"```justcode\nentity::is_dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nif(entity::is_dummy()){\n    player::message(\"Условие верно\");\n}\n```\n\n","entity::exists":"```justcode\nentity::exists\n```\n\n**Имя:** Существует\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли существо в мире.\n\n**Пример использования:** \n```justcode\nif(entity::exists()){\n    player::message(\"Условие верно\");\n}\n```\n\n","entity::has_custom_tag":"```justcode\nentity::has_custom_tag\n```\n\n**Имя:** Имеет кастомный тег\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли существо кастомный тег с указанным значением.\n\n**Пример использования:** \n```justcode\nif(entity::has_custom_tag(\"tag\", \"tag_value\", \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::has_custom_tag(tag=\"tag\", tag_value=\"tag_value\", compare_type=\"CONTAINS\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                               | **Описание**       |\n| :------------- | :------------------------------- | :------------ |\n| `tag`               | Текст                                 | Название тега      |\n| `tag_value`         | Текст                                 | Значение тега      |\n| `compare_type`      | Маркер                                | Тип сравнения      |\n|                     | **CONTAINS** - Содержит               |                    |\n|                     | **ENDS_WITH** - Заканчивается на      |                    |\n|                     | **EQUALS** - Точное соответствие      |                    |\n|                     | **STARTS_WITH** - Начинается на       |                    |","entity::has_potion_effect":"```justcode\nentity::has_potion_effect\n```\n\n**Имя:** Имеет эффект от зелья\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли существо эффект от зелья.\n\n**Пример использования:** \n```justcode\nif(entity::has_potion_effect([potion(\"slow_falling\"), potion(\"slow_falling\")], \"ALL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::has_potion_effect(potions=[potion(\"slow_falling\"), potion(\"slow_falling\")], check_mode=\"ALL\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                     | **Описание**            |\n| :----------- | :--------------------- | :----------------- |\n| `potions`         | список[Зелье]               | Зелья для проверки      |\n| `check_mode`      | Маркер                      | Режим проверки          |\n|                   | **ALL** - Все эффекты       |                         |\n|                   | **ANY** - Любой эффект      |                         |","entity::in_area":"```justcode\nentity::in_area\n```\n\n**Имя:** Внутри региона\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли сущность в определённом регионе.\n\n**Пример использования:** \n```justcode\nif(entity::in_area(location(0,0,0,0,0), location(0,0,0,0,0), \"FALSE\", \"HITBOX\", \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::in_area(location_1=location(0,0,0,0,0), location_2=location(0,0,0,0,0), ignore_y_axis=\"FALSE\", intersect_type=\"HITBOX\", check_type=\"CONTAINS\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                          | **Описание**               |\n| :--------------- | :-------------------------- | :-------------------- |\n| `location_1`          | Местоположение                   | Первый угол региона        |\n| `location_2`          | Местоположение                   | Второй угол региона        |\n| `ignore_y_axis`       | Маркер                           | Игнорировать ось Y         |\n|                       | **FALSE** - Не игнорировать      |                            |\n|                       | **TRUE** - Игнорировать          |                            |\n| `intersect_type`      | Маркер                           | Тип пересечения            |\n|                       | **HITBOX** - Хитбокс             |                            |\n|                       | **POINT** - Местоположение       |                            |\n| `check_type`          | Маркер                           | Тип проверки хитбокса      |\n|                       | **CONTAINS** - Содержит          |                            |\n|                       | **OVERLAPS** - Пересекается      |                            |","entity::is_disguised":"```justcode\nentity::is_disguised\n```\n\n**Имя:** Замаскирована\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, замаскирована ли сущность.\n\n**Пример использования:** \n```justcode\nif(entity::is_disguised()){\n    player::message(\"Условие верно\");\n}\n```\n\n","entity::is_grounded":"```justcode\nentity::is_grounded\n```\n\n**Имя:** Касается поверхности блока\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, касается ли существо поверхности блока.\n\n**Пример использования:** \n```justcode\nif(entity::is_grounded()){\n    player::message(\"Условие верно\");\n}\n```\n\n","entity::is_item":"```justcode\nentity::is_item\n```\n\n**Имя:** Является предметом\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли существо предметом.\n\n**Пример использования:** \n```justcode\nif(entity::is_item()){\n    player::message(\"Условие верно\");\n}\n```\n\n","entity::is_mob":"```justcode\nentity::is_mob\n```\n\n**Имя:** Является мобом\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли существо мобом.\n\n**Пример использования:** \n```justcode\nif(entity::is_mob()){\n    player::message(\"Условие верно\");\n}\n```\n\n","entity::is_near_location":"```justcode\nentity::is_near_location\n```\n\n**Имя:** Рядом с местоположением\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли существо рядом с указанным местоположением.\n\n**Пример использования:** \n```justcode\nif(entity::is_near_location(1, location(0,0,0,0,0), \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::is_near_location(range=1, location=location(0,0,0,0,0), ignore_y_axis=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                          | **Описание**                     |\n| :-------------- | :-------------------------- | :-------------------------- |\n| `range`              | Число                            | Радиус проверки                  |\n| `location`           | Местоположение                   | Местоположение для проверки      |\n| `ignore_y_axis`      | Маркер                           | Игнорировать ось Y               |\n|                      | **FALSE** - Не игнорировать      |                                  |\n|                      | **TRUE** - Игнорировать          |                                  |","entity::is_projectile":"```justcode\nentity::is_projectile\n```\n\n**Имя:** Является снарядом\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли существо снарядом.\n\n**Пример использования:** \n```justcode\nif(entity::is_projectile()){\n    player::message(\"Условие верно\");\n}\n```\n\n","entity::is_riding_entity":"```justcode\nentity::is_riding_entity\n```\n\n**Имя:** Сущность оседлала сущность\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, оседлала ли сущность любую из других указанных сущностей.\n\n**Пример использования:** \n```justcode\nif(entity::is_riding_entity([\"entity_ids\", \"entity_ids\"], \"FARTHEST\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::is_riding_entity(entity_ids=[\"entity_ids\", \"entity_ids\"], compare_mode=\"FARTHEST\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                              | **Описание**                |\n| :------------- | :------------------------------ | :--------------------- |\n| `entity_ids`        | список[Текст]                        | Имя или UUID сущностей      |\n| `compare_mode`      | Маркер                               | Режим проверки              |\n|                     | **FARTHEST** - None                  |                             |\n|                     | **NAME_OR_UUID** - Имя или UUID      |                             |\n|                     | **NEAREST** - None                   |                             |\n|                     | **TYPE** - Тип существа              |                             |","entity::is_standing_on_block":"```justcode\nentity::is_standing_on_block\n```\n\n**Имя:** Стоит на блоке\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, стоит ли сущность на определённом блоке или местоположении.\n\n**Пример использования:** \n```justcode\nif(entity::is_standing_on_block([item(\"stone\"), item(\"stone\")], [location(0,0,0,0,0), location(0,0,0,0,0)], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::is_standing_on_block(blocks=[item(\"stone\"), item(\"stone\")], locations=[location(0,0,0,0,0), location(0,0,0,0,0)], only_solid=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                      | **Описание**                     |\n| :----------- | :---------------------- | :-------------------------- |\n| `blocks`          | список[Блок]                 | Блоки для проверки               |\n| `locations`       | список[Местоположение]       | Местоположения для проверки      |\n| `only_solid`      | Маркер                       | Учитывать проходимые блоки       |\n|                   | **FALSE** - Учитывать        |                                  |\n|                   | **TRUE** - Не учитывать      |                                  |","entity::is_type":"```justcode\nentity::is_type\n```\n\n**Имя:** Тип существа равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли тип существа типу в сундуке.\n\n**Пример использования:** \n```justcode\nif(entity::is_type([item(\"stick\"), item(\"stick\")])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::is_type(entity_types=[item(\"stick\"), item(\"stick\")]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**              | **Описание**      |\n| :------------- | :-------------- | :----------- |\n| `entity_types`      | список[Предмет]      | Тип существа      |","entity::is_undead":"```justcode\nentity::is_undead\n```\n\n**Имя:** Является нежитью\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли существо нежитью.\n\n**Пример использования:** \n```justcode\nif(entity::is_undead()){\n    player::message(\"Условие верно\");\n}\n```\n\n","entity::is_vehicle":"```justcode\nentity::is_vehicle\n```\n\n**Имя:** Является транспортом\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли существо транспортом.\n\n**Пример использования:** \n```justcode\nif(entity::is_vehicle()){\n    player::message(\"Условие верно\");\n}\n```\n\n","entity::name_equals":"```justcode\nentity::name_equals\n```\n\n**Имя:** Имя равно\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равно ли имя существа имени в сундуке.\n\n**Пример использования:** \n```justcode\nif(entity::name_equals([\"names_or_uuids\", \"names_or_uuids\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::name_equals(names_or_uuids=[\"names_or_uuids\", \"names_or_uuids\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**            | **Описание**                     |\n| :--------------- | :------------ | :-------------------------- |\n| `names_or_uuids`      | список[Текст]      | Имена или UUID для проверки      |","entity::spawn_reason_equals":"```justcode\nentity::spawn_reason_equals\n```\n\n**Имя:** Причина появления равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равна ли причина появления существа определённому значению.\n\n**Пример использования:** \n```justcode\nif(entity::spawn_reason_equals(\"BEEHIVE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nentity::spawn_reason_equals(reason=\"BEEHIVE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                                                  | **Описание**        |\n| :------- | :-------------------------------------------------- | :------------- |\n| `reason`      | Маркер                                                   | Причина спавна      |\n|               | **BEEHIVE** - Появление из улья                          |                     |\n|               | **BREEDING** - От размножения                            |                     |\n|               | **BUILD_IRONGOLEM** - От постройки Железного голема      |                     |\n|               | **BUILD_SNOWMAN** - От постройки Снежного голема         |                     |\n|               | **BUILD_WITHER** - От постройки Иссушителя               |                     |\n|               | **COMMAND** - От команды                                 |                     |\n|               | **CURED** - Вылечивание Жителя                           |                     |\n|               | **CUSTOM** - Кастомная                                   |                     |\n|               | **DEFAULT** - Стандартная                                |                     |\n|               | **DISPENSE_EGG** - Появление из Раздатчика               |                     |\n|               | **DROWNED** - От утопления                               |                     |\n|               | **EGG** - Появление из яйца                              |                     |\n|               | **ENDER_PEARL** - Появление из Жемчуга Энда              |                     |\n|               | **EXPLOSION** - После взрыва                             |                     |\n|               | **FROZEN** - От заморозки                                |                     |\n|               | **INFECTION** - От заражения Зомби                       |                     |\n|               | **JOCKEY** - Как жокей сущности                          |                     |\n|               | **LIGHTNING** - От молнии                                |                     |\n|               | **MOUNT** - Как транспорт сущности                       |                     |\n|               | **NATURAL** - Натуральный спавн                          |                     |\n|               | **NETHER_PORTAL** - Из портала в Незер                   |                     |\n|               | **OCELOT_BABY** - Ребёнок Оцелота                        |                     |\n|               | **PATROL** - Патруль Разбойников                         |                     |\n|               | **PIGLIN_ZOMBIFIED** - Зомбифицирование                  |                     |\n|               | **RAID** - От рейда                                      |                     |\n|               | **REINFORCEMENTS** - Подкрепление                        |                     |\n|               | **SHEARED** - От подстригания                            |                     |\n|               | **SHOULDER_ENTITY** - Спрыгивание с плеча                |                     |\n|               | **SILVERFISH_BLOCK** - Из блока                          |                     |\n|               | **SLIME_SPLIT** - Разделение Слизней                     |                     |\n|               | **SPAWNER** - Со спавнера мобов                          |                     |\n|               | **SPAWNER_EGG** - Из яйца Призыва                        |                     |\n|               | **TRAP** - Ловушка                                       |                     |\n|               | **VILLAGER_DEFENSE** - Защита деревни                    |                     |\n|               | **VILLAGE_INVASION** - Наступление на деревню            |                     |","world::block_equals":"```justcode\nworld::block_equals\n```\n\n**Имя:** Блок равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли блок в определённом местоположении определённым типом блока.\n\n**Пример использования:** \n```justcode\nif(world::block_equals([item(\"stone\"), item(\"stone\")], location(0,0,0,0,0))){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::block_equals(blocks=[item(\"stone\"), item(\"stone\")], location=location(0,0,0,0,0)){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                |\n| :--------- | :------------- | :--------------------- |\n| `blocks`        | список[Блок]        | Тип блока для проверки      |\n| `location`      | Местоположение      | Местоположение блока        |","world::block_powered":"```justcode\nworld::block_powered\n```\n\n**Имя:** Блок запитан редстоуном\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, запитан ли блок в определённом местоположении редстоуном.\n\n**Пример использования:** \n```justcode\nif(world::block_powered([location(0,0,0,0,0), location(0,0,0,0,0)], \"DIRECT\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::block_powered(locations=[location(0,0,0,0,0), location(0,0,0,0,0)], power_mode=\"DIRECT\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                  | **Описание**                    |\n| :----------- | :---------------------------------- | :------------------------- |\n| `locations`       | список[Местоположение]                   | Местоположение блока            |\n| `power_mode`      | Маркер                                   | Вид запитывания редстоуном      |\n|                   | **DIRECT** - Прямое запитывание          |                                 |\n|                   | **INDIRECT** - Непрямое запитывание      |                                 |","world::chunk_is_loaded":"```justcode\nworld::chunk_is_loaded\n```\n\n**Имя:** Чанк загружен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, загружен ли чанк на местоположении.\n\n**Пример использования:** \n```justcode\nif(world::chunk_is_loaded(location(0,0,0,0,0))){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::chunk_is_loaded(location=location(0,0,0,0,0)){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**              |\n| :--------- | :------------- | :------------------- |\n| `location`      | Местоположение      | Местоположение чанка      |","world::container_has":"```justcode\nworld::container_has\n```\n\n**Имя:** Контейнер имеет предмет\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли контейнер в определённом местоположении определённые предметы в его инвентаре.\n\n**Пример использования:** \n```justcode\nif(world::container_has([item(\"stick\"), item(\"stick\")], location(0,0,0,0,0), \"ALL\", \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::container_has(items=[item(\"stick\"), item(\"stick\")], location=location(0,0,0,0,0), check_mode=\"ALL\", comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**                   |\n| :---------------- | :------------------------------------------------------------------------- | :------------------------ |\n| `items`                | список[Предмет]                                                                 | Предметы для проверки          |\n| `location`             | Местоположение                                                                  | Местоположение контейнера      |\n| `check_mode`           | Маркер                                                                          | Вид сравнения                  |\n|                        | **ALL** - Все предметы                                                          |                                |\n|                        | **ANY** - Любые предметы                                                        |                                |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения                |\n|                        | **EXACTLY** - Полное сравнение                                                  |                                |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                                |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать только количество                          |                                |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                                |","world::container_has_room_for_item":"```justcode\nworld::container_has_room_for_item\n```\n\n**Имя:** Контейнер имеет место для предметов\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли контейнер в определённом местоположении место для предметов в его инвентаре.\n\n**Пример использования:** \n```justcode\nif(world::container_has_room_for_item([item(\"stick\"), item(\"stick\")], location(0,0,0,0,0), \"ALL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::container_has_room_for_item(items=[item(\"stick\"), item(\"stick\")], location=location(0,0,0,0,0), check_mode=\"ALL\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                       | **Описание**                   |\n| :----------- | :----------------------- | :------------------------ |\n| `items`           | список[Предмет]               | Предметы для проверки          |\n| `location`        | Местоположение                | Местоположение контейнера      |\n| `check_mode`      | Маркер                        | Вид сравнения                  |\n|                   | **ALL** - Все предметы        |                                |\n|                   | **ANY** - Любые предметы      |                                |","world::damage_cause_equals":"```justcode\nworld::damage_cause_equals\n```\n\n**Имя:** Источник урона события равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли источник урона события выбранному.\n\n**Пример использования:** \n```justcode\nif(world::damage_cause_equals(\"BLOCK_EXPLOSION\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::damage_cause_equals(cause=\"BLOCK_EXPLOSION\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                                                | **Описание**        |\n| :------ | :------------------------------------------------ | :------------- |\n| `cause`      | Маркер                                                 | Источник урона      |\n|              | **BLOCK_EXPLOSION** - Взрыв блока                      |                     |\n|              | **CAMPFIRE** - Костёр                                  |                     |\n|              | **CONTACT** - Контакт                                  |                     |\n|              | **CRAMMING** - Толпёжка                                |                     |\n|              | **CUSTOM** - Кастомный                                 |                     |\n|              | **DRAGON_BREATH** - Дыхание дракона                    |                     |\n|              | **DROWNING** - Утопление                               |                     |\n|              | **DRYOUT** - Высыхание                                 |                     |\n|              | **ENTITY_ATTACK** - Атака сущности                     |                     |\n|              | **ENTITY_EXPLOSION** - Взрыв сущности                  |                     |\n|              | **ENTITY_SWEEP_ATTACK** - Обширная атака сущности      |                     |\n|              | **FALL** - Падение                                     |                     |\n|              | **FALLING_BLOCK** - Падающий блок                      |                     |\n|              | **FIRE** - Прямой огонь                                |                     |\n|              | **FIRE_TICK** - Горение                                |                     |\n|              | **FLY_INTO_WALL** - Кинетическая энергия               |                     |\n|              | **FREEZE** - Замерзание                                |                     |\n|              | **HOT_FLOOR** - Магма                                  |                     |\n|              | **KILL** - Команда                                     |                     |\n|              | **LAVA** - Лава                                        |                     |\n|              | **LIGHTNING** - Молния                                 |                     |\n|              | **MAGIC** - Магия                                      |                     |\n|              | **MELTING** - Таяние                                   |                     |\n|              | **POISON** - Отравление                                |                     |\n|              | **PROJECTILE** - Снаряд                                |                     |\n|              | **SONIC_BOOM** - Взрывная волна                        |                     |\n|              | **STARVATION** - Голод                                 |                     |\n|              | **SUFFOCATION** - Удушение                             |                     |\n|              | **SUICIDE** - Суицид (грех)                            |                     |\n|              | **THORNS** - Шипы                                      |                     |\n|              | **VOID** - Бездна                                      |                     |\n|              | **WITHER** - Иссушение                                 |                     |\n|              | **WORLD_BORDER** - Граница мира                        |                     |","world::is_dummy":"```justcode\nworld::is_dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nif(world::is_dummy()){\n    player::message(\"Условие верно\");\n}\n```\n\n","world::event_attack_is_critical":"```justcode\nworld::event_attack_is_critical\n```\n\n**Имя:** Атака была критической\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, была ли атака в событии критической.\n\n**Пример использования:** \n```justcode\nif(world::event_attack_is_critical()){\n    player::message(\"Условие верно\");\n}\n```\n\n","world::event_block_equals":"```justcode\nworld::event_block_equals\n```\n\n**Имя:** Блок события равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли блок текущего события определённому блоку.\n\n**Пример использования:** \n```justcode\nif(world::event_block_equals([item(\"stone\"), item(\"stone\")], [location(0,0,0,0,0), location(0,0,0,0,0)])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::event_block_equals(blocks=[item(\"stone\"), item(\"stone\")], locations=[location(0,0,0,0,0), location(0,0,0,0,0)]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                     | **Описание**                            |\n| :---------- | :--------------------- | :--------------------------------- |\n| `blocks`         | список[Блок]                | Типы блоков для проверки                |\n| `locations`      | список[Местоположение]      | Местоположения блоков для проверки      |","world::event_has_input":"```justcode\nworld::event_has_input\n```\n\n**Имя:** Клавиша передвижения равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли клавиша передвижения из события, выбранной клавишей.\n**Работает с:**\\\n&nbsp;&nbsp;Событием \"Игрок меняет нажатые клавиши передвижения\"\\\n&nbsp;&nbsp;Событием \"Игрок передвигается на транспорте\"\\\n&nbsp;&nbsp;Событием \"Игрок прыгает на транспорте\"\n\n**Пример использования:** \n```justcode\nif(world::event_has_input(\"FORWARD\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::event_has_input(input_type=\"FORWARD\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                     | **Описание**              |\n| :----------- | :--------------------- | :------------------- |\n| `input_type`      | Маркер                      | Клавиша передвижения      |\n|                   | **FORWARD** - Вперёд        |                           |\n|                   | **BACKWARDS** - Назад       |                           |\n|                   | **LEFT** - Влево            |                           |\n|                   | **RIGHT** - Вправо          |                           |\n|                   | **JUMP** - Прыжок           |                           |\n|                   | **SNEAK** - Приседание      |                           |\n|                   | **SPRINT** - Бег            |                           |","world::event_is_canceled":"```justcode\nworld::event_is_canceled\n```\n\n**Имя:** Событие отменено\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, отменено ли событие.\n\n**Пример использования:** \n```justcode\nif(world::event_is_canceled()){\n    player::message(\"Условие верно\");\n}\n```\n\n","world::event_item_equals":"```justcode\nworld::event_item_equals\n```\n\n**Имя:** Предмет события равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли предмет текущего события определённому предмету.\n\n**Пример использования:** \n```justcode\nif(world::event_item_equals([item(\"stick\"), item(\"stick\")], \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::event_item_equals(items=[item(\"stick\"), item(\"stick\")], comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**               |\n| :---------------- | :------------------------------------------------------------------------- | :-------------------- |\n| `items`                | список[Предмет]                                                                 | Предметы для проверки      |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения            |\n|                        | **EXACTLY** - Полное сравнение                                                  |                            |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                            |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать только количество                          |                            |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                            |","world::has_player":"```justcode\nworld::has_player\n```\n\n**Имя:** Игрок в игре\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли определённый игрок в игре.\n\n**Пример использования:** \n```justcode\nif(world::has_player([\"names_or_uuids\", \"names_or_uuids\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::has_player(names_or_uuids=[\"names_or_uuids\", \"names_or_uuids\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**            | **Описание**             |\n| :--------------- | :------------ | :------------------ |\n| `names_or_uuids`      | список[Текст]      | Ник игрока или UUID      |","world::heal_cause_equals":"```justcode\nworld::heal_cause_equals\n```\n\n**Имя:** Источник исцеления равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли источник исцеления выбранному.\n\n**Пример использования:** \n```justcode\nif(world::heal_cause_equals(\"CUSTOM\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::heal_cause_equals(heal_cause=\"CUSTOM\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                                    | **Описание**            |\n| :----------- | :---------------------------------------------------- | :----------------- |\n| `heal_cause`      | Маркер                                                     | Источник исцеления      |\n|                   | **CUSTOM** - Кастомный                                     |                         |\n|                   | **EATING** - От употребления пищи                          |                         |\n|                   | **ENDER_CRYSTAL** - От кристалла Энда                      |                         |\n|                   | **MAGIC** - От зелья или заклинания                        |                         |\n|                   | **MAGIC_REGEN** - Со временем от зелья или заклинания      |                         |\n|                   | **REGEN** - Исцеление в Мирном режиме                      |                         |\n|                   | **SATIATED** - Исцеление при утолённом голоде              |                         |\n|                   | **WITHER** - От эффекта Иссушение                          |                         |\n|                   | **WITHER_SPAWN** - При появлении Иссушителя                |                         |","world::ignite_cause_equals":"```justcode\nworld::ignite_cause_equals\n```\n\n**Имя:** Источник огня равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли источник огня выбранному.\n\n**Пример использования:** \n```justcode\nif(world::ignite_cause_equals(\"ARROW\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::ignite_cause_equals(cause=\"ARROW\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                                | **Описание**       |\n| :------ | :-------------------------------- | :------------ |\n| `cause`      | Маркер                                 | Источник огня      |\n|              | **ARROW** - Стрела                     |                    |\n|              | **ENDER_CRYSTAL** - Кристалл Энда      |                    |\n|              | **EXPLOSION** - Взрыв                  |                    |\n|              | **FALL** - Падение                     |                    |\n|              | **FIREBALL** - Огненный заряд          |                    |\n|              | **FLINT_AND_STEEL** - Зажигалка        |                    |\n|              | **LAVA** - Лава                        |                    |\n|              | **LIGHTNING** - Молния                 |                    |\n|              | **SPREAD** - Распространение огня      |                    |\n|              | **SUFFOCATION** - Удушение             |                    |","world::instrument_equals":"```justcode\nworld::instrument_equals\n```\n\n**Имя:** Инструмент равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли инструмент в событии выбранному.\n\n**Пример использования:** \n```justcode\nif(world::instrument_equals(\"BANJO\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::instrument_equals(instrument=\"BANJO\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                     | **Описание**      |\n| :----------- | :------------------------------------- | :----------- |\n| `instrument`      | Маркер                                      | Инструмент        |\n|                   | **BANJO** - Банджо                          |                   |\n|                   | **BASS_DRUM** - Бас-барабан                 |                   |\n|                   | **BASS_GUITAR** - Бас-гитара                |                   |\n|                   | **BELL** - Колокол                          |                   |\n|                   | **BIT** - Бит                               |                   |\n|                   | **CHIME** - Чаймс                           |                   |\n|                   | **COW_BELL** - Ковбелл                      |                   |\n|                   | **CREEPER** - Крипер                        |                   |\n|                   | **CUSTOM_HEAD** - Кастомная голова          |                   |\n|                   | **DIDGERIDOO** - Диджериду                  |                   |\n|                   | **DRAGON** - Эндер-дракон                   |                   |\n|                   | **FLUTE** - Флейта                          |                   |\n|                   | **GUITAR** - Гитара                         |                   |\n|                   | **IRON_XYLOPHONE** - Железный ксилофон      |                   |\n|                   | **PIANO** - Пианино                         |                   |\n|                   | **PIGLIN** - Пиглин                         |                   |\n|                   | **PLING** - Плинг                           |                   |\n|                   | **SKELETON** - Скелет                       |                   |\n|                   | **SNARE_DRUM** - Малый барабан              |                   |\n|                   | **STICKS** - Клаве                          |                   |\n|                   | **WITHER_SKELETON** - Визер-скелет          |                   |\n|                   | **XYLOPHONE** - Ксилофон                    |                   |\n|                   | **ZOMBIE** - Зомби                          |                   |","world::location_in_block":"```justcode\nworld::location_in_block\n```\n\n**Имя:** Если местоположение внутри блока\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли указанное местоположение внутри блока.\n\n**Пример использования:** \n```justcode\nif(world::location_in_block(location(0,0,0,0,0))){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::location_in_block(location=location(0,0,0,0,0)){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                     |\n| :--------- | :------------- | :-------------------------- |\n| `location`      | Местоположение      | Местоположение для проверки      |","world::sign_contains":"```justcode\nworld::sign_contains\n```\n\n**Имя:** Табличка содержит текст\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, содержит ли табличка в определённом местоположении определённый текст.\n\n**Пример использования:** \n```justcode\nif(world::sign_contains(location(0,0,0,0,0), [\"texts\", \"texts\"], \"ANY\", \"ALL\", \"ALL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nworld::sign_contains(location=location(0,0,0,0,0), texts=[\"texts\", \"texts\"], check_side=\"ANY\", check_mode=\"ALL\", lines=\"ALL\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                     | **Описание**                 |\n| :----------- | :------------------------------------- | :---------------------- |\n| `location`        | Местоположение                              | Местоположение таблички      |\n| `texts`           | список[Текст]                               | Текст для проверки           |\n| `check_side`      | Маркер                                      | Сторона таблички             |\n|                   | **ANY** - Любая                             |                              |\n|                   | **BACK** - Задняя                           |                              |\n|                   | **FRONT** - Передняя                        |                              |\n| `check_mode`      | Маркер                                      | Вид сравнения                |\n|                   | **ALL** - None                              |                              |\n|                   | **ANY** - None                              |                              |\n|                   | **CONTAINS** - Сравнение по содержанию      |                              |\n|                   | **EQUALS** - Полное сравнение               |                              |\n| `lines`           | Маркер                                      | Строки для сравнения         |\n|                   | **ALL** - Все строки                        |                              |\n|                   | **ANY** - Любая строка                      |                              |\n|                   | **FIRST** - 1 строка                        |                              |\n|                   | **FOURTH** - 4 строка                       |                              |\n|                   | **SECOND** - 2 строка                       |                              |\n|                   | **THIRD** - 3 строка                        |                              |","player::chat_colors_enabled":"```justcode\nplayer::chat_colors_enabled\n```\n\n**Имя:** Имеет цвета в чате\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, включена ли настройка \"Цвета в чате\" у игрока.\n\n**Пример использования:** \n```justcode\nif(player::chat_colors_enabled()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::chat_message_equals":"```justcode\nplayer::chat_message_equals\n```\n\n**Имя:** Сообщение равно\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равно ли сообщение игрока выбранному.\n\n**Пример использования:** \n```justcode\nif(player::chat_message_equals([\"chat_messages\", \"chat_messages\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::chat_message_equals(chat_messages=[\"chat_messages\", \"chat_messages\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**            | **Описание**      |\n| :-------------- | :------------ | :----------- |\n| `chat_messages`      | список[Текст]      | Сообщение         |","player::collides_at_location":"```justcode\nplayer::collides_at_location\n```\n\n**Имя:** Сталкивается на местоположении\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, сталкивается ли игрок с блоками, шалкерами, лодками и границей мира на указанном местоположении.\n\n**Пример использования:** \n```justcode\nif(player::collides_at_location(location(0,0,0,0,0))){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::collides_at_location(location=location(0,0,0,0,0)){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                     |\n| :--------- | :------------- | :-------------------------- |\n| `location`      | Местоположение      | Местоположение для проверки      |","player::collides_using_hitbox":"```justcode\nplayer::collides_using_hitbox\n```\n\n**Имя:** Сталкивается используя кастомный хитбокс\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, сталкивается ли игрок с блоками, шалкерами, лодками и границей мира используя кастомный хитбокс.\n\n**Пример использования:** \n```justcode\nif(player::collides_using_hitbox(location(0,0,0,0,0), location(0,0,0,0,0))){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::collides_using_hitbox(min=location(0,0,0,0,0), max=location(0,0,0,0,0)){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**              |\n| :------ | :------------- | :------------------- |\n| `min`        | Местоположение      | Первый угол хитбокса      |\n| `max`        | Местоположение      | Второй угол хитбокса      |","player::collides_with_entity":"```justcode\nplayer::collides_with_entity\n```\n\n**Имя:** Сталкивается с сущностью\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, сталкивается ли хитбокс игрока с хитбоксом указанной сущности.\n\n**Пример использования:** \n```justcode\nif(player::collides_with_entity(\"name_or_uuid\", \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::collides_with_entity(name_or_uuid=\"name_or_uuid\", check_type=\"CONTAINS\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                          | **Описание**                   |\n| :------------- | :-------------------------- | :------------------------ |\n| `name_or_uuid`      | Текст                            | Имя или UUID сущности          |\n| `check_type`        | Маркер                           | Тип проверки столкновения      |\n|                     | **CONTAINS** - Содержит          |                                |\n|                     | **OVERLAPS** - Пересекается      |                                |","player::cursor_item_equals":"```justcode\nplayer::cursor_item_equals\n```\n\n**Имя:** Предмет на курсоре равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли предмет, находящийся на курсоре игрока, выбранному предмету.\n\n**Пример использования:** \n```justcode\nif(player::cursor_item_equals([item(\"stick\"), item(\"stick\")], \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::cursor_item_equals(items=[item(\"stick\"), item(\"stick\")], comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**               |\n| :---------------- | :------------------------------------------------------------------------- | :-------------------- |\n| `items`                | список[Предмет]                                                                 | Предметы для проверки      |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения            |\n|                        | **EXACTLY** - Полное сравнение                                                  |                            |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                            |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать только количество                          |                            |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                            |","player::is_dummy":"```justcode\nplayer::is_dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nif(player::is_dummy()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::gamemode_equals":"```justcode\nplayer::gamemode_equals\n```\n\n**Имя:** Режим игры равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли режим игры игрока выбранному.\n\n**Пример использования:** \n```justcode\nif(player::gamemode_equals(\"ADVENTURE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::gamemode_equals(gamemode=\"ADVENTURE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                          | **Описание**      |\n| :--------- | :-------------------------- | :----------- |\n| `gamemode`      | Маркер                           | Режим игры        |\n|                 | **ADVENTURE** - Приключение      |                   |\n|                 | **CREATIVE** - Творческий        |                   |\n|                 | **SPECTATOR** - Наблюдатель      |                   |\n|                 | **SURVIVAL** - Выживание         |                   |","player::has_input":"```justcode\nplayer::has_input\n```\n\n**Имя:** Клавиша передвижения нажата\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, нажата ли выбранная кнопка передвижения у игрока.\n\n**Пример использования:** \n```justcode\nif(player::has_input(\"FORWARD\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::has_input(input_type=\"FORWARD\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                     | **Описание**              |\n| :----------- | :--------------------- | :------------------- |\n| `input_type`      | Маркер                      | Клавиша передвижения      |\n|                   | **FORWARD** - Вперёд        |                           |\n|                   | **BACKWARDS** - Назад       |                           |\n|                   | **LEFT** - Влево            |                           |\n|                   | **RIGHT** - Вправо          |                           |\n|                   | **JUMP** - Прыжок           |                           |\n|                   | **SNEAK** - Приседание      |                           |\n|                   | **SPRINT** - Бег            |                           |","player::has_item":"```justcode\nplayer::has_item\n```\n\n**Имя:** Имеет предмет\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли игрок предмет в своём инвентаре.\n\n**Пример использования:** \n```justcode\nif(player::has_item([item(\"stick\"), item(\"stick\")], \"ALL\", \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::has_item(items=[item(\"stick\"), item(\"stick\")], check_mode=\"ALL\", comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**               |\n| :---------------- | :------------------------------------------------------------------------- | :-------------------- |\n| `items`                | список[Предмет]                                                                 | Предметы для проверки      |\n| `check_mode`           | Маркер                                                                          | Режим проверки             |\n|                        | **ALL** - Все предметы                                                          |                            |\n|                        | **ANY** - Любой предмет                                                         |                            |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения            |\n|                        | **EXACTLY** - Полное сравнение                                                  |                            |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                            |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать количество                                 |                            |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                            |","player::has_item_at_least":"```justcode\nplayer::has_item_at_least\n```\n\n**Имя:** Имеет предмет в количестве\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли игрок предмет в определённом количестве.\n\n**Пример использования:** \n```justcode\nif(player::has_item_at_least(item(\"stick\"), 1, \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::has_item_at_least(item=item(\"stick\"), count=1, comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**                |\n| :---------------- | :------------------------------------------------------------------------- | :--------------------- |\n| `item`                 | Предмет                                                                         | Предмет для проверки        |\n| `count`                | Число                                                                           | Минимальное количество      |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения             |\n|                        | **EXACTLY** - Полное сравнение                                                  |                             |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                             |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать количество                                 |                             |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                             |","player::has_item_in_slot":"```justcode\nplayer::has_item_in_slot\n```\n\n**Имя:** Имеет предмет в слоте\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли игрок предмет в определённом слоте инвентаря.\n\n**Пример использования:** \n```justcode\nif(player::has_item_in_slot([1, 2], [item(\"stick\"), item(\"stick\")], \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::has_item_in_slot(slots=[1, 2], items=[item(\"stick\"), item(\"stick\")], comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**                  |\n| :---------------- | :------------------------------------------------------------------------- | :----------------------- |\n| `slots`                | список[Число]                                                                   | Номер слота для проверки      |\n| `items`                | список[Предмет]                                                                 | Предметы для проверки         |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения               |\n|                        | **EXACTLY** - Полное сравнение                                                  |                               |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                               |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать только количество                          |                               |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                               |","player::has_potion_effect":"```justcode\nplayer::has_potion_effect\n```\n\n**Имя:** Имеет эффект от зелья\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли игрок эффект от зелья.\n\n**Пример использования:** \n```justcode\nif(player::has_potion_effect([potion(\"slow_falling\"), potion(\"slow_falling\")], \"ALL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::has_potion_effect(potions=[potion(\"slow_falling\"), potion(\"slow_falling\")], check_mode=\"ALL\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                     | **Описание**            |\n| :----------- | :--------------------- | :----------------- |\n| `potions`         | список[Зелье]               | Зелья для проверки      |\n| `check_mode`      | Маркер                      | Режим проверки          |\n|                   | **ALL** - Все эффекты       |                         |\n|                   | **ANY** - Любой эффект      |                         |","player::has_privilege":"```justcode\nplayer::has_privilege\n```\n\n**Имя:** Имеет права\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли игрок определённые права в мире.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;При включённом маркере \\\"Точность проверки\\\", проверка на права строительства и разработки будет осуществлятся, даже если игрок добавлен в белый список.\n\n**Пример использования:** \n```justcode\nif(player::has_privilege(\"BUILDER\", \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::has_privilege(privilege=\"BUILDER\", exact=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                                                  | **Описание**           |\n| :---------- | :-------------------------------------------------- | :---------------- |\n| `privilege`      | Маркер                                                   | Право                  |\n|                  | **BUILDER** - Строитель                                  |                        |\n|                  | **BUILDER_AND_DEVELOPER** - Строитель и разработчик      |                        |\n|                  | **DEVELOPER** - Разработчик                              |                        |\n|                  | **OWNER** - Владелец мира                                |                        |\n|                  | **WHITELISTED** - В белом списке                         |                        |\n| `exact`          | Маркер                                                   | Точность проверки      |\n|                  | **FALSE** - Выключить                                    |                        |\n|                  | **TRUE** - Включить                                      |                        |","player::has_room_for_item":"```justcode\nplayer::has_room_for_item\n```\n\n**Имя:** Имеет место для предметов\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли игрок в своём инвентаре место для одного или нескольких предметов.\n\n**Пример использования:** \n```justcode\nif(player::has_room_for_item([item(\"stick\"), item(\"stick\")], \"ARMOR\", \"ALL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::has_room_for_item(items=[item(\"stick\"), item(\"stick\")], checked_slots=\"ARMOR\", check_mode=\"ALL\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                                      | **Описание**                  |\n| :-------------- | :-------------------------------------- | :----------------------- |\n| `items`              | список[Предмет]                              | Предметы для проверки         |\n| `checked_slots`      | Маркер                                       | Режим проверки слотов         |\n|                      | **ARMOR** - Броня                            |                               |\n|                      | **ENTIRE_INVENTORY** - Весь инвентарь        |                               |\n|                      | **HOTBAR** - Хот-бар                         |                               |\n|                      | **MAIN_INVENTORY** - Главный инвентарь       |                               |\n|                      | **UPPER_INVENTORY** - Верхний инвентарь      |                               |\n| `check_mode`         | Маркер                                       | Режим проверки предметов      |\n|                      | **ALL** - Все предметы                       |                               |\n|                      | **ANY** - Любые предметы                     |                               |","player::hotbar_slot_equals":"```justcode\nplayer::hotbar_slot_equals\n```\n\n**Имя:** Слот в хот-баре равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, совпадает ли текущий слот хот-бара игрока со слотом от 1 до 9 в сундуке.\n\n**Пример использования:** \n```justcode\nif(player::hotbar_slot_equals(1)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::hotbar_slot_equals(slot=1){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                  |\n| :------ | :------ | :----------------------- |\n| `slot`       | Число        | Номер слота для проверки      |","player::in_area":"```justcode\nplayer::in_area\n```\n\n**Имя:** Внутри региона\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли игрок в определённом регионе.\n\n**Пример использования:** \n```justcode\nif(player::in_area(location(0,0,0,0,0), location(0,0,0,0,0), \"FALSE\", \"HITBOX\", \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::in_area(location_1=location(0,0,0,0,0), location_2=location(0,0,0,0,0), ignore_y_axis=\"FALSE\", intersect_type=\"HITBOX\", check_type=\"CONTAINS\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                          | **Описание**               |\n| :--------------- | :-------------------------- | :-------------------- |\n| `location_1`          | Местоположение                   | Первый угол региона        |\n| `location_2`          | Местоположение                   | Второй угол региона        |\n| `ignore_y_axis`       | Маркер                           | Игнорировать ось Y         |\n|                       | **FALSE** - Не игнорировать      |                            |\n|                       | **TRUE** - Игнорировать          |                            |\n| `intersect_type`      | Маркер                           | Тип пересечения            |\n|                       | **HITBOX** - Хитбокс             |                            |\n|                       | **POINT** - Местоположение       |                            |\n| `check_type`          | Маркер                           | Тип проверки хитбокса      |\n|                       | **CONTAINS** - Содержит          |                            |\n|                       | **OVERLAPS** - Пересекается      |                            |","player::inventory_menu_slot_equals":"```justcode\nplayer::inventory_menu_slot_equals\n```\n\n**Имя:** Слот в инвентаре содержит\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, содержит ли сейчас игрок с открытым инвентарём определённый предмет в слоте.\n\n**Пример использования:** \n```justcode\nif(player::inventory_menu_slot_equals([1, 2], [item(\"stick\"), item(\"stick\")], \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::inventory_menu_slot_equals(slots=[1, 2], items=[item(\"stick\"), item(\"stick\")], comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**                  |\n| :---------------- | :------------------------------------------------------------------------- | :----------------------- |\n| `slots`                | список[Число]                                                                   | Номер слота для проверки      |\n| `items`                | список[Предмет]                                                                 | Предметы для проверки         |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения               |\n|                        | **EXACTLY** - Полное сравнение                                                  |                               |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                               |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать только количество                          |                               |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                               |","player::inventory_type_open":"```justcode\nplayer::inventory_type_open\n```\n\n**Имя:** Открыт инвентарь типа\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, открыт ли инвентарь определённого типа у игрока.\n\n**Пример использования:** \n```justcode\nif(player::inventory_type_open(\"ANVIL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::inventory_type_open(inventory_type=\"ANVIL\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                            | **Описание**       |\n| :--------------- | :-------------------------------------------- | :------------ |\n| `inventory_type`      | Маркер                                             | Тип инвентаря      |\n|                       | **ANVIL** - Наковальня                             |                    |\n|                       | **BARREL** - Бочка                                 |                    |\n|                       | **BEACON** - Маяк                                  |                    |\n|                       | **BLAST_FURNACE** - Плавильная печь                |                    |\n|                       | **BREWING** - Зельеварка                           |                    |\n|                       | **CARTOGRAPHY** - Стол картографа                  |                    |\n|                       | **CHEST** - Сундук                                 |                    |\n|                       | **CHISELED_BOOKSHELF** - Резная книжная полка      |                    |\n|                       | **COMPOSTER** - Компостер                          |                    |\n|                       | **CRAFTER** - Сборщик                              |                    |\n|                       | **CRAFTING** - Не открыт                           |                    |\n|                       | **CREATIVE** - Инвентарь креатива                  |                    |\n|                       | **DECORATED_POT** - Ваза                           |                    |\n|                       | **DISPENSER** - Раздатчик                          |                    |\n|                       | **DROPPER** - Выбрасыватель                        |                    |\n|                       | **ENCHANTING** - Чародейский стол                  |                    |\n|                       | **ENDER_CHEST** - Эндер-сундук                     |                    |\n|                       | **FURNACE** - Печь                                 |                    |\n|                       | **GRINDSTONE** - Точило                            |                    |\n|                       | **HOPPER** - Воронка                               |                    |\n|                       | **JUKEBOX** - Нотный блок                          |                    |\n|                       | **LECTERN** - Кафедра                              |                    |\n|                       | **LOOM** - Ткацкий станок                          |                    |\n|                       | **MERCHANT** - Торговец                            |                    |\n|                       | **PLAYER** - Инвентарь игрока                      |                    |\n|                       | **SHULKER_BOX** - Шалкеровый ящик                  |                    |\n|                       | **SMITHING** - Стол кузнеца (старый)               |                    |\n|                       | **SMITHING_NEW** - Стол кузнеца                    |                    |\n|                       | **SMOKER** - Коптильня                             |                    |\n|                       | **STONECUTTER** - Камнерез                         |                    |\n|                       | **WORKBENCH** - Верстак                            |                    |","player::is_allow_server_listing":"```justcode\nplayer::is_allow_server_listing\n```\n\n**Имя:** Отображается в списке игроков сервера\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, включена ли настройка \"Показывать в списках\" у игрока.\n\n**Пример использования:** \n```justcode\nif(player::is_allow_server_listing()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_blocking":"```justcode\nplayer::is_blocking\n```\n\n**Имя:** Использует щит\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, использует ли игрок щит.\n\n**Пример использования:** \n```justcode\nif(player::is_blocking()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_disguised":"```justcode\nplayer::is_disguised\n```\n\n**Имя:** Замаскирован для всех\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, замаскирован ли игрок для остальных игроков.\n\n**Пример использования:** \n```justcode\nif(player::is_disguised()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_flying":"```justcode\nplayer::is_flying\n```\n\n**Имя:** Летит\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, летит ли игрок.\n\n**Пример использования:** \n```justcode\nif(player::is_flying()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_gliding":"```justcode\nplayer::is_gliding\n```\n\n**Имя:** Парит\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, парит ли игрок на элитрах.\n\n**Пример использования:** \n```justcode\nif(player::is_gliding()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::holding":"```justcode\nplayer::holding\n```\n\n**Имя:** Держит предмет\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, держит ли игрок предмет в своих руках.\n\n**Пример использования:** \n```justcode\nif(player::holding([item(\"stick\"), item(\"stick\")], \"EITHER_HAND\", \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::holding(items=[item(\"stick\"), item(\"stick\")], hand_slot=\"EITHER_HAND\", comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**               |\n| :---------------- | :------------------------------------------------------------------------- | :-------------------- |\n| `items`                | список[Предмет]                                                                 | Предметы для проверки      |\n| `hand_slot`            | Маркер                                                                          | Рука                       |\n|                        | **EITHER_HAND** - Любая рука                                                    |                            |\n|                        | **MAIN_HAND** - Главная рука                                                    |                            |\n|                        | **OFF_HAND** - Второстепенная рука                                              |                            |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения            |\n|                        | **EXACTLY** - Полное сравнение                                                  |                            |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                            |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать только количество                          |                            |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                            |","player::is_looking_at_block":"```justcode\nplayer::is_looking_at_block\n```\n\n**Имя:** Смотрит на блок\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, смотрит ли игрок на определённый блок или местоположение.\n\n**Пример использования:** \n```justcode\nif(player::is_looking_at_block([item(\"stone\"), item(\"stone\")], [location(0,0,0,0,0), location(0,0,0,0,0)], 1, \"ALWAYS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::is_looking_at_block(blocks=[item(\"stone\"), item(\"stone\")], locations=[location(0,0,0,0,0), location(0,0,0,0,0)], distance=1, fluid_mode=\"ALWAYS\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                           | **Описание**                                       |\n| :----------- | :------------------------------------------- | :-------------------------------------------- |\n| `blocks`          | список[Блок]                                      | Блок(и) для проверки                               |\n| `locations`       | список[Местоположение]                            | Местоположение(я) для проверки                     |\n| `distance`        | Число                                             | Максимальное расстояние до проверяемого блока      |\n| `fluid_mode`      | Маркер                                            | Режим жидкости                                     |\n|                   | **ALWAYS** - Все виды жидкостей                   |                                                    |\n|                   | **NEVER** - Игнорировать жидкости                 |                                                    |\n|                   | **SOURCE_ONLY** - Только источники жидкостей      |                                                    |","player::is_near":"```justcode\nplayer::is_near\n```\n\n**Имя:** Рядом с местоположением\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли игрок рядом с указанным местоположением (По умолчанию: 5 блоков).\n\n**Пример использования:** \n```justcode\nif(player::is_near(1, location(0,0,0,0,0), \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::is_near(range=1, location=location(0,0,0,0,0), ignore_y_axis=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                          | **Описание**                     |\n| :-------------- | :-------------------------- | :-------------------------- |\n| `range`              | Число                            | Радиус проверки                  |\n| `location`           | Местоположение                   | Местоположение для проверки      |\n| `ignore_y_axis`      | Маркер                           | Игнорировать ось Y               |\n|                      | **FALSE** - Не игнорировать      |                                  |\n|                      | **TRUE** - Игнорировать          |                                  |","player::is_on_ground":"```justcode\nplayer::is_on_ground\n```\n\n**Имя:** Стоит на земле\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, не находится ли игрок в воздухе.\n\n**Пример использования:** \n```justcode\nif(player::is_on_ground()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_online_mode":"```justcode\nplayer::is_online_mode\n```\n\n**Имя:** Имеет лицензионный аккаунт\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли игрок лицензионный аккаунт.\n\n**Пример использования:** \n```justcode\nif(player::is_online_mode()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_riding_entity":"```justcode\nplayer::is_riding_entity\n```\n\n**Имя:** Оседлал существо\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, оседлал ли игрок существо (включая транспорт).\n\n**Пример использования:** \n```justcode\nif(player::is_riding_entity([\"entity_ids\", \"entity_ids\"], \"FARTHEST\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::is_riding_entity(entity_ids=[\"entity_ids\", \"entity_ids\"], compare_mode=\"FARTHEST\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                              | **Описание**                                 |\n| :------------- | :------------------------------ | :-------------------------------------- |\n| `entity_ids`        | список[Текст]                        | Имя, UUID или тип существа для проверки      |\n| `compare_mode`      | Маркер                               | Режим сравнения                              |\n|                     | **FARTHEST** - None                  |                                              |\n|                     | **NAME_OR_UUID** - Имя или UUID      |                                              |\n|                     | **NEAREST** - None                   |                                              |\n|                     | **TYPE** - Тип существа              |                                              |","player::is_self_disguised":"```justcode\nplayer::is_self_disguised\n```\n\n**Имя:** Замаскирован для себя\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, замаскирован ли игрок для себя.\n\n**Пример использования:** \n```justcode\nif(player::is_self_disguised()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_sleeping":"```justcode\nplayer::is_sleeping\n```\n\n**Имя:** Спит\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, спит ли игрок.\n\n**Пример использования:** \n```justcode\nif(player::is_sleeping()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_sneaking":"```justcode\nplayer::is_sneaking\n```\n\n**Имя:** Крадется\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, крадется ли игрок.\n\n**Пример использования:** \n```justcode\nif(player::is_sneaking()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_sprinting":"```justcode\nplayer::is_sprinting\n```\n\n**Имя:** Бежит\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, бежит ли игрок или использует клавишу бега при плавании.\n\n**Пример использования:** \n```justcode\nif(player::is_sprinting()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_standing_on_block":"```justcode\nplayer::is_standing_on_block\n```\n\n**Имя:** Стоит на блоке\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, стоит ли игрок на определённом блоке или местоположении.\n\n**Пример использования:** \n```justcode\nif(player::is_standing_on_block([item(\"stone\"), item(\"stone\")], [location(0,0,0,0,0), location(0,0,0,0,0)], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::is_standing_on_block(blocks=[item(\"stone\"), item(\"stone\")], locations=[location(0,0,0,0,0), location(0,0,0,0,0)], only_solid=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                      | **Описание**                     |\n| :----------- | :---------------------- | :-------------------------- |\n| `blocks`          | список[Блок]                 | Блоки для проверки               |\n| `locations`       | список[Местоположение]       | Местоположение для проверки      |\n| `only_solid`      | Маркер                       | Учитывать проходимые блоки       |\n|                   | **FALSE** - Учитывать        |                                  |\n|                   | **TRUE** - Не учитывать      |                                  |","player::is_swimming":"```justcode\nplayer::is_swimming\n```\n\n**Имя:** Плавает\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, плавает ли игрок в воде или лаве.\n\n**Пример использования:** \n```justcode\nif(player::is_swimming()){\n    player::message(\"Условие верно\");\n}\n```\n\n","player::is_using_item":"```justcode\nplayer::is_using_item\n```\n\n**Имя:** Использует предмет\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, использует ли игрок лук, щит или любой другой предмет, который возможно использовать.\n\n**Пример использования:** \n```justcode\nif(player::is_using_item([item(\"stick\"), item(\"stick\")], \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::is_using_item(items=[item(\"stick\"), item(\"stick\")], comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**               |\n| :---------------- | :------------------------------------------------------------------------- | :-------------------- |\n| `items`                | список[Предмет]                                                                 | Предметы для проверки      |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения            |\n|                        | **EXACTLY** - Полное сравнение                                                  |                            |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                            |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать только количество                          |                            |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                            |","player::is_wearing_item":"```justcode\nplayer::is_wearing_item\n```\n\n**Имя:** Одет в предмет\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, одет ли игрок в предмет.\n\n**Пример использования:** \n```justcode\nif(player::is_wearing_item([item(\"stick\"), item(\"stick\")], \"ALL\", \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::is_wearing_item(items=[item(\"stick\"), item(\"stick\")], check_mode=\"ALL\", comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**              |\n| :---------------- | :------------------------------------------------------------------------- | :------------------- |\n| `items`                | список[Предмет]                                                                 | Предмет для проверки      |\n| `check_mode`           | Маркер                                                                          | Режим проверки            |\n|                        | **ALL** - Одет во все                                                           |                           |\n|                        | **ANY** - Одет во что-либо                                                      |                           |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения           |\n|                        | **EXACTLY** - Полное сравнение                                                  |                           |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                           |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать только количество                          |                           |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                           |","player::item_is_not_on_cooldown":"```justcode\nplayer::item_is_not_on_cooldown\n```\n\n**Имя:** Предмет не имеет задержку\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, не имеет ли предмет у игрока задержку, применимую к определённому типу предметов.\n\n**Пример использования:** \n```justcode\nif(player::item_is_not_on_cooldown([item(\"stick\"), item(\"stick\")])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::item_is_not_on_cooldown(items=[item(\"stick\"), item(\"stick\")]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**               |\n| :------ | :-------------- | :-------------------- |\n| `items`      | список[Предмет]      | Предметы для проверки      |","player::name_equals":"```justcode\nplayer::name_equals\n```\n\n**Имя:** Имя равно\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равно ли имя игрока имени в сундуке.\n\n**Пример использования:** \n```justcode\nif(player::name_equals([\"names_or_uuids\", \"names_or_uuids\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nplayer::name_equals(names_or_uuids=[\"names_or_uuids\", \"names_or_uuids\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**            | **Описание**                     |\n| :--------------- | :------------ | :-------------------------- |\n| `names_or_uuids`      | список[Текст]      | Имена или UUID для проверки      |","player::text_filtering_enabled":"```justcode\nplayer::text_filtering_enabled\n```\n\n**Имя:** Имеет фильтр слов\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, включен ли фильтр слов от Mojang у игрока.\n\n**Пример использования:** \n```justcode\nif(player::text_filtering_enabled()){\n    player::message(\"Условие верно\");\n}\n```\n\n","variable::block_is_solid":"```justcode\nvariable::block_is_solid\n```\n\n**Имя:** Блок является полным\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли указанный блок полным.\n\n**Пример использования:** \n```justcode\nif(variable::block_is_solid(item(\"stone\"))){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stone\").block_is_solid()){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::block_is_solid(block=item(\"stone\")){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**           |\n| :------ | :------ | :---------------- |\n| `block`      | Блок         | Блок для проверки      |",".block_is_solid":"```justcode\nvariable::block_is_solid\n```\n\n**Имя:** Блок является полным\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли указанный блок полным.\n\n**Пример использования:** \n```justcode\nif(variable::block_is_solid(item(\"stone\"))){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stone\").block_is_solid()){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::block_is_solid(block=item(\"stone\")){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**           |\n| :------ | :------ | :---------------- |\n| `block`      | Блок         | Блок для проверки      |","variable::is_dummy":"```justcode\nvariable::is_dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nif(variable::is_dummy()){\n    player::message(\"Условие верно\");\n}\n```\n\n","variable::equals":"```justcode\nvariable::equals\n```\n\n**Имя:** Равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равна ли переменная хотя бы одному из сравниваемых значений.\n\n**Пример использования:** \n```justcode\nif(variable::equals(\"any value\", [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".equals([\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::equals(value=\"any value\", compare=[\"any value\", \"any value\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                     | **Описание**                  |\n| :-------- | :--------------------- | :----------------------- |\n| `value`        | Любое значение              | Переменная для сравнения      |\n| `compare`      | список[Любое значение]      | Сравниваемые значения         |",".equals":"```justcode\nvariable::equals\n```\n\n**Имя:** Равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равна ли переменная хотя бы одному из сравниваемых значений.\n\n**Пример использования:** \n```justcode\nif(variable::equals(\"any value\", [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".equals([\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::equals(value=\"any value\", compare=[\"any value\", \"any value\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                     | **Описание**                  |\n| :-------- | :--------------------- | :----------------------- |\n| `value`        | Любое значение              | Переменная для сравнения      |\n| `compare`      | список[Любое значение]      | Сравниваемые значения         |","variable::exists":"```justcode\nvariable::exists\n```\n\n**Имя:** Переменная существует\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, существует ли выбранная переменная.\n\n**Пример использования:** \n```justcode\nif(variable::exists(`variable`)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`variable`.exists()){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::exists(variable=`variable`){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                 |\n| :--------- | :--------- | :---------------------- |\n| `variable`      | Переменная      | Переменная для проверки      |",".exists":"```justcode\nvariable::exists\n```\n\n**Имя:** Переменная существует\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, существует ли выбранная переменная.\n\n**Пример использования:** \n```justcode\nif(variable::exists(`variable`)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`variable`.exists()){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::exists(variable=`variable`){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                 |\n| :--------- | :--------- | :---------------------- |\n| `variable`      | Переменная      | Переменная для проверки      |","variable::greater":"```justcode\nvariable::greater\n```\n\n**Имя:** Больше\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, больше ли числовая переменная указанного значения.\n\n**Пример использования:** \n```justcode\nif(variable::greater(1, 2)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif((1).greater(2)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::greater(value=1, compare=2){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**                 |\n| :-------- | :------ | :---------------------- |\n| `value`        | Число        | Сравниваемая переменная      |\n| `compare`      | Число        | Сравниваемое значение        |",".greater":"```justcode\nvariable::greater\n```\n\n**Имя:** Больше\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, больше ли числовая переменная указанного значения.\n\n**Пример использования:** \n```justcode\nif(variable::greater(1, 2)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif((1).greater(2)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::greater(value=1, compare=2){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**                 |\n| :-------- | :------ | :---------------------- |\n| `value`        | Число        | Сравниваемая переменная      |\n| `compare`      | Число        | Сравниваемое значение        |","variable::greater_or_equals":"```justcode\nvariable::greater_or_equals\n```\n\n**Имя:** Больше или равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, больше или равна ли числовая переменная указанного значения.\n\n**Пример использования:** \n```justcode\nif(variable::greater_or_equals(1, 2)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif((1).greater_or_equals(2)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::greater_or_equals(value=1, compare=2){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**                 |\n| :-------- | :------ | :---------------------- |\n| `value`        | Число        | Сравниваемая переменная      |\n| `compare`      | Число        | Сравниваемое значение        |",".greater_or_equals":"```justcode\nvariable::greater_or_equals\n```\n\n**Имя:** Больше или равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, больше или равна ли числовая переменная указанного значения.\n\n**Пример использования:** \n```justcode\nif(variable::greater_or_equals(1, 2)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif((1).greater_or_equals(2)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::greater_or_equals(value=1, compare=2){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**                 |\n| :-------- | :------ | :---------------------- |\n| `value`        | Число        | Сравниваемая переменная      |\n| `compare`      | Число        | Сравниваемое значение        |","variable::in_range":"```justcode\nvariable::in_range\n```\n\n**Имя:** В диапазоне\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли переменная в указанном диапазоне.\n**Работает с:**\\\n&nbsp;&nbsp;Числами\\\n&nbsp;&nbsp;Местоположениями\n\n**Пример использования:** \n```justcode\nif(variable::in_range(\"any value\", \"any value\", \"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".in_range(\"any value\", \"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::in_range(value=\"any value\", min=\"any value\", max=\"any value\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**                 |\n| :------ | :------------- | :---------------------- |\n| `value`      | Любое значение      | Сравниваемая переменная      |\n| `min`        | Любое значение      | Минимальное значение         |\n| `max`        | Любое значение      | Максимальное значение        |",".in_range":"```justcode\nvariable::in_range\n```\n\n**Имя:** В диапазоне\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли переменная в указанном диапазоне.\n**Работает с:**\\\n&nbsp;&nbsp;Числами\\\n&nbsp;&nbsp;Местоположениями\n\n**Пример использования:** \n```justcode\nif(variable::in_range(\"any value\", \"any value\", \"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".in_range(\"any value\", \"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::in_range(value=\"any value\", min=\"any value\", max=\"any value\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**                 |\n| :------ | :------------- | :---------------------- |\n| `value`      | Любое значение      | Сравниваемая переменная      |\n| `min`        | Любое значение      | Минимальное значение         |\n| `max`        | Любое значение      | Максимальное значение        |","variable::is_type":"```justcode\nvariable::is_type\n```\n\n**Имя:** Тип переменной равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли тип значения переменной указанному.\n\n**Пример использования:** \n```justcode\nif(variable::is_type(\"any value\", \"ARRAY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".is_type(\"ARRAY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::is_type(value=\"any value\", variable_type=\"ARRAY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                            | **Описание**                 |\n| :-------------- | :---------------------------- | :---------------------- |\n| `value`              | Любое значение                     | Переменная для проверки      |\n| `variable_type`      | Маркер                             | Тип переменной               |\n|                      | **ARRAY** - Список                 |                              |\n|                      | **ITEM** - Предмет                 |                              |\n|                      | **LOCATION** - Местоположение      |                              |\n|                      | **MAP** - Словарь                  |                              |\n|                      | **NUMBER** - Число                 |                              |\n|                      | **PARTICLE** - Частица             |                              |\n|                      | **POTION** - Зелье                 |                              |\n|                      | **SOUND** - Звук                   |                              |\n|                      | **TEXT** - Текст                   |                              |\n|                      | **VECTOR** - Вектор                |                              |",".is_type":"```justcode\nvariable::is_type\n```\n\n**Имя:** Тип переменной равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли тип значения переменной указанному.\n\n**Пример использования:** \n```justcode\nif(variable::is_type(\"any value\", \"ARRAY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".is_type(\"ARRAY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::is_type(value=\"any value\", variable_type=\"ARRAY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                            | **Описание**                 |\n| :-------------- | :---------------------------- | :---------------------- |\n| `value`              | Любое значение                     | Переменная для проверки      |\n| `variable_type`      | Маркер                             | Тип переменной               |\n|                      | **ARRAY** - Список                 |                              |\n|                      | **ITEM** - Предмет                 |                              |\n|                      | **LOCATION** - Местоположение      |                              |\n|                      | **MAP** - Словарь                  |                              |\n|                      | **NUMBER** - Число                 |                              |\n|                      | **PARTICLE** - Частица             |                              |\n|                      | **POTION** - Зелье                 |                              |\n|                      | **SOUND** - Звук                   |                              |\n|                      | **TEXT** - Текст                   |                              |\n|                      | **VECTOR** - Вектор                |                              |","variable::item_equals":"```justcode\nvariable::item_equals\n```\n\n**Имя:** Предмет равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равна ли предметная переменная хотя бы одной из указанных.\n\n**Пример использования:** \n```justcode\nif(variable::item_equals(item(\"stick\"), [item(\"stick\"), item(\"stick\")], \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stick\").item_equals([item(\"stick\"), item(\"stick\")], \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::item_equals(value=item(\"stick\"), compare=[item(\"stick\"), item(\"stick\")], comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**                          |\n| :---------------- | :------------------------------------------------------------------------- | :------------------------------- |\n| `value`                | Предмет                                                                         | Сравниваемая переменная предмета      |\n| `compare`              | список[Предмет]                                                                 | Сравниваемые значения                 |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения                       |\n|                        | **EXACTLY** - Полное сравнение                                                  |                                       |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                                       |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать количество                                 |                                       |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                                       |",".item_equals":"```justcode\nvariable::item_equals\n```\n\n**Имя:** Предмет равен\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равна ли предметная переменная хотя бы одной из указанных.\n\n**Пример использования:** \n```justcode\nif(variable::item_equals(item(\"stick\"), [item(\"stick\"), item(\"stick\")], \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stick\").item_equals([item(\"stick\"), item(\"stick\")], \"EXACTLY\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::item_equals(value=item(\"stick\"), compare=[item(\"stick\"), item(\"stick\")], comparison_mode=\"EXACTLY\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                                         | **Описание**                          |\n| :---------------- | :------------------------------------------------------------------------- | :------------------------------- |\n| `value`                | Предмет                                                                         | Сравниваемая переменная предмета      |\n| `compare`              | список[Предмет]                                                                 | Сравниваемые значения                 |\n| `comparison_mode`      | Маркер                                                                          | Режим сравнения                       |\n|                        | **EXACTLY** - Полное сравнение                                                  |                                       |\n|                        | **IGNORE_DURABILITY_AND_STACK_SIZE** - Игнорировать количество и прочность      |                                       |\n|                        | **IGNORE_STACK_SIZE** - Игнорировать количество                                 |                                       |\n|                        | **TYPE_ONLY** - Только тип предмета                                             |                                       |","variable::item_has_enchantment":"```justcode\nvariable::item_has_enchantment\n```\n\n**Имя:** Предмет имеет зачарование\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли предметная переменная указанное зачарование определённого уровня.\n\n**Пример использования:** \n```justcode\nif(variable::item_has_enchantment(item(\"stick\"), \"enchant\", 1)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stick\").item_has_enchantment(\"enchant\", 1)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::item_has_enchantment(item=item(\"stick\"), enchant=\"enchant\", level=1){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**               |\n| :-------- | :------ | :-------------------- |\n| `item`         | Предмет      | Предметная переменная      |\n| `enchant`      | Текст        | Ключ зачарования           |\n| `level`        | Число        | Уровень                    |",".item_has_enchantment":"```justcode\nvariable::item_has_enchantment\n```\n\n**Имя:** Предмет имеет зачарование\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли предметная переменная указанное зачарование определённого уровня.\n\n**Пример использования:** \n```justcode\nif(variable::item_has_enchantment(item(\"stick\"), \"enchant\", 1)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stick\").item_has_enchantment(\"enchant\", 1)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::item_has_enchantment(item=item(\"stick\"), enchant=\"enchant\", level=1){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**               |\n| :-------- | :------ | :-------------------- |\n| `item`         | Предмет      | Предметная переменная      |\n| `enchant`      | Текст        | Ключ зачарования           |\n| `level`        | Число        | Уровень                    |","variable::item_has_tag":"```justcode\nvariable::item_has_tag\n```\n\n**Имя:** Предмет имеет тег\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли предметная переменная указанный тег с выбранным значением.\n\n**Пример использования:** \n```justcode\nif(variable::item_has_tag(item(\"stick\"), \"tag\", \"value\", \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stick\").item_has_tag(\"tag\", \"value\", \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::item_has_tag(item=item(\"stick\"), tag=\"tag\", value=\"value\", compare_type=\"CONTAINS\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                               | **Описание**               |\n| :------------- | :------------------------------- | :-------------------- |\n| `item`              | Предмет                               | Предметная переменная      |\n| `tag`               | Текст                                 | Имя тега                   |\n| `value`             | Текст                                 | Значение тега              |\n| `compare_type`      | Маркер                                | Тип сравнения              |\n|                     | **CONTAINS** - Содержит               |                            |\n|                     | **ENDS_WITH** - Заканчивается на      |                            |\n|                     | **EQUALS** - Точное соответствие      |                            |\n|                     | **STARTS_WITH** - Начинается на       |                            |",".item_has_tag":"```justcode\nvariable::item_has_tag\n```\n\n**Имя:** Предмет имеет тег\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли предметная переменная указанный тег с выбранным значением.\n\n**Пример использования:** \n```justcode\nif(variable::item_has_tag(item(\"stick\"), \"tag\", \"value\", \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stick\").item_has_tag(\"tag\", \"value\", \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::item_has_tag(item=item(\"stick\"), tag=\"tag\", value=\"value\", compare_type=\"CONTAINS\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                               | **Описание**               |\n| :------------- | :------------------------------- | :-------------------- |\n| `item`              | Предмет                               | Предметная переменная      |\n| `tag`               | Текст                                 | Имя тега                   |\n| `value`             | Текст                                 | Значение тега              |\n| `compare_type`      | Маркер                                | Тип сравнения              |\n|                     | **CONTAINS** - Содержит               |                            |\n|                     | **ENDS_WITH** - Заканчивается на      |                            |\n|                     | **EQUALS** - Точное соответствие      |                            |\n|                     | **STARTS_WITH** - Начинается на       |                            |","variable::item_is_block":"```justcode\nvariable::item_is_block\n```\n\n**Имя:** Предмет является блоком\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли указанный предмет блоком.\n\n**Пример использования:** \n```justcode\nif(variable::item_is_block(item(\"stick\"))){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stick\").item_is_block()){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::item_is_block(item=item(\"stick\")){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**              |\n| :------ | :------ | :------------------- |\n| `item`       | Предмет      | Предмет для проверки      |",".item_is_block":"```justcode\nvariable::item_is_block\n```\n\n**Имя:** Предмет является блоком\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, является ли указанный предмет блоком.\n\n**Пример использования:** \n```justcode\nif(variable::item_is_block(item(\"stick\"))){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(item(\"stick\").item_is_block()){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::item_is_block(item=item(\"stick\")){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**              |\n| :------ | :------ | :------------------- |\n| `item`       | Предмет      | Предмет для проверки      |","variable::less":"```justcode\nvariable::less\n```\n\n**Имя:** Меньше\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, меньше ли числовая переменная указанного значения.\n\n**Пример использования:** \n```justcode\nif(variable::less(1, 2)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif((1).less(2)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::less(value=1, compare=2){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**                 |\n| :-------- | :------ | :---------------------- |\n| `value`        | Число        | Сравниваемая переменная      |\n| `compare`      | Число        | Сравниваемое значение        |",".less":"```justcode\nvariable::less\n```\n\n**Имя:** Меньше\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, меньше ли числовая переменная указанного значения.\n\n**Пример использования:** \n```justcode\nif(variable::less(1, 2)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif((1).less(2)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::less(value=1, compare=2){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**                 |\n| :-------- | :------ | :---------------------- |\n| `value`        | Число        | Сравниваемая переменная      |\n| `compare`      | Число        | Сравниваемое значение        |","variable::less_or_equals":"```justcode\nvariable::less_or_equals\n```\n\n**Имя:** Меньше или равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, меньше или равна ли числовая переменная указанного значения.\n\n**Пример использования:** \n```justcode\nif(variable::less_or_equals(1, 2)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif((1).less_or_equals(2)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::less_or_equals(value=1, compare=2){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**                 |\n| :-------- | :------ | :---------------------- |\n| `value`        | Число        | Сравниваемая переменная      |\n| `compare`      | Число        | Сравниваемое значение        |",".less_or_equals":"```justcode\nvariable::less_or_equals\n```\n\n**Имя:** Меньше или равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, меньше или равна ли числовая переменная указанного значения.\n\n**Пример использования:** \n```justcode\nif(variable::less_or_equals(1, 2)){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif((1).less_or_equals(2)){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::less_or_equals(value=1, compare=2){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**                 |\n| :-------- | :------ | :---------------------- |\n| `value`        | Число        | Сравниваемая переменная      |\n| `compare`      | Число        | Сравниваемое значение        |","variable::list_contains_value":"```justcode\nvariable::list_contains_value\n```\n\n**Имя:** Список содержит значение\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, содержит ли список определённое значение.\n\n**Пример использования:** \n```justcode\nif(variable::list_contains_value(`list`, [\"any value\", \"any value\"], \"ALL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`list`.list_contains_value([\"any value\", \"any value\"], \"ALL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::list_contains_value(list=`list`, values=[\"any value\", \"any value\"], check_mode=\"ALL\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                       | **Описание**               |\n| :----------- | :----------------------- | :-------------------- |\n| `list`            | Список                        | Список для проверки        |\n| `values`          | список[Любое значение]        | Значения для проверки      |\n| `check_mode`      | Маркер                        | Режим проверки             |\n|                   | **ALL** - Все значения        |                            |\n|                   | **ANY** - Любое значение      |                            |",".list_contains_value":"```justcode\nvariable::list_contains_value\n```\n\n**Имя:** Список содержит значение\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, содержит ли список определённое значение.\n\n**Пример использования:** \n```justcode\nif(variable::list_contains_value(`list`, [\"any value\", \"any value\"], \"ALL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`list`.list_contains_value([\"any value\", \"any value\"], \"ALL\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::list_contains_value(list=`list`, values=[\"any value\", \"any value\"], check_mode=\"ALL\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                       | **Описание**               |\n| :----------- | :----------------------- | :-------------------- |\n| `list`            | Список                        | Список для проверки        |\n| `values`          | список[Любое значение]        | Значения для проверки      |\n| `check_mode`      | Маркер                        | Режим проверки             |\n|                   | **ALL** - Все значения        |                            |\n|                   | **ANY** - Любое значение      |                            |","variable::list_is_empty":"```justcode\nvariable::list_is_empty\n```\n\n**Имя:** Размер значения равен нулю\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли размер значения нулю.\n**Работает с:**\\\n&nbsp;&nbsp;Текстом\\\n&nbsp;&nbsp;Списками\\\n&nbsp;&nbsp;Словарями\n\n**Пример использования:** \n```justcode\nif(variable::list_is_empty(\"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".list_is_empty()){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::list_is_empty(list=\"any value\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**               |\n| :------ | :------------- | :-------------------- |\n| `list`       | Любое значение      | Значение для проверки      |",".list_is_empty":"```justcode\nvariable::list_is_empty\n```\n\n**Имя:** Размер значения равен нулю\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равен ли размер значения нулю.\n**Работает с:**\\\n&nbsp;&nbsp;Текстом\\\n&nbsp;&nbsp;Списками\\\n&nbsp;&nbsp;Словарями\n\n**Пример использования:** \n```justcode\nif(variable::list_is_empty(\"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".list_is_empty()){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::list_is_empty(list=\"any value\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**               |\n| :------ | :------------- | :-------------------- |\n| `list`       | Любое значение      | Значение для проверки      |","variable::list_value_equals":"```justcode\nvariable::list_value_equals\n```\n\n**Имя:** Значение элемента списка равно\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равно ли значение элемента списка хотя бы одному сравниваемому значению.\n\n**Пример использования:** \n```justcode\nif(variable::list_value_equals(`list`, 1, [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`list`.list_value_equals(1, [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::list_value_equals(list=`list`, index=1, values=[\"any value\", \"any value\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                     | **Описание**               |\n| :------- | :--------------------- | :-------------------- |\n| `list`        | Список                      | Список для проверки        |\n| `index`       | Число                       | Индекс значения            |\n| `values`      | список[Любое значение]      | Сравниваемые значения      |",".list_value_equals":"```justcode\nvariable::list_value_equals\n```\n\n**Имя:** Значение элемента списка равно\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равно ли значение элемента списка хотя бы одному сравниваемому значению.\n\n**Пример использования:** \n```justcode\nif(variable::list_value_equals(`list`, 1, [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`list`.list_value_equals(1, [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::list_value_equals(list=`list`, index=1, values=[\"any value\", \"any value\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                     | **Описание**               |\n| :------- | :--------------------- | :-------------------- |\n| `list`        | Список                      | Список для проверки        |\n| `index`       | Число                       | Индекс значения            |\n| `values`      | список[Любое значение]      | Сравниваемые значения      |","variable::location_in_range":"```justcode\nvariable::location_in_range\n```\n\n**Имя:** Местоположение в диапазоне\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли местоположение в указанном диапазоне.\n\n**Пример использования:** \n```justcode\nif(variable::location_in_range(location(0,0,0,0,0), location(0,0,0,0,0), location(0,0,0,0,0), \"BLOCK\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(location(0,0,0,0,0).location_in_range(location(0,0,0,0,0), location(0,0,0,0,0), \"BLOCK\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::location_in_range(value=location(0,0,0,0,0), min=location(0,0,0,0,0), max=location(0,0,0,0,0), border_handling=\"BLOCK\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                            | **Описание**                     |\n| :---------------- | :------------------------------------------------------------ | :-------------------------- |\n| `value`                | Местоположение                                                     | Местоположение для проверки      |\n| `min`                  | Местоположение                                                     | Первый угол региона              |\n| `max`                  | Местоположение                                                     | Второй угол региона              |\n| `border_handling`      | Маркер                                                             | Режим проверки                   |\n|                        | **BLOCK** - Округление до координат блока                          |                                  |\n|                        | **EXACT** - Точные координаты                                      |                                  |\n|                        | **FULL_BLOCK_RANGE** - Округление до мин. и макс. угла блоков      |                                  |",".location_in_range":"```justcode\nvariable::location_in_range\n```\n\n**Имя:** Местоположение в диапазоне\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли местоположение в указанном диапазоне.\n\n**Пример использования:** \n```justcode\nif(variable::location_in_range(location(0,0,0,0,0), location(0,0,0,0,0), location(0,0,0,0,0), \"BLOCK\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(location(0,0,0,0,0).location_in_range(location(0,0,0,0,0), location(0,0,0,0,0), \"BLOCK\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::location_in_range(value=location(0,0,0,0,0), min=location(0,0,0,0,0), max=location(0,0,0,0,0), border_handling=\"BLOCK\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                            | **Описание**                     |\n| :---------------- | :------------------------------------------------------------ | :-------------------------- |\n| `value`                | Местоположение                                                     | Местоположение для проверки      |\n| `min`                  | Местоположение                                                     | Первый угол региона              |\n| `max`                  | Местоположение                                                     | Второй угол региона              |\n| `border_handling`      | Маркер                                                             | Режим проверки                   |\n|                        | **BLOCK** - Округление до координат блока                          |                                  |\n|                        | **EXACT** - Точные координаты                                      |                                  |\n|                        | **FULL_BLOCK_RANGE** - Округление до мин. и макс. угла блоков      |                                  |","variable::location_is_near":"```justcode\nvariable::location_is_near\n```\n\n**Имя:** Рядом с местоположением\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли переменная местоположения рядом с указанным местоположением.\n\n**Пример использования:** \n```justcode\nif(variable::location_is_near(location(0,0,0,0,0), 1, [location(0,0,0,0,0), location(0,0,0,0,0)], \"CIRCLE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(location(0,0,0,0,0).location_is_near(1, [location(0,0,0,0,0), location(0,0,0,0,0)], \"CIRCLE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::location_is_near(location=location(0,0,0,0,0), radius=1, check=[location(0,0,0,0,0), location(0,0,0,0,0)], shape=\"CIRCLE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**                      |\n| :--------- | :--------------------- | :--------------------------- |\n| `location`      | Местоположение              | Местоположение для проверки       |\n| `radius`        | Число                       | Радиус проверки                   |\n| `check`         | список[Местоположение]      | Местоположение центра фигуры      |\n| `shape`         | Маркер                      | Фигура                            |\n|                 | **CIRCLE** - Круг           |                                   |\n|                 | **CUBE** - Куб              |                                   |\n|                 | **SPHERE** - Сфера          |                                   |\n|                 | **SQUARE** - Квадрат        |                                   |",".location_is_near":"```justcode\nvariable::location_is_near\n```\n\n**Имя:** Рядом с местоположением\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, находится ли переменная местоположения рядом с указанным местоположением.\n\n**Пример использования:** \n```justcode\nif(variable::location_is_near(location(0,0,0,0,0), 1, [location(0,0,0,0,0), location(0,0,0,0,0)], \"CIRCLE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(location(0,0,0,0,0).location_is_near(1, [location(0,0,0,0,0), location(0,0,0,0,0)], \"CIRCLE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::location_is_near(location=location(0,0,0,0,0), radius=1, check=[location(0,0,0,0,0), location(0,0,0,0,0)], shape=\"CIRCLE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**                      |\n| :--------- | :--------------------- | :--------------------------- |\n| `location`      | Местоположение              | Местоположение для проверки       |\n| `radius`        | Число                       | Радиус проверки                   |\n| `check`         | список[Местоположение]      | Местоположение центра фигуры      |\n| `shape`         | Маркер                      | Фигура                            |\n|                 | **CIRCLE** - Круг           |                                   |\n|                 | **CUBE** - Куб              |                                   |\n|                 | **SPHERE** - Сфера          |                                   |\n|                 | **SQUARE** - Квадрат        |                                   |","variable::map_has_key":"```justcode\nvariable::map_has_key\n```\n\n**Имя:** Словарь имеет ключ\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли словарь определённый ключ.\n\n**Пример использования:** \n```justcode\nif(variable::map_has_key(`map`, \"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`map`.map_has_key(\"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::map_has_key(map=`map`, key=\"any value\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**              |\n| :------ | :------------- | :------------------- |\n| `map`        | Словарь             | Словарь для проверки      |\n| `key`        | Любое значение      | Ключ                      |",".map_has_key":"```justcode\nvariable::map_has_key\n```\n\n**Имя:** Словарь имеет ключ\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, имеет ли словарь определённый ключ.\n\n**Пример использования:** \n```justcode\nif(variable::map_has_key(`map`, \"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`map`.map_has_key(\"any value\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::map_has_key(map=`map`, key=\"any value\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**              |\n| :------ | :------------- | :------------------- |\n| `map`        | Словарь             | Словарь для проверки      |\n| `key`        | Любое значение      | Ключ                      |","variable::map_value_equals":"```justcode\nvariable::map_value_equals\n```\n\n**Имя:** Значение элемента словаря равно\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равно ли значение элемента словаря по ключу хотя бы одному сравниваемому значению.\n\n**Пример использования:** \n```justcode\nif(variable::map_value_equals(`map`, \"any value\", [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`map`.map_value_equals(\"any value\", [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::map_value_equals(map=`map`, key=\"any value\", values=[\"any value\", \"any value\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                     | **Описание**               |\n| :------- | :--------------------- | :-------------------- |\n| `map`         | Словарь                     | Словарь для проверки       |\n| `key`         | Любое значение              | Ключ                       |\n| `values`      | список[Любое значение]      | Сравниваемые значения      |",".map_value_equals":"```justcode\nvariable::map_value_equals\n```\n\n**Имя:** Значение элемента словаря равно\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, равно ли значение элемента словаря по ключу хотя бы одному сравниваемому значению.\n\n**Пример использования:** \n```justcode\nif(variable::map_value_equals(`map`, \"any value\", [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(`map`.map_value_equals(\"any value\", [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::map_value_equals(map=`map`, key=\"any value\", values=[\"any value\", \"any value\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                     | **Описание**               |\n| :------- | :--------------------- | :-------------------- |\n| `map`         | Словарь                     | Словарь для проверки       |\n| `key`         | Любое значение              | Ключ                       |\n| `values`      | список[Любое значение]      | Сравниваемые значения      |","variable::not_equals":"```justcode\nvariable::not_equals\n```\n\n**Имя:** Не равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, не равна ли переменная всем сравниваемым значениям.\n\n**Пример использования:** \n```justcode\nif(variable::not_equals(\"any value\", [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".not_equals([\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::not_equals(value=\"any value\", compare=[\"any value\", \"any value\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                     | **Описание**                 |\n| :-------- | :--------------------- | :---------------------- |\n| `value`        | Любое значение              | Сравниваемая переменная      |\n| `compare`      | список[Любое значение]      | Сравниваемые значения        |",".not_equals":"```justcode\nvariable::not_equals\n```\n\n**Имя:** Не равна\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, не равна ли переменная всем сравниваемым значениям.\n\n**Пример использования:** \n```justcode\nif(variable::not_equals(\"any value\", [\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"any value\".not_equals([\"any value\", \"any value\"])){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::not_equals(value=\"any value\", compare=[\"any value\", \"any value\"]){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                     | **Описание**                 |\n| :-------- | :--------------------- | :---------------------- |\n| `value`        | Любое значение              | Сравниваемая переменная      |\n| `compare`      | список[Любое значение]      | Сравниваемые значения        |","variable::range_intersects_range":"```justcode\nvariable::range_intersects_range\n```\n\n**Имя:** Регион пересекается с регионом\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, пересекается ли один регион с другим.\n\n**Пример использования:** \n```justcode\nif(variable::range_intersects_range(location(0,0,0,0,0), location(0,0,0,0,0), location(0,0,0,0,0), location(0,0,0,0,0), \"CONTAINS\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::range_intersects_range(min1=location(0,0,0,0,0), max1=location(0,0,0,0,0), min2=location(0,0,0,0,0), max2=location(0,0,0,0,0), check_type=\"CONTAINS\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                          | **Описание**                     |\n| :----------- | :-------------------------- | :-------------------------- |\n| `min1`            | Местоположение                   | Первый угол первого региона      |\n| `max1`            | Местоположение                   | Второй угол первого региона      |\n| `min2`            | Местоположение                   | Первый угол второго региона      |\n| `max2`            | Местоположение                   | Второй угол второго региона      |\n| `check_type`      | Маркер                           | Тип проверки                     |\n|                   | **CONTAINS** - Содержит          |                                  |\n|                   | **OVERLAPS** - Пересекается      |                                  |","variable::text_contains":"```justcode\nvariable::text_contains\n```\n\n**Имя:** Текст содержит\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, содержит ли текстовая переменная указанный текст.\n\n**Пример использования:** \n```justcode\nif(variable::text_contains(\"value\", [\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"value\".text_contains([\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::text_contains(value=\"value\", compare=[\"compare\", \"compare\"], ignore_case=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**                 |\n| :------------ | :-------------- | :---------------------- |\n| `value`            | Текст                | Переменная для проверки      |\n| `compare`          | список[Текст]        | Текст для проверки           |\n| `ignore_case`      | Маркер               | Игнорировать регистр         |\n|                    | **FALSE** - Нет      |                              |\n|                    | **TRUE** - Да        |                              |",".text_contains":"```justcode\nvariable::text_contains\n```\n\n**Имя:** Текст содержит\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, содержит ли текстовая переменная указанный текст.\n\n**Пример использования:** \n```justcode\nif(variable::text_contains(\"value\", [\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"value\".text_contains([\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::text_contains(value=\"value\", compare=[\"compare\", \"compare\"], ignore_case=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**                 |\n| :------------ | :-------------- | :---------------------- |\n| `value`            | Текст                | Переменная для проверки      |\n| `compare`          | список[Текст]        | Текст для проверки           |\n| `ignore_case`      | Маркер               | Игнорировать регистр         |\n|                    | **FALSE** - Нет      |                              |\n|                    | **TRUE** - Да        |                              |","variable::text_ends_with":"```justcode\nvariable::text_ends_with\n```\n\n**Имя:** Текст заканчивается на\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, заканчивается ли текстовая переменная на указанный текст.\n\n**Пример использования:** \n```justcode\nif(variable::text_ends_with(\"value\", [\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"value\".text_ends_with([\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::text_ends_with(value=\"value\", compare=[\"compare\", \"compare\"], ignore_case=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**                           |\n| :------------ | :-------------- | :-------------------------------- |\n| `value`            | Текст                | Текстовая переменная для проверки      |\n| `compare`          | список[Текст]        | Текст для сравнения                    |\n| `ignore_case`      | Маркер               | Игнорировать регистр                   |\n|                    | **FALSE** - Нет      |                                        |\n|                    | **TRUE** - Да        |                                        |",".text_ends_with":"```justcode\nvariable::text_ends_with\n```\n\n**Имя:** Текст заканчивается на\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, заканчивается ли текстовая переменная на указанный текст.\n\n**Пример использования:** \n```justcode\nif(variable::text_ends_with(\"value\", [\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"value\".text_ends_with([\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::text_ends_with(value=\"value\", compare=[\"compare\", \"compare\"], ignore_case=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**                           |\n| :------------ | :-------------- | :-------------------------------- |\n| `value`            | Текст                | Текстовая переменная для проверки      |\n| `compare`          | список[Текст]        | Текст для сравнения                    |\n| `ignore_case`      | Маркер               | Игнорировать регистр                   |\n|                    | **FALSE** - Нет      |                                        |\n|                    | **TRUE** - Да        |                                        |","variable::text_matches":"```justcode\nvariable::text_matches\n```\n\n**Имя:** Текст совпадает\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, совпадает ли текстовая переменная с указанным текстом или регулярным выражением (RegEx).\n\n**Пример использования:** \n```justcode\nif(variable::text_matches(\"match\", [\"values\", \"values\"], \"FALSE\", \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"match\".text_matches([\"values\", \"values\"], \"FALSE\", \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::text_matches(match=\"match\", values=[\"values\", \"values\"], regular_expressions=\"FALSE\", ignore_case=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                    | **Тип**                              | **Описание**                           |\n| :-------------------- | :------------------------------ | :-------------------------------- |\n| `match`                    | Текст                                | Текст или регулярное выражение         |\n| `values`                   | список[Текст]                        | Текстовые переменные для проверки      |\n| `regular_expressions`      | Маркер                               | Способ проверки                        |\n|                            | **FALSE** - Текст                    |                                        |\n|                            | **TRUE** - Регулярное выражение      |                                        |\n| `ignore_case`              | Маркер                               | Игнорировать регистр                   |\n|                            | **FALSE** - Нет                      |                                        |\n|                            | **TRUE** - Да                        |                                        |",".text_matches":"```justcode\nvariable::text_matches\n```\n\n**Имя:** Текст совпадает\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, совпадает ли текстовая переменная с указанным текстом или регулярным выражением (RegEx).\n\n**Пример использования:** \n```justcode\nif(variable::text_matches(\"match\", [\"values\", \"values\"], \"FALSE\", \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"match\".text_matches([\"values\", \"values\"], \"FALSE\", \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::text_matches(match=\"match\", values=[\"values\", \"values\"], regular_expressions=\"FALSE\", ignore_case=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                    | **Тип**                              | **Описание**                           |\n| :-------------------- | :------------------------------ | :-------------------------------- |\n| `match`                    | Текст                                | Текст или регулярное выражение         |\n| `values`                   | список[Текст]                        | Текстовые переменные для проверки      |\n| `regular_expressions`      | Маркер                               | Способ проверки                        |\n|                            | **FALSE** - Текст                    |                                        |\n|                            | **TRUE** - Регулярное выражение      |                                        |\n| `ignore_case`              | Маркер                               | Игнорировать регистр                   |\n|                            | **FALSE** - Нет                      |                                        |\n|                            | **TRUE** - Да                        |                                        |","variable::text_starts_with":"```justcode\nvariable::text_starts_with\n```\n\n**Имя:** Текст начинается с\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, начинается ли текстовая переменная с указанного текста.\n\n**Пример использования:** \n```justcode\nif(variable::text_starts_with(\"value\", [\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"value\".text_starts_with([\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::text_starts_with(value=\"value\", compare=[\"compare\", \"compare\"], ignore_case=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**                           |\n| :------------ | :-------------- | :-------------------------------- |\n| `value`            | Текст                | Текстовая переменная для проверки      |\n| `compare`          | список[Текст]        | Текст для сравнения                    |\n| `ignore_case`      | Маркер               | Игнорировать регистр                   |\n|                    | **FALSE** - Нет      |                                        |\n|                    | **TRUE** - Да        |                                        |",".text_starts_with":"```justcode\nvariable::text_starts_with\n```\n\n**Имя:** Текст начинается с\\\n**Тип:** Действие, проверяющее условие\\\n**Описание:** Проверяет, начинается ли текстовая переменная с указанного текста.\n\n**Пример использования:** \n```justcode\nif(variable::text_starts_with(\"value\", [\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или от объекта\n\nif(\"value\".text_starts_with([\"compare\", \"compare\"], \"FALSE\")){\n    player::message(\"Условие верно\");\n}\n\n//Или в сухую по ключам\n\nvariable::text_starts_with(value=\"value\", compare=[\"compare\", \"compare\"], ignore_case=\"FALSE\"){\n    player::message(\"Условие верно\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**                           |\n| :------------ | :-------------- | :-------------------------------- |\n| `value`            | Текст                | Текстовая переменная для проверки      |\n| `compare`          | список[Текст]        | Текст для сравнения                    |\n| `ignore_case`      | Маркер               | Игнорировать регистр                   |\n|                    | **FALSE** - Нет      |                                        |\n|                    | **TRUE** - Да        |                                        |","player::add_inventory_menu_row":"```justcode\nplayer::add_inventory_menu_row\n```\n\n**Имя:** Добавить строку меню\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет строку с указанными предметами в инвентаре типа \\\"Сундук\\\".\n\n**Пример использования:** \n```justcode\nplayer::add_inventory_menu_row([item(\"stick\"), item(\"stick\")], \"BUTTON\");\n\n//Или в сухую по ключам\n\nplayer::add_inventory_menu_row(items=[item(\"stick\"), item(\"stick\")], position=\"BUTTON\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                 | **Описание**        |\n| :--------- | :--------------------------------- | :------------- |\n| `items`         | список[Предмет]                         | Предметы            |\n| `position`      | Маркер                                  | Позиция строки      |\n|                 | **BUTTON** - Добавить строку снизу      |                     |\n|                 | **TOP** - Добавить строку сверху        |                     |","player::allow_placing_breaking_blocks":"```justcode\nplayer::allow_placing_breaking_blocks\n```\n\n**Имя:** None\\\n**Тип:** Действие без значения\\\n**Описание:** None\n\n**Пример использования:** \n```justcode\nplayer::allow_placing_breaking_blocks([item(\"stone\"), item(\"stone\")], \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::allow_placing_breaking_blocks(blocks=[item(\"stone\"), item(\"stone\")], allow=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**               | **Описание**      |\n| :------- | :--------------- | :----------- |\n| `blocks`      | список[Блок]          | None              |\n| `allow`       | Маркер                | None              |\n|               | **FALSE** - None      |                   |\n|               | **TRUE** - None       |                   |","player::boost_elytra":"```justcode\nplayer::boost_elytra\n```\n\n**Имя:** Ускорить полёт на Элитрах\\\n**Тип:** Действие без значения\\\n**Описание:** Ускоряет полёт игрока на Элитрах с силой указанного фейерверка.\n\n**Пример использования:** \n```justcode\nplayer::boost_elytra(item(\"stick\"));\n\n//Или в сухую по ключам\n\nplayer::boost_elytra(firework=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**                 |\n| :--------- | :------ | :---------------------- |\n| `firework`      | Предмет      | Фейерверк для ускорения      |","player::clear_chat":"```justcode\nplayer::clear_chat\n```\n\n**Имя:** Очистить чат\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет все сообщения из окна чата выбранных игроков.\n\n**Пример использования:** \n```justcode\nplayer::clear_chat();\n```\n\n","player::clear_debug_markers":"```justcode\nplayer::clear_debug_markers\n```\n\n**Имя:** Удалить отладочные маркеры\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет все отладочные маркеры для игрока.\n\n**Пример использования:** \n```justcode\nplayer::clear_debug_markers();\n```\n\n","player::clear_ender_chest_contents":"```justcode\nplayer::clear_ender_chest_contents\n```\n\n**Имя:** Очистить содержимое Эндер-сундука\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает предметы в инвентаре Эндер-сундука игрока.\n\n**Пример использования:** \n```justcode\nplayer::clear_ender_chest_contents();\n```\n\n","player::clear_inventory":"```justcode\nplayer::clear_inventory\n```\n\n**Имя:** Очистить инвентарь\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает инвентарь игрока.\n\n**Пример использования:** \n```justcode\nplayer::clear_inventory(\"ARMOR\");\n\n//Или в сухую по ключам\n\nplayer::clear_inventory(clear_mode=\"ARMOR\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                            | **Описание**       |\n| :----------- | :---------------------------- | :------------ |\n| `clear_mode`      | Маркер                             | Режим очистки      |\n|                   | **ARMOR** - Броня                  |                    |\n|                   | **ENTIRE** - Весь инвентарь        |                    |\n|                   | **HOTBAR** - Хот-бар               |                    |\n|                   | **MAIN** - Главный инвентарь       |                    |\n|                   | **UPPER** - Верхний инвентарь      |                    |","player::clear_items":"```justcode\nplayer::clear_items\n```\n\n**Имя:** Очистить предметы\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет все выбранные предметы из инвентаря игрока.\n\n**Пример использования:** \n```justcode\nplayer::clear_items([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую по ключам\n\nplayer::clear_items(items=[item(\"stick\"), item(\"stick\")]);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**              |\n| :------ | :-------------- | :------------------- |\n| `items`      | список[Предмет]      | Предметы для очистки      |","player::clear_potion_effects":"```justcode\nplayer::clear_potion_effects\n```\n\n**Имя:** Очистить эффекты\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает все эффекты у игрока.\n\n**Пример использования:** \n```justcode\nplayer::clear_potion_effects();\n```\n\n","player::close_dialog_menu":"```justcode\nplayer::close_dialog_menu\n```\n\n**Имя:** Закрыть диалоговое окно\\\n**Тип:** Действие без значения\\\n**Описание:** Закрывает текущее диалоговое окно игроку.\n\n**Пример использования:** \n```justcode\nplayer::close_dialog_menu();\n```\n\n","player::close_inventory":"```justcode\nplayer::close_inventory\n```\n\n**Имя:** Закрыть меню\\\n**Тип:** Действие без значения\\\n**Описание:** Закрывает открытое инвентарное меню игрока.\n\n**Пример использования:** \n```justcode\nplayer::close_inventory();\n```\n\n","player::damage":"```justcode\nplayer::damage\n```\n\n**Имя:** Нанести урон\\\n**Тип:** Действие без значения\\\n**Описание:** Наносит урон игроку.\n\n**Пример использования:** \n```justcode\nplayer::damage(1, \"source\");\n\n//Или в сухую по ключам\n\nplayer::damage(damage=1, source=\"source\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**                                |\n| :------- | :------ | :------------------------------------- |\n| `damage`      | Число        | Количество урона                            |\n| `source`      | Текст        | Источник урона (имя или UUID существа)      |","player::disguise_as_block":"```justcode\nplayer::disguise_as_block\n```\n\n**Имя:** Замаскировать игрока под блок\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует игрока под выбранный блок.\n\n**Пример использования:** \n```justcode\nplayer::disguise_as_block(item(\"stone\"), \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::disguise_as_block(block=item(\"stone\"), visible_to_self=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                   | **Описание**              |\n| :---------------- | :------------------- | :------------------- |\n| `block`                | Блок                      | Блок для маскировки       |\n| `visible_to_self`      | Маркер                    | Видимость для игрока      |\n|                        | **FALSE** - Не видно      |                           |\n|                        | **TRUE** - Видно          |                           |","player::disguise_as_entity":"```justcode\nplayer::disguise_as_entity\n```\n\n**Имя:** Замаскировать игрока под сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует игрока под выбранную сущность.\n\n**Пример использования:** \n```justcode\nplayer::disguise_as_entity(item(\"stick\"), \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::disguise_as_entity(entity_type=item(\"stick\"), visible_to_self=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                   | **Описание**                 |\n| :---------------- | :------------------- | :---------------------- |\n| `entity_type`          | Предмет                   | Сущность для маскировки      |\n| `visible_to_self`      | Маркер                    | Видимость для игрока         |\n|                        | **FALSE** - Не видно      |                              |\n|                        | **TRUE** - Видно          |                              |","player::disguise_as_item":"```justcode\nplayer::disguise_as_item\n```\n\n**Имя:** Замаскировать игрока под предмет\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует игрока под предмет.\n\n**Пример использования:** \n```justcode\nplayer::disguise_as_item(item(\"stick\"), \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::disguise_as_item(item=item(\"stick\"), visible_to_self=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                   | **Описание**                |\n| :---------------- | :------------------- | :--------------------- |\n| `item`                 | Предмет                   | Предмет для маскировки      |\n| `visible_to_self`      | Маркер                    | Видимость для игрока        |\n|                        | **FALSE** - Не видно      |                             |\n|                        | **TRUE** - Видно          |                             |","player::display_bell_ring":"```justcode\nplayer::display_bell_ring\n```\n\n**Имя:** Показать удар в колокол\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает игроку анимацию удара в колокол, не влияя на других игроков.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Направление \"Вниз (down)\" останавливает анимацию удара.\\\n**Работает с:**\\\n&nbsp;&nbsp;Колоколами\n\n**Пример использования:** \n```justcode\nplayer::display_bell_ring(location(0,0,0,0,0), \"DOWN\");\n\n//Или от объекта\n\nlocation(0,0,0,0,0).display_bell_ring(\"DOWN\");\n\n//Или в сухую по ключам\n\nplayer::display_bell_ring(location=location(0,0,0,0,0), direction=\"DOWN\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                        | **Описание**                 |\n| :---------- | :------------------------ | :---------------------- |\n| `location`       | Местоположение                 | Местоположение колокола      |\n| `direction`      | Маркер                         | Направление удара            |\n|                  | **DOWN** - Вниз (down)         |                              |\n|                  | **EAST** - Восток (east)       |                              |\n|                  | **NORTH** - Север (north)      |                              |\n|                  | **SOUTH** - Юг (south)         |                              |\n|                  | **WEST** - Запад (west)        |                              |",".display_bell_ring":"```justcode\nplayer::display_bell_ring\n```\n\n**Имя:** Показать удар в колокол\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает игроку анимацию удара в колокол, не влияя на других игроков.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Направление \"Вниз (down)\" останавливает анимацию удара.\\\n**Работает с:**\\\n&nbsp;&nbsp;Колоколами\n\n**Пример использования:** \n```justcode\nplayer::display_bell_ring(location(0,0,0,0,0), \"DOWN\");\n\n//Или от объекта\n\nlocation(0,0,0,0,0).display_bell_ring(\"DOWN\");\n\n//Или в сухую по ключам\n\nplayer::display_bell_ring(location=location(0,0,0,0,0), direction=\"DOWN\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                        | **Описание**                 |\n| :---------- | :------------------------ | :---------------------- |\n| `location`       | Местоположение                 | Местоположение колокола      |\n| `direction`      | Маркер                         | Направление удара            |\n|                  | **DOWN** - Вниз (down)         |                              |\n|                  | **EAST** - Восток (east)       |                              |\n|                  | **NORTH** - Север (north)      |                              |\n|                  | **SOUTH** - Юг (south)         |                              |\n|                  | **WEST** - Запад (west)        |                              |","player::display_block":"```justcode\nplayer::display_block\n```\n\n**Имя:** Показать блок\\\n**Тип:** Действие без значения\\\n**Описание:** Показать игроку блок, не влияя на других игроков.\n\n**Пример использования:** \n```justcode\nplayer::display_block([location(0,0,0,0,0), location(0,0,0,0,0)], item(\"stone\"));\n\n//Или в сухую по ключам\n\nplayer::display_block(location=[location(0,0,0,0,0), location(0,0,0,0,0)], block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**                            |\n| :--------- | :--------------------- | :--------------------------------- |\n| `location`      | список[Местоположение]      | Местоположение блока                    |\n| `block`         | Блок                        | Блок, который требуется отобразить      |","player::display_end_gateway_beam":"```justcode\nplayer::display_end_gateway_beam\n```\n\n**Имя:** Показать анимацию луча Врат Энда\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает анимацию луча Врат Энда на определённом местоположении.\n\n**Пример использования:** \n```justcode\nplayer::display_end_gateway_beam(location(0,0,0,0,0), \"DARK_PURPLE\");\n\n//Или в сухую по ключам\n\nplayer::display_end_gateway_beam(location=location(0,0,0,0,0), color=\"DARK_PURPLE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                   | **Описание**             |\n| :--------- | :----------------------------------- | :------------------ |\n| `location`      | Местоположение                            | Местоположение луча      |\n| `color`         | Маркер                                    | Цвет луча                |\n|                 | **DARK_PURPLE** - Тёмно-фиолетовый        |                          |\n|                 | **LIGHT_PURPLE** - Светло-фиолетовый      |                          |","player::display_hologram":"```justcode\nplayer::display_hologram\n```\n\n**Имя:** Показать голограмму\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает игроку голограмму. Чтобы удалить голограмму на местоположении, оставьте текст пустым.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Чтобы перенести текст на новую строку, используйте символы \\\"\\\\n\\\", к примеру\\: \\\"Строка1\\\\nСтрока2\\\".\n\n**Пример использования:** \n```justcode\nplayer::display_hologram(location(0,0,0,0,0), \"text\");\n\n//Или в сухую по ключам\n\nplayer::display_hologram(location=location(0,0,0,0,0), text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `location`      | Местоположение      | Местоположение голограммы      |\n| `text`          | Текст               | Текст голограммы               |","player::display_lightning":"```justcode\nplayer::display_lightning\n```\n\n**Имя:** Отобразить эффект молнии\\\n**Тип:** Действие без значения\\\n**Описание:** Отобразить молнию игроку, не показывая её для других игроков и не поджигая местность.\n\n**Пример использования:** \n```justcode\nplayer::display_lightning(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nplayer::display_lightning(location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**            |\n| :--------- | :------------- | :----------------- |\n| `location`      | Местоположение      | Место удара молнии      |","player::display_particle":"```justcode\nplayer::display_particle\n```\n\n**Имя:** Отобразить эффект частицы\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает игроку эффект частицы на выбранном местоположении.\n\n**Пример использования:** \n```justcode\nplayer::display_particle([particle(\"fire\"), particle(\"fire\")], [location(0,0,0,0,0), location(0,0,0,0,0)]);\n\n//Или в сухую по ключам\n\nplayer::display_particle(particle=[particle(\"fire\"), particle(\"fire\")], location=[location(0,0,0,0,0), location(0,0,0,0,0)]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**                       |\n| :--------- | :--------------------- | :---------------------------- |\n| `particle`      | список[Эффект частиц]       | Эффект частиц для отображения      |\n| `location`      | список[Местоположение]      | Местоположение эффекта             |","player::display_particle_circle":"```justcode\nplayer::display_particle_circle\n```\n\n**Имя:** Отобразить окружность частиц\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает игроку окружность из эффекта частиц с указанными параметрами.\n\n**Пример использования:** \n```justcode\nplayer::display_particle_circle(particle(\"fire\"), location(0,0,0,0,0), 1, 2, 3, vector(0,0,0), \"DEGREES\");\n\n//Или в сухую по ключам\n\nplayer::display_particle_circle(particle=particle(\"fire\"), center=location(0,0,0,0,0), radius=1, points=2, start_angle=3, perpendicular=vector(0,0,0), angle_unit=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                    | **Описание**                                                       |\n| :-------------- | :-------------------- | :------------------------------------------------------------ |\n| `particle`           | Эффект частиц              | Эффект частиц для отображения                                      |\n| `center`             | Местоположение             | Центр окружности                                                   |\n| `radius`             | Число                      | Радиус круга                                                       |\n| `points`             | Число                      | Количество точек круга                                             |\n| `start_angle`        | Число                      | Начальный угол                                                     |\n| `perpendicular`      | Вектор                     | Нормаль плоскости, к которой окружность будет перпендикулярна      |\n| `angle_unit`         | Маркер                     | Тип угла                                                           |\n|                      | **DEGREES** - Градусы      |                                                                    |\n|                      | **RADIANS** - Радианы      |                                                                    |","player::display_particle_cube":"```justcode\nplayer::display_particle_cube\n```\n\n**Имя:** Отобразить куб частиц\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает игроку куб из эффекта частиц с указанными параметрами.\n\n**Пример использования:** \n```justcode\nplayer::display_particle_cube(particle(\"fire\"), location(0,0,0,0,0), location(0,0,0,0,0), 1, \"HOLLOW\");\n\n//Или в сухую по ключам\n\nplayer::display_particle_cube(particle=particle(\"fire\"), first_corner=location(0,0,0,0,0), second_corner=location(0,0,0,0,0), spacing=1, type=\"HOLLOW\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                      | **Описание**                       |\n| :-------------- | :---------------------- | :---------------------------- |\n| `particle`           | Эффект частиц                | Эффект частиц для отображения      |\n| `first_corner`       | Местоположение               | Первый угол куба                   |\n| `second_corner`      | Местоположение               | Второй угол куба                   |\n| `spacing`            | Число                        | Расстояние между частицами         |\n| `type`               | Маркер                       | Тип куба                           |\n|                      | **HOLLOW** - Полый           |                                    |\n|                      | **SOLID** - Заполненный      |                                    |\n|                      | **WIREFRAME** - Каркас       |                                    |","player::display_particle_line":"```justcode\nplayer::display_particle_line\n```\n\n**Имя:** Отобразить линию частиц\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает игроку линию эффекта частиц от начального местоположения до конечного с определённым расстоянием.\n\n**Пример использования:** \n```justcode\nplayer::display_particle_line(particle(\"fire\"), location(0,0,0,0,0), location(0,0,0,0,0), 1, \"DISTANCE\");\n\n//Или в сухую по ключам\n\nplayer::display_particle_line(particle=particle(\"fire\"), start=location(0,0,0,0,0), end=location(0,0,0,0,0), divider=1, unit_of_measurement=\"DISTANCE\");\n```\n\n**Аргументы:**\n\n| **Имя**                    | **Тип**                           | **Описание**                               |\n| :-------------------- | :--------------------------- | :------------------------------------ |\n| `particle`                 | Эффект частиц                     | Эффект частиц для отображения              |\n| `start`                    | Местоположение                    | Начальное местоположение                   |\n| `end`                      | Местоположение                    | Конечное местоположение                    |\n| `divider`                  | Число                             | Количество/расстояние между частицами      |\n| `unit_of_measurement`      | Маркер                            | Тип отображения частиц                     |\n|                            | **DISTANCE** - По расстоянию      |                                            |\n|                            | **POINTS** - По количеству        |                                            |","player::display_particle_ray":"```justcode\nplayer::display_particle_ray\n```\n\n**Имя:** Отобразить луч частиц\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает игроку луч эффекта частиц от начального местоположения по указанному вектору с определённым расстоянием.\n\n**Пример использования:** \n```justcode\nplayer::display_particle_ray(particle(\"fire\"), location(0,0,0,0,0), vector(0,0,0), 1, \"DISTANCE\");\n\n//Или в сухую по ключам\n\nplayer::display_particle_ray(particle=particle(\"fire\"), start=location(0,0,0,0,0), ray=vector(0,0,0), divider=1, unit_of_measurement=\"DISTANCE\");\n```\n\n**Аргументы:**\n\n| **Имя**                    | **Тип**                           | **Описание**                               |\n| :-------------------- | :--------------------------- | :------------------------------------ |\n| `particle`                 | Эффект частиц                     | Эффект частиц для отображения              |\n| `start`                    | Местоположение                    | Начальное местоположение                   |\n| `ray`                      | Вектор                            | Направление луча                           |\n| `divider`                  | Число                             | Количество/расстояние между частицами      |\n| `unit_of_measurement`      | Маркер                            | Тип отображения частиц                     |\n|                            | **DISTANCE** - По расстоянию      |                                            |\n|                            | **POINTS** - По количеству        |                                            |","player::display_particle_sphere":"```justcode\nplayer::display_particle_sphere\n```\n\n**Имя:** Отобразить сферу частиц\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает игроку сферу из эффекта частиц с указанными параметрами.\n\n**Пример использования:** \n```justcode\nplayer::display_particle_sphere(particle(\"fire\"), location(0,0,0,0,0), 1, 2);\n\n//Или в сухую по ключам\n\nplayer::display_particle_sphere(particle=particle(\"fire\"), center=location(0,0,0,0,0), radius=1, points=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                       |\n| :--------- | :------------- | :---------------------------- |\n| `particle`      | Эффект частиц       | Эффект частиц для отображения      |\n| `center`        | Местоположение      | Центр сферы                        |\n| `radius`        | Число               | Радиус сферы                       |\n| `points`        | Число               | Количество точек сферы             |","player::display_particle_spiral":"```justcode\nplayer::display_particle_spiral\n```\n\n**Имя:** Отобразить спираль частиц\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает игроку спираль из эффекта частиц с указанными параметрами.\n\n**Пример использования:** \n```justcode\nplayer::display_particle_spiral(particle(\"fire\"), location(0,0,0,0,0), 1, 2, 3, 4, 5, \"DEGREES\");\n\n//Или в сухую по ключам\n\nplayer::display_particle_spiral(particle=particle(\"fire\"), center=location(0,0,0,0,0), distance=1, radius=2, points=3, rotations=4, start_angle=5, angle_unit=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**                       |\n| :------------ | :-------------------- | :---------------------------- |\n| `particle`         | Эффект частиц              | Эффект частиц для отображения      |\n| `center`           | Местоположение             | Центр спирали                      |\n| `distance`         | Число                      | Дистанция спирали                  |\n| `radius`           | Число                      | Радиус спирали                     |\n| `points`           | Число                      | Количество точек спирали           |\n| `rotations`        | Число                      | Количество оборотов                |\n| `start_angle`      | Число                      | Начальный угол                     |\n| `angle_unit`       | Маркер                     | Тип угла                           |\n|                    | **DEGREES** - Градусы      |                                    |\n|                    | **RADIANS** - Радианы      |                                    |","player::display_pick_up_animation":"```justcode\nplayer::display_pick_up_animation\n```\n\n**Имя:** Показать анимацию подбора предмета\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает игроку анимацию подбора предмета.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Поднимаемой сущностью могут быть предметы, сферы опыта и стрелы.\\\n&nbsp;&nbsp;Действие работает с любой сущностью, в том числе игроком.\n\n**Пример использования:** \n```justcode\nplayer::display_pick_up_animation(\"collected_name_or_uuid\", \"collector_name_or_uuid\", 1);\n\n//Или в сухую по ключам\n\nplayer::display_pick_up_animation(collected_name_or_uuid=\"collected_name_or_uuid\", collector_name_or_uuid=\"collector_name_or_uuid\", amount=1);\n```\n\n**Аргументы:**\n\n| **Имя**                       | **Тип**      | **Описание**                                  |\n| :----------------------- | :------ | :--------------------------------------- |\n| `collected_name_or_uuid`      | Текст        | Имя или UUID поднимаемой сущности             |\n| `collector_name_or_uuid`      | Текст        | Имя или UUID сущности, которая поднимает      |\n| `amount`                      | Число        | Количество поднимаемых предметов              |","player::display_sign_text":"```justcode\nplayer::display_sign_text\n```\n\n**Имя:** Показать текст таблички\\\n**Тип:** Действие без значения\\\n**Описание:** Показать игроку изменение текста таблички, не изменяя её текст для других игроков.\n\n**Пример использования:** \n```justcode\nplayer::display_sign_text(location(0,0,0,0,0), \"line_1\", \"line_2\", \"line_3\", \"line_4\");\n\n//Или в сухую по ключам\n\nplayer::display_sign_text(location=location(0,0,0,0,0), line_1=\"line_1\", line_2=\"line_2\", line_3=\"line_3\", line_4=\"line_4\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `location`      | Местоположение      | Местоположение таблички        |\n| `line_1`        | Текст               | Первая строка таблички         |\n| `line_2`        | Текст               | Вторая строка таблички         |\n| `line_3`        | Текст               | Третья строка таблички         |\n| `line_4`        | Текст               | Четвёртая строка таблички      |","player::display_vibration":"```justcode\nplayer::display_vibration\n```\n\n**Имя:** Отобразить частицу вибрации\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает игроку частицу вибрации движущуюся с одной точки на другую.\n\n**Пример использования:** \n```justcode\nplayer::display_vibration(location(0,0,0,0,0), location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nplayer::display_vibration(from=location(0,0,0,0,0), to=location(0,0,0,0,0), destination_time=1);\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**             | **Описание**                                  |\n| :----------------- | :------------- | :--------------------------------------- |\n| `from`                  | Местоположение      | Начальное местоположение                      |\n| `to`                    | Местоположение      | Конечное местоположение                       |\n| `destination_time`      | Число               | Время полёта до места назначения в тиках      |","player::dummy":"```justcode\nplayer::dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие без значения\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nplayer::dummy();\n```\n\n","player::expand_inventory_menu":"```justcode\nplayer::expand_inventory_menu\n```\n\n**Имя:** Расширить меню\\\n**Тип:** Действие без значения\\\n**Описание:** Расширяет открытое инвентарное меню игрока на выбранное количество строк и заполняет его указанными предметами.\n\n**Пример использования:** \n```justcode\nplayer::expand_inventory_menu([item(\"stick\"), item(\"stick\")], 1);\n\n//Или в сухую по ключам\n\nplayer::expand_inventory_menu(items=[item(\"stick\"), item(\"stick\")], size=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**                         |\n| :------ | :-------------- | :------------------------------ |\n| `items`      | список[Предмет]      | Предметы для заполнения              |\n| `size`       | Число                | Количество строк для расширения      |","player::face_location":"```justcode\nplayer::face_location\n```\n\n**Имя:** Повернуть к местоположению\\\n**Тип:** Действие без значения\\\n**Описание:** Поворачивает игрока в сторону к местоположению.\n\n**Пример использования:** \n```justcode\nplayer::face_location(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nplayer::face_location(location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**        |\n| :--------- | :------------- | :------------- |\n| `location`      | Местоположение      | Местоположение      |","player::force_flight_mode":"```justcode\nplayer::force_flight_mode\n```\n\n**Имя:** None\\\n**Тип:** Действие без значения\\\n**Описание:** None\n\n**Пример использования:** \n```justcode\nplayer::force_flight_mode(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::force_flight_mode(is_flying=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**               | **Описание**      |\n| :---------- | :--------------- | :----------- |\n| `is_flying`      | Маркер                | None              |\n|                  | **FALSE** - None      |                   |\n|                  | **TRUE** - None       |                   |","player::get_attribute":"```justcode\nplayer::get_attribute\n```\n\n**Имя:** Получить значение атрибута игрока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение указанного атрибута игрока и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = player::get_attribute(\"GENERIC_MAX_HEALTH\", \"VALUE\");\n\n//Или в сухую позиционно\n\nplayer::get_attribute(`variable`, \"GENERIC_MAX_HEALTH\", \"VALUE\");\n\n//Или в сухую по ключам\n\nplayer::get_attribute(variable=`variable`, attribute_type=\"GENERIC_MAX_HEALTH\", return_value=\"VALUE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                                                                           | **Описание**                   |\n| :--------------- | :------------------------------------------------------------------------------------------- | :------------------------ |\n| `variable`            | Переменная                                                                                        | Переменная для присвоения      |\n| `attribute_type`      | Маркер                                                                                            | Тип атрибута                   |\n|                       | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                                |\n|                       | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                                |\n|                       | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                                |\n|                       | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                                |\n|                       | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                                |\n|                       | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                                |\n|                       | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                                |\n|                       | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                                |\n|                       | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                                |\n|                       | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                                |\n|                       | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                                |\n|                       | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                                |\n|                       | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                                |\n|                       | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                                |\n|                       | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                                |\n|                       | **GENERIC_SCALE** - Масштаб                                                                       |                                |\n|                       | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                                |\n|                       | **GENERIC_GRAVITY** - Гравитация                                                                  |                                |\n|                       | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                                |\n|                       | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                                |\n|                       | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                                |\n|                       | **GENERIC_BURNING_TIME** - Время горения                                                          |                                |\n|                       | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                                |\n|                       | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                                |\n|                       | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                                |\n|                       | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                                |\n|                       | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                                |\n|                       | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                                |\n|                       | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                                |\n|                       | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                                |\n|                       | **TEMP_RANGE** - Расстояние приманивания                                                          |                                |\n|                       | **WAYPOINT_TRANSMIT_RANGE** - Расстояние улавливания локатором (waypoint_transmit_range)          |                                |\n|                       | **WAYPOINT_RECEIVE_RANGE** - Расстояние улавливания локатора (waypoint_receive_range)             |                                |\n|                       | **CAMERA_DISTANCE** - Расстояние камеры при виде от третьего лица                                 |                                |\n| `return_value`        | Маркер                                                                                            | Тип значения                   |\n|                       | **VALUE** - Текущее значение                                                                      |                                |\n|                       | **BASE_VALUE** - Базовое значение                                                                 |                                |\n|                       | **DEFAULT_VALUE** - Значение по умолчанию                                                         |                                |","player::get_nbt":"```justcode\nplayer::get_nbt\n```\n\n**Имя:** Получить NBT-теги игрока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает NBT-теги игрока по введенному пути и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = player::get_nbt(\"path\");\n\n//Или в сухую позиционно\n\nplayer::get_nbt(`variable`, \"path\");\n\n//Или в сухую по ключам\n\nplayer::get_nbt(variable=`variable`, path=\"path\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `path`          | Текст           | Путь                           |","player::give_experience":"```justcode\nplayer::give_experience\n```\n\n**Имя:** Прибавить уровень\\\n**Тип:** Действие без значения\\\n**Описание:** Прибавляет уровень игроку.\n\n**Пример использования:** \n```justcode\nplayer::give_experience(1, \"LEVEL\");\n\n//Или в сухую по ключам\n\nplayer::give_experience(experience=1, mode=\"LEVEL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                           | **Описание**                 |\n| :----------- | :------------------------------------------- | :---------------------- |\n| `experience`      | Число                                             | Количество для прибавки      |\n| `mode`            | Маркер                                            | Тип прибавления              |\n|                   | **LEVEL** - Как уровень                           |                              |\n|                   | **LEVEL_PERCENTAGE** - Как процент от уровня      |                              |\n|                   | **POINTS** - Как очки опыта                       |                              |","player::give_items":"```justcode\nplayer::give_items\n```\n\n**Имя:** Выдать предмет\\\n**Тип:** Действие без значения\\\n**Описание:** Выдаёт игроку предметы из сундука.\n\n**Пример использования:** \n```justcode\nplayer::give_items([item(\"stick\"), item(\"stick\")], 1);\n\n//Или в сухую по ключам\n\nplayer::give_items(items=[item(\"stick\"), item(\"stick\")], amount=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**              | **Описание**                         |\n| :------- | :-------------- | :------------------------------ |\n| `items`       | список[Предмет]      | Предметы для выдачи                  |\n| `amount`      | Число                | Количество предметов для выдачи      |","player::give_potion_effect":"```justcode\nplayer::give_potion_effect\n```\n\n**Имя:** Выдать эффект\\\n**Тип:** Действие без значения\\\n**Описание:** Выдаёт выбранные эффекты игроку.\n\n**Пример использования:** \n```justcode\nplayer::give_potion_effect([potion(\"slow_falling\"), potion(\"slow_falling\")], \"FALSE\", \"FALSE\", \"AMBIENT\");\n\n//Или в сухую по ключам\n\nplayer::give_potion_effect(potions=[potion(\"slow_falling\"), potion(\"slow_falling\")], show_icon=\"FALSE\", overwrite=\"FALSE\", particle_mode=\"AMBIENT\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                        | **Описание**                             |\n| :-------------- | :------------------------ | :---------------------------------- |\n| `potions`            | список[Зелье]                  | Эффекты для выдачи                       |\n| `show_icon`          | Маркер                         | Показывать иконку эффекта                |\n|                      | **FALSE** - Нет                |                                          |\n|                      | **TRUE** - Да                  |                                          |\n| `overwrite`          | Маркер                         | Перезаписывать существующие эффекты      |\n|                      | **FALSE** - Нет                |                                          |\n|                      | **TRUE** - Да                  |                                          |\n| `particle_mode`      | Маркер                         | Показывать частицы                       |\n|                      | **AMBIENT** - Прозрачными      |                                          |\n|                      | **NONE** - Нет                 |                                          |\n|                      | **REGULAR** - Да               |                                          |","player::give_random_item":"```justcode\nplayer::give_random_item\n```\n\n**Имя:** Выдать случайный предмет\\\n**Тип:** Действие без значения\\\n**Описание:** Выдаёт игроку случайный предмет или стак из предметов в сундуке.\n\n**Пример использования:** \n```justcode\nplayer::give_random_item([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую по ключам\n\nplayer::give_random_item(items=[item(\"stick\"), item(\"stick\")]);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**             |\n| :------ | :-------------- | :------------------ |\n| `items`      | список[Предмет]      | Предметы для выбора      |","player::heal":"```justcode\nplayer::heal\n```\n\n**Имя:** Исцелить игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Исцеляет игрока.\n\n**Пример использования:** \n```justcode\nplayer::heal(1);\n\n//Или в сухую по ключам\n\nplayer::heal(heal=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                                   |\n| :------ | :------ | :---------------------------------------- |\n| `heal`       | Число        | Количество половинок сердец для излечения      |","player::hide_entity":"```justcode\nplayer::hide_entity\n```\n\n**Имя:** Скрыть сущность игроку\\\n**Тип:** Действие без значения\\\n**Описание:** Скрывает указанную сущность для игрока.\n\n**Пример использования:** \n```justcode\nplayer::hide_entity([\"name_or_uuid\", \"name_or_uuid\"], \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::hide_entity(name_or_uuid=[\"name_or_uuid\", \"name_or_uuid\"], hide=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                    | **Описание**               |\n| :------------- | :-------------------- | :-------------------- |\n| `name_or_uuid`      | список[Текст]              | Имя или UUID сущности      |\n| `hide`              | Маркер                     | Скрытие                    |\n|                     | **FALSE** - Выключить      |                            |\n|                     | **TRUE** - Включить        |                            |","player::hide_scoreboard":"```justcode\nplayer::hide_scoreboard\n```\n\n**Имя:** Скрыть скорборд\\\n**Тип:** Действие без значения\\\n**Описание:** Скрывает текущий скорборд игрока.\n\n**Пример использования:** \n```justcode\nplayer::hide_scoreboard();\n```\n\n","player::kick":"```justcode\nplayer::kick\n```\n\n**Имя:** Выгнать игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Выгоняет игрока из мира.\n\n**Пример использования:** \n```justcode\nplayer::kick();\n```\n\n","player::launch_forward":"```justcode\nplayer::launch_forward\n```\n\n**Имя:** Запустить вперёд\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает игрока вперёд или назад по направлению взгляда в зависимости от силы.\n\n**Пример использования:** \n```justcode\nplayer::launch_forward(1, \"FALSE\", \"YAW\");\n\n//Или в сухую по ключам\n\nplayer::launch_forward(power=1, increment=\"FALSE\", launch_axis=\"YAW\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                              | **Описание**                   |\n| :------------ | :------------------------------ | :------------------------ |\n| `power`            | Число                                | Сила подбрасывания             |\n| `increment`        | Маркер                               | Учитывать текущую инерцию      |\n|                    | **FALSE** - Выключено                |                                |\n|                    | **TRUE** - Включено                  |                                |\n| `launch_axis`      | Маркер                               | Ось запуска                    |\n|                    | **YAW** - Только по горизонтали      |                                |\n|                    | **YAW_AND_PITCH** - Все оси          |                                |","player::launch_projectile":"```justcode\nplayer::launch_projectile\n```\n\n**Имя:** Запустить снаряд\\\n**Тип:** Действие без значения\\\n**Описание:** Запустить снаряд из местоположения игрока.\n\n**Пример использования:** \n```justcode\nplayer::launch_projectile(item(\"stick\"), location(0,0,0,0,0), \"name\", 1, 2, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nplayer::launch_projectile(projectile=item(\"stick\"), location=location(0,0,0,0,0), name=\"name\", speed=1, inaccuracy=2, trail=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**             | **Описание**                                          |\n| :----------- | :------------- | :----------------------------------------------- |\n| `projectile`      | Предмет             | Снаряд для запуска                                    |\n| `location`        | Местоположение      | Место запуска                                         |\n| `name`            | Текст               | Имя снаряда                                           |\n| `speed`           | Число               | Скорость снаряда                                      |\n| `inaccuracy`      | Число               | Отклонение снаряда (0, чтобы снаряд летел ровно)      |\n| `trail`           | Эффект частиц       | След, который будет оставаться за снарядом            |","player::launch_to_location":"```justcode\nplayer::launch_to_location\n```\n\n**Имя:** Запустить к местоположению\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает игрока к выбранному местоположению.\n\n**Пример использования:** \n```justcode\nplayer::launch_to_location(location(0,0,0,0,0), 1, \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::launch_to_location(location=location(0,0,0,0,0), power=1, increment=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**                   |\n| :---------- | :-------------------- | :------------------------ |\n| `location`       | Местоположение             | Конечная позиция               |\n| `power`          | Число                      | Сила запуска                   |\n| `increment`      | Маркер                     | Учитывать текущую инерцию      |\n|                  | **FALSE** - Выключено      |                                |\n|                  | **TRUE** - Включено        |                                |","player::launch_up":"```justcode\nplayer::launch_up\n```\n\n**Имя:** Подбросить вверх\\\n**Тип:** Действие без значения\\\n**Описание:** Подбрасывает игрока вверх или вниз в зависимости от силы.\n\n**Пример использования:** \n```justcode\nplayer::launch_up(1, \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::launch_up(power=1, increment=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**                   |\n| :---------- | :-------------------- | :------------------------ |\n| `power`          | Число                      | Сила подбрасывания             |\n| `increment`      | Маркер                     | Учитывать текущую инерцию      |\n|                  | **FALSE** - Выключено      |                                |\n|                  | **TRUE** - Включено        |                                |","player::leave_vehicle":"```justcode\nplayer::leave_vehicle\n```\n\n**Имя:** Высадить из транспорта\\\n**Тип:** Действие без значения\\\n**Описание:** Высаживает игрока из транспорта или существа.\n\n**Пример использования:** \n```justcode\nplayer::leave_vehicle();\n```\n\n","player::load_inventory":"```justcode\nplayer::load_inventory\n```\n\n**Имя:** Загрузить сохранённый инвентарь\\\n**Тип:** Действие без значения\\\n**Описание:** Загружает выбранный сохранённый инвентарь.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Если нет сохранённого инвентаря, инвентарь игрока будет очищен.\n\n**Пример использования:** \n```justcode\nplayer::load_inventory();\n```\n\n","player::open_book":"```justcode\nplayer::open_book\n```\n\n**Имя:** Открыть книгу\\\n**Тип:** Действие без значения\\\n**Описание:** Открывает книгу определённому игроку.\n\n**Пример использования:** \n```justcode\nplayer::open_book(item(\"stick\"));\n\n//Или в сухую по ключам\n\nplayer::open_book(book=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**            |\n| :------ | :------ | :----------------- |\n| `book`       | Предмет      | Книга для открытия      |","player::open_container_inventory":"```justcode\nplayer::open_container_inventory\n```\n\n**Имя:** Открыть меню блока\\\n**Тип:** Действие без значения\\\n**Описание:** Открывает для игрока меню блока в указанном местоположении.\n\n**Пример использования:** \n```justcode\nplayer::open_container_inventory(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nplayer::open_container_inventory(location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                           |\n| :--------- | :------------- | :-------------------------------- |\n| `location`      | Местоположение      | Местоположение блока для открытия      |","player::open_working_menu":"```justcode\nplayer::open_working_menu\n```\n\n**Имя:** Открыть функциональное меню\\\n**Тип:** Действие без значения\\\n**Описание:** Открывает для игрока меню, имеющее функционал.\n\n**Пример использования:** \n```justcode\nplayer::open_working_menu(\"title\", \"CRAFTING\");\n\n//Или в сухую по ключам\n\nplayer::open_working_menu(title=\"title\", menu_type=\"CRAFTING\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                                      | **Описание**            |\n| :---------- | :-------------------------------------- | :----------------- |\n| `title`          | Текст                                        | Название инвентаря      |\n| `menu_type`      | Маркер                                       | Тип функционала         |\n|                  | **CRAFTING** - Верстак                       |                         |\n|                  | **ANVIL** - Наковальня                       |                         |\n|                  | **SMITHING** - Кузнечный стол                |                         |\n|                  | **CARTOGRAPHY_TABLE** - Стол картографа      |                         |\n|                  | **LOOM** - Ткацкий станок                    |                         |\n|                  | **GRINDSTONE** - Точило                      |                         |\n|                  | **STONECUTTER** - Камнерез                   |                         |\n|                  | **ENCHANTMENT** - Чародейский стол           |                         |","player::play_animation_action":"```justcode\nplayer::play_animation_action\n```\n\n**Имя:** Проиграть анимацию игроку\\\n**Тип:** Действие без значения\\\n**Описание:** Проигрывает для игрока определённую анимацию.\n\n**Пример использования:** \n```justcode\nplayer::play_animation_action(\"DAMAGE\");\n\n//Или в сухую по ключам\n\nplayer::play_animation_action(animation=\"DAMAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                             | **Описание**      |\n| :---------- | :----------------------------- | :----------- |\n| `animation`      | Маркер                              | Тип анимации      |\n|                  | **DAMAGE** - Получение урона        |                   |\n|                  | **JUMPSCARE** - Древний страж       |                   |\n|                  | **TOTEM** - Тотем                   |                   |\n|                  | **WAKE_UP** - Подъём с кровати      |                   |","player::play_hurt_animation":"```justcode\nplayer::play_hurt_animation\n```\n\n**Имя:** Проиграть анимацию получения урона\\\n**Тип:** Действие без значения\\\n**Описание:** Проигрывает для игрока анимацию получения урона с определённым наклоном.\n\n**Пример использования:** \n```justcode\nplayer::play_hurt_animation(1);\n\n//Или в сухую по ключам\n\nplayer::play_hurt_animation(yaw=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                                     |\n| :------ | :------ | :------------------------------------------ |\n| `yaw`        | Число        | Угол получения урона (от 0 до 360 градусов)      |","player::play_sound":"```justcode\nplayer::play_sound\n```\n\n**Имя:** Проиграть звук\\\n**Тип:** Действие без значения\\\n**Описание:** Проигрывает звук игроку.\n\n**Пример использования:** \n```justcode\nplayer::play_sound(sound(\"entity.zombie.hurt\"), location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nplayer::play_sound(sound=sound(\"entity.zombie.hurt\"), location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**               |\n| :--------- | :------------- | :-------------------- |\n| `sound`         | Звук                | Звук для проигрывания      |\n| `location`      | Местоположение      | Местоположение звука       |","player::play_sound_from_entity":"```justcode\nplayer::play_sound_from_entity\n```\n\n**Имя:** Проиграть звук от сущности\\\n**Тип:** Действие без значения\\\n**Описание:** Проигрывает звук игроку от указанной сущности.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Стерео звуки не будут проигрываться.\n\n**Пример использования:** \n```justcode\nplayer::play_sound_from_entity(\"name_or_uuid\", [sound(\"entity.zombie.hurt\"), sound(\"entity.zombie.hurt\")]);\n\n//Или в сухую по ключам\n\nplayer::play_sound_from_entity(name_or_uuid=\"name_or_uuid\", sounds=[sound(\"entity.zombie.hurt\"), sound(\"entity.zombie.hurt\")]);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**           | **Описание**               |\n| :------------- | :----------- | :-------------------- |\n| `name_or_uuid`      | Текст             | Имя или UUID сущности      |\n| `sounds`            | список[Звук]      | Звук для проигрывания      |","player::play_sound_sequence":"```justcode\nplayer::play_sound_sequence\n```\n\n**Имя:** Проиграть последовательность звуков\\\n**Тип:** Действие без значения\\\n**Описание:** Проигрывает игроку последовательность звуков с задержкой между каждым звуком.\n\n**Пример использования:** \n```justcode\nplayer::play_sound_sequence([sound(\"entity.zombie.hurt\"), sound(\"entity.zombie.hurt\")], location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nplayer::play_sound_sequence(sounds=[sound(\"entity.zombie.hurt\"), sound(\"entity.zombie.hurt\")], location=location(0,0,0,0,0), delay=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                |\n| :--------- | :------------- | :--------------------- |\n| `sounds`        | список[Звук]        | Звуки для проигрывания      |\n| `location`      | Местоположение      | Местоположение звука        |\n| `delay`         | Число               | Задержка в тиках            |","player::randomized_teleport":"```justcode\nplayer::randomized_teleport\n```\n\n**Имя:** Случайная телепортация\\\n**Тип:** Действие без значения\\\n**Описание:** Телепортирует игрока в случайное местоположение.\n\n**Пример использования:** \n```justcode\nplayer::randomized_teleport([location(0,0,0,0,0), location(0,0,0,0,0)], \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::randomized_teleport(locations=[location(0,0,0,0,0), location(0,0,0,0,0)], keep_rotation=\"FALSE\", keep_velocity=\"FALSE\", dismount=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                     | **Описание**                      |\n| :-------------- | :--------------------- | :--------------------------- |\n| `locations`          | список[Местоположение]      | Позиции для телепорта             |\n| `keep_rotation`      | Маркер                      | Оставить текущий поворот          |\n|                      | **FALSE** - Выключено       |                                   |\n|                      | **TRUE** - Включено         |                                   |\n| `keep_velocity`      | Маркер                      | Сохранение инерции                |\n|                      | **FALSE** - Выключить       |                                   |\n|                      | **TRUE** - Включить         |                                   |\n| `dismount`           | Маркер                      | Спешиться после телепортации      |\n|                      | **FALSE** - Нет             |                                   |\n|                      | **TRUE** - Да               |                                   |","player::redirect_world":"```justcode\nplayer::redirect_world\n```\n\n**Имя:** Переместить игрока в другой мир\\\n**Тип:** Действие без значения\\\n**Описание:** Перемещает игрока в мир с указанным ID.\n\n**Пример использования:** \n```justcode\nplayer::redirect_world(\"world_id\");\n\n//Или в сухую по ключам\n\nplayer::redirect_world(world_id=\"world_id\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**      |\n| :--------- | :------ | :----------- |\n| `world_id`      | Текст        | ID мира           |","player::remove_boss_bar":"```justcode\nplayer::remove_boss_bar\n```\n\n**Имя:** Удалить босс-бар\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет имеющийся босс-бар у определённого игрока.\n\n**Пример использования:** \n```justcode\nplayer::remove_boss_bar(\"id\");\n\n//Или в сухую по ключам\n\nplayer::remove_boss_bar(id=\"id\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `id`         | Текст        | ID босс-бара      |","player::remove_disguise":"```justcode\nplayer::remove_disguise\n```\n\n**Имя:** Убрать маскировку\\\n**Тип:** Действие без значения\\\n**Описание:** Убирает маскировку игроку.\n\n**Пример использования:** \n```justcode\nplayer::remove_disguise();\n```\n\n","player::remove_display_blocks":"```justcode\nplayer::remove_display_blocks\n```\n\n**Имя:** Скрыть отображаемые блоки\\\n**Тип:** Действие без значения\\\n**Описание:** Скрывает от игрока все отображаемые блоки в выбранном пространстве, не влияя на других игроков (максимальный размер пространства - 500 блоков).\n\n**Пример использования:** \n```justcode\nplayer::remove_display_blocks(location(0,0,0,0,0), location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nplayer::remove_display_blocks(pos_1=location(0,0,0,0,0), pos_2=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**             | **Описание**                     |\n| :------ | :------------- | :-------------------------- |\n| `pos_1`      | Местоположение      | Местоположение первого угла      |\n| `pos_2`      | Местоположение      | Местоположение второго угла      |","player::remove_inventory_menu_row":"```justcode\nplayer::remove_inventory_menu_row\n```\n\n**Имя:** Убрать строки меню\\\n**Тип:** Действие без значения\\\n**Описание:** Убирает одну или несколько строк в инвентаре типа \\\"Сундук\\\".\n\n**Пример использования:** \n```justcode\nplayer::remove_inventory_menu_row(1, \"BUTTON\");\n\n//Или в сухую по ключам\n\nplayer::remove_inventory_menu_row(size=1, position=\"BUTTON\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                               | **Описание**          |\n| :--------- | :------------------------------- | :--------------- |\n| `size`          | Число                                 | Количество строк      |\n| `position`      | Маркер                                | Позиция строки        |\n|                 | **BUTTON** - Убрать строку снизу      |                       |\n|                 | **TOP** - Убрать строку сверху        |                       |","player::remove_items":"```justcode\nplayer::remove_items\n```\n\n**Имя:** Удалить предметы\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет указанные предметы из инвентаря игрока.\n\n**Пример использования:** \n```justcode\nplayer::remove_items([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую по ключам\n\nplayer::remove_items(items=[item(\"stick\"), item(\"stick\")]);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**               |\n| :------ | :-------------- | :-------------------- |\n| `items`      | список[Предмет]      | Предметы для удаления      |","player::remove_pose":"```justcode\nplayer::remove_pose\n```\n\n**Имя:** Сбросить позу игроку\\\n**Тип:** Действие без значения\\\n**Описание:** Сбрасывает позу игроку.\n\n**Пример использования:** \n```justcode\nplayer::remove_pose();\n```\n\n","player::remove_potion_effect":"```justcode\nplayer::remove_potion_effect\n```\n\n**Имя:** Удалить эффект\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет выбранные эффекты у игрока.\n\n**Пример использования:** \n```justcode\nplayer::remove_potion_effect([potion(\"slow_falling\"), potion(\"slow_falling\")]);\n\n//Или в сухую по ключам\n\nplayer::remove_potion_effect(potions=[potion(\"slow_falling\"), potion(\"slow_falling\")]);\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**            | **Описание**              |\n| :-------- | :------------ | :------------------- |\n| `potions`      | список[Зелье]      | Эффекты для удаления      |","player::remove_self_disguise":"```justcode\nplayer::remove_self_disguise\n```\n\n**Имя:** Убрать свою маскировку\\\n**Тип:** Действие без значения\\\n**Описание:** Убирает маскировку игрока, которую видно только ему.\n\n**Пример использования:** \n```justcode\nplayer::remove_self_disguise();\n```\n\n","player::remove_skin":"```justcode\nplayer::remove_skin\n```\n\n**Имя:** Убрать скин\\\n**Тип:** Действие без значения\\\n**Описание:** Возвращает обычный скин цели события.\n\n**Пример использования:** \n```justcode\nplayer::remove_skin();\n```\n\n","player::remove_world_border":"```justcode\nplayer::remove_world_border\n```\n\n**Имя:** Удалить границу мира\\\n**Тип:** Действие без значения\\\n**Описание:** Установить границу мира для игрока на значение по умолчанию.\n\n**Пример использования:** \n```justcode\nplayer::remove_world_border();\n```\n\n","player::replace_items":"```justcode\nplayer::replace_items\n```\n\n**Имя:** Заменить предметы\\\n**Тип:** Действие без значения\\\n**Описание:** Заменяет указанные предметы в инвентаре на определённый предмет.\n\n**Пример использования:** \n```justcode\nplayer::replace_items([item(\"stick\"), item(\"stick\")], item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nplayer::replace_items(items=[item(\"stick\"), item(\"stick\")], replace=item(\"stick\"), count=1);\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**              | **Описание**                         |\n| :-------- | :-------------- | :------------------------------ |\n| `items`        | список[Предмет]      | Заменяемые предметы                  |\n| `replace`      | Предмет              | Заменяющий предмет                   |\n| `count`        | Число                | Количество предметов для замены      |","player::reset_weather":"```justcode\nplayer::reset_weather\n```\n\n**Имя:** Сбросить погоду\\\n**Тип:** Действие без значения\\\n**Описание:** Сбрасывает погоду игроку.\n\n**Пример использования:** \n```justcode\nplayer::reset_weather();\n```\n\n","player::ride_entity":"```justcode\nplayer::ride_entity\n```\n\n**Имя:** Посадить на существо\\\n**Тип:** Действие без значения\\\n**Описание:** Сажает игрока на существо или другого игрока.\n\n**Пример использования:** \n```justcode\nplayer::ride_entity(\"name_or_uuid\");\n\n//Или в сухую по ключам\n\nplayer::ride_entity(name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**           |\n| :------------- | :------ | :---------------- |\n| `name_or_uuid`      | Текст        | Имя или UUID цели      |","player::save_inventory":"```justcode\nplayer::save_inventory\n```\n\n**Имя:** Сохранить текущий инвентарь\\\n**Тип:** Действие без значения\\\n**Описание:** Сохраняет текущий инвентарь игрока. Его можно будет загрузить позже с помощью 'Загрузить сохранённый инвентарь'.\n\n**Пример использования:** \n```justcode\nplayer::save_inventory();\n```\n\n","player::self_disguise_as_block":"```justcode\nplayer::self_disguise_as_block\n```\n\n**Имя:** Замаскировать себя под блок\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует игрока под блок, но эту маскировку видно только этому игроку.\n\n**Пример использования:** \n```justcode\nplayer::self_disguise_as_block(item(\"stone\"));\n\n//Или в сухую по ключам\n\nplayer::self_disguise_as_block(block=item(\"stone\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**             |\n| :------ | :------ | :------------------ |\n| `block`      | Блок         | Блок для маскировки      |","player::self_disguise_as_entity":"```justcode\nplayer::self_disguise_as_entity\n```\n\n**Имя:** Замаскировать себя под сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует игрока под сущность, но эту маскировку видно только этому игроку.\n\n**Пример использования:** \n```justcode\nplayer::self_disguise_as_entity(item(\"stick\"));\n\n//Или в сухую по ключам\n\nplayer::self_disguise_as_entity(entity_type=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**      | **Описание**                 |\n| :------------ | :------ | :---------------------- |\n| `entity_type`      | Предмет      | Сущность для маскировки      |","player::self_disguise_as_item":"```justcode\nplayer::self_disguise_as_item\n```\n\n**Имя:** Замаскировать себя под предмет\\\n**Тип:** Действие без значения\\\n**Описание:** Маскирует игрока под предмет, но эту маскировку видно только этому игроку.\n\n**Пример использования:** \n```justcode\nplayer::self_disguise_as_item(item(\"stick\"));\n\n//Или в сухую по ключам\n\nplayer::self_disguise_as_item(item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                |\n| :------ | :------ | :--------------------- |\n| `item`       | Предмет      | Предмет для маскировки      |","player::send_action_bar":"```justcode\nplayer::send_action_bar\n```\n\n**Имя:** Отправить экшн-бар\\\n**Тип:** Действие без значения\\\n**Описание:** Высвечивает выбранному игроку экшн-бар.\n\n**Пример использования:** \n```justcode\nplayer::send_action_bar([\"messages\", \"messages\"], \"CONCATENATION\");\n\n//Или в сухую по ключам\n\nplayer::send_action_bar(messages=[\"messages\", \"messages\"], merging=\"CONCATENATION\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                               | **Описание**               |\n| :--------- | :------------------------------- | :-------------------- |\n| `messages`      | список[Текст]                         | Сообщения в экшн-баре      |\n| `merging`       | Маркер                                | Объединение текста         |\n|                 | **CONCATENATION** - Объединение       |                            |\n|                 | **SPACES** - Разделение пробелом      |                            |","player::send_advancement":"```justcode\nplayer::send_advancement\n```\n\n**Имя:** Отправить достижение игроку\\\n**Тип:** Действие без значения\\\n**Описание:** Высвечивает игроку пользовательское всплывающее достижение.\n\n**Пример использования:** \n```justcode\nplayer::send_advancement(item(\"stick\"), \"name\", \"CHALLENGE\");\n\n//Или в сухую по ключам\n\nplayer::send_advancement(icon=item(\"stick\"), name=\"name\", frame=\"CHALLENGE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                            | **Описание**             |\n| :------ | :---------------------------- | :------------------ |\n| `icon`       | Предмет                            | Иконка достижения        |\n| `name`       | Текст                              | Название достижения      |\n| `frame`      | Маркер                             | Тип достижения           |\n|              | **CHALLENGE** - Испытание          |                          |\n|              | **GOAL** - Цель                    |                          |\n|              | **TASK** - Обычное достижение      |                          |","player::send_break_animation":"```justcode\nplayer::send_break_animation\n```\n\n**Имя:** Показать анимацию ломания блока\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает анимацию ломания блока (трещины) для игрока, не влияя на других игроков.\n\n**Пример использования:** \n```justcode\nplayer::send_break_animation([location(0,0,0,0,0), location(0,0,0,0,0)], 1);\n\n//Или в сухую по ключам\n\nplayer::send_break_animation(locations=[location(0,0,0,0,0), location(0,0,0,0,0)], stage=1);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                     | **Описание**                               |\n| :---------- | :--------------------- | :------------------------------------ |\n| `locations`      | список[Местоположение]      | Местоположения блоков                      |\n| `stage`          | Число                       | Уровень разрушения блока (от 0 до 10)      |","player::send_dialogue":"```justcode\nplayer::send_dialogue\n```\n\n**Имя:** Диалог\\\n**Тип:** Действие без значения\\\n**Описание:** Отправляет несколько сообщений в чат выбранным игрокам с задержкой после каждого сообщения.\n\n**Пример использования:** \n```justcode\nplayer::send_dialogue([\"messages\", \"messages\"], 1);\n\n//Или в сухую по ключам\n\nplayer::send_dialogue(messages=[\"messages\", \"messages\"], delay=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                    |\n| :--------- | :------------ | :------------------------- |\n| `messages`      | список[Текст]      | Текст для отправки              |\n| `delay`         | Число              | Задержка между сообщениями      |","player::send_hover":"```justcode\nplayer::send_hover\n```\n\n**Имя:** Отправить сообщение с наведением\\\n**Тип:** Действие без значения\\\n**Описание:** Отправляет сообщение выбранному игроку. Когда игрок 'наводит' на него курсор, появляется второе сообщение.\n\n**Пример использования:** \n```justcode\nplayer::send_hover(\"message\", \"hover\");\n\n//Или в сухую по ключам\n\nplayer::send_hover(message=\"message\", hover=\"hover\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**      | **Описание**                          |\n| :-------- | :------ | :------------------------------- |\n| `message`      | Текст        | Сообщение для отправки                |\n| `hover`        | Текст        | Сообщение при наведении курсором      |","player::message":"```justcode\nplayer::message\n```\n\n**Имя:** Отправить сообщение\\\n**Тип:** Действие без значения\\\n**Описание:** Отправляет сообщение в чат указанным игрокам.\n\n**Пример использования:** \n```justcode\nplayer::message([\"messages\", \"messages\"], \"CONCATENATION\");\n\n//Или в сухую по ключам\n\nplayer::message(messages=[\"messages\", \"messages\"], merging=\"CONCATENATION\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                        | **Описание**            |\n| :--------- | :---------------------------------------- | :----------------- |\n| `messages`      | список[Текст]                                  | Текст для отправки      |\n| `merging`       | Маркер                                         | Объединение текста      |\n|                 | **CONCATENATION** - Объединение                |                         |\n|                 | **SEPARATE_LINES** - Разделение на строки      |                         |\n|                 | **SPACES** - Разделение пробелом               |                         |","player::send_minimessage":"```justcode\nplayer::send_minimessage\n```\n\n**Имя:** Отправить сообщение формата MiniMessage\\\n**Тип:** Действие без значения\\\n**Описание:** Отправляет игроку сообщение в чат в формате MiniMessage.\n\n**Пример использования:** \n```justcode\nplayer::send_minimessage(\"minimessage\");\n\n//Или в сухую по ключам\n\nplayer::send_minimessage(minimessage=\"minimessage\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**      | **Описание**                       |\n| :------------ | :------ | :---------------------------- |\n| `minimessage`      | Текст        | Сообщение формата MiniMessage      |","player::send_title":"```justcode\nplayer::send_title\n```\n\n**Имя:** Отправить титул\\\n**Тип:** Действие без значения\\\n**Описание:** Высвечивает выбранному игроку две надписи на экран - титул и подтитул.\n\n**Пример использования:** \n```justcode\nplayer::send_title(\"title\", \"subtitle\", 1, 2, 3);\n\n//Или в сухую по ключам\n\nplayer::send_title(title=\"title\", subtitle=\"subtitle\", fade_in=1, stay=2, fade_out=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**                 |\n| :--------- | :------ | :---------------------- |\n| `title`         | Текст        | Текст титула                 |\n| `subtitle`      | Текст        | Текст подтитула              |\n| `fade_in`       | Число        | Время появления в тиках      |\n| `stay`          | Число        | Задержка в тиках             |\n| `fade_out`      | Число        | Время удаления в тиках       |","player::set_absorption_health":"```justcode\nplayer::set_absorption_health\n```\n\n**Имя:** Установить дополнительное здоровье\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает дополнительное здоровье игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_absorption_health(1);\n\n//Или в сухую по ключам\n\nplayer::set_absorption_health(health=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**                             |\n| :------- | :------ | :---------------------------------- |\n| `health`      | Число        | Количество дополнительного здоровья      |","player::set_air_ticks":"```justcode\nplayer::set_air_ticks\n```\n\n**Имя:** Установить оставшийся воздух\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает оставшийся воздух игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_air_ticks(1);\n\n//Или в сухую по ключам\n\nplayer::set_air_ticks(ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                                  |\n| :------ | :------ | :--------------------------------------- |\n| `ticks`      | Число        | Количество оставшегося воздуха (в тиках)      |","player::set_allow_flying":"```justcode\nplayer::set_allow_flying\n```\n\n**Имя:** Установить разрешение полёта игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает разрешение полёта для игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_allow_flying(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_allow_flying(allow_flying=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**              | **Описание**      |\n| :------------- | :-------------- | :----------- |\n| `allow_flying`      | Маркер               | Может летать      |\n|                     | **FALSE** - Нет      |                   |\n|                     | **TRUE** - Да        |                   |","player::set_armor":"```justcode\nplayer::set_armor\n```\n\n**Имя:** Установить броню\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает броню игрока.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Любой предмет или блок будет отображаться на голове, если положить его в слот шлема.\n\n**Пример использования:** \n```justcode\nplayer::set_armor(item(\"stick\"), item(\"stick\"), item(\"stick\"), item(\"stick\"));\n\n//Или в сухую по ключам\n\nplayer::set_armor(helmet=item(\"stick\"), chestplate=item(\"stick\"), leggings=item(\"stick\"), boots=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**       |\n| :----------- | :------ | :------------ |\n| `helmet`          | Предмет      | Головной убор      |\n| `chestplate`      | Предмет      | Нагрудник          |\n| `leggings`        | Предмет      | Штаны              |\n| `boots`           | Предмет      | Ботинки            |","player::set_arrows_in_body":"```justcode\nplayer::set_arrows_in_body\n```\n\n**Имя:** Установить стрелы на игроке\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает определённое количество стрел на игроке.\n\n**Пример использования:** \n```justcode\nplayer::set_arrows_in_body(1);\n\n//Или в сухую по ключам\n\nplayer::set_arrows_in_body(amount=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**                       |\n| :------- | :------ | :---------------------------- |\n| `amount`      | Число        | Количество отображаемых стрел      |","player::set_attack_speed":"```justcode\nplayer::set_attack_speed\n```\n\n**Имя:** Установить скорость атаки\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает скорость атаки игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_attack_speed(1);\n\n//Или в сухую по ключам\n\nplayer::set_attack_speed(speed=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**        |\n| :------ | :------ | :------------- |\n| `speed`      | Число        | Скорость атаки      |","player::set_attribute":"```justcode\nplayer::set_attribute\n```\n\n**Имя:** Установить атрибут\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает игроку указанное значение атрибута.\n\n**Пример использования:** \n```justcode\nplayer::set_attribute(1, \"CAMERA_DISTANCE\");\n\n//Или в сухую по ключам\n\nplayer::set_attribute(value=1, attribute_type=\"CAMERA_DISTANCE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                                                                           | **Описание**           |\n| :--------------- | :------------------------------------------------------------------------------------------- | :---------------- |\n| `value`               | Число                                                                                             | Значение атрибута      |\n| `attribute_type`      | Маркер                                                                                            | Тип атрибута           |\n|                       | **CAMERA_DISTANCE** - Расстояние камеры при виде от третьего лица                                 |                        |\n|                       | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                        |\n|                       | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                        |\n|                       | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                        |\n|                       | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                        |\n|                       | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                        |\n|                       | **GENERIC_BURNING_TIME** - Время горения                                                          |                        |\n|                       | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                        |\n|                       | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                        |\n|                       | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                        |\n|                       | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                        |\n|                       | **GENERIC_GRAVITY** - Гравитация                                                                  |                        |\n|                       | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                        |\n|                       | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                        |\n|                       | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                        |\n|                       | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                        |\n|                       | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                        |\n|                       | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                        |\n|                       | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                        |\n|                       | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                        |\n|                       | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                        |\n|                       | **GENERIC_SCALE** - Масштаб                                                                       |                        |\n|                       | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                        |\n|                       | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                        |\n|                       | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                        |\n|                       | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                        |\n|                       | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                        |\n|                       | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                        |\n|                       | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                        |\n|                       | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                        |\n|                       | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                        |\n|                       | **TEMP_RANGE** - Расстояние приманивания                                                          |                        |\n|                       | **WAYPOINT_RECEIVE_RANGE** - Расстояние улавливания локатора (waypoint_receive_range)             |                        |\n|                       | **WAYPOINT_TRANSMIT_RANGE** - Расстояние улавливания локатором (waypoint_transmit_range)          |                        |\n|                       | **ZOMBIE_SPAWN_REINFORCEMENTS** - Шанс подкрепления зомби                                         |                        |","player::set_bee_stingers_in_body":"```justcode\nplayer::set_bee_stingers_in_body\n```\n\n**Имя:** Установить жало пчелы на игроке\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает определённое количество жал пчёл на игроке.\n\n**Пример использования:** \n```justcode\nplayer::set_bee_stingers_in_body(1);\n\n//Или в сухую по ключам\n\nplayer::set_bee_stingers_in_body(amount=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**                          |\n| :------- | :------ | :------------------------------- |\n| `amount`      | Число        | Количество отображаемых жал пчёл      |","player::set_block_opened_state":"```justcode\nplayer::set_block_opened_state\n```\n\n**Имя:** Открыть/Закрыть блок\\\n**Тип:** Действие без значения\\\n**Описание:** Отобразить игроку закрытие/открытие блока не меняя состояния блока для других игроков.\n**Работает с:**\\\n&nbsp;&nbsp;Сундуком\\\n&nbsp;&nbsp;Сундуком-ловушкой\\\n&nbsp;&nbsp;Эндер-сундуком\\\n&nbsp;&nbsp;Шалкеровым ящиком\\\n&nbsp;&nbsp;Бочкой\n\n**Пример использования:** \n```justcode\nplayer::set_block_opened_state(location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_block_opened_state(location=location(0,0,0,0,0), is_opened=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                   | **Описание**              |\n| :---------- | :------------------- | :------------------- |\n| `location`       | Местоположение            | Местоположение блока      |\n| `is_opened`      | Маркер                    | Состояние                 |\n|                  | **FALSE** - Закрытый      |                           |\n|                  | **TRUE** - Открытый       |                           |","player::set_boss_bar":"```justcode\nplayer::set_boss_bar\n```\n\n**Имя:** Установить босс-бар\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает у определённого игрока пользовательский босс-бар.\n\n**Пример использования:** \n```justcode\nplayer::set_boss_bar(\"id\", \"title\", 1, \"DARK_SKY\", \"NOTCHED_10\", \"BLUE\");\n\n//Или в сухую по ключам\n\nplayer::set_boss_bar(id=\"id\", title=\"title\", progress=1, sky_effect=\"DARK_SKY\", style=\"NOTCHED_10\", color=\"BLUE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                         | **Описание**               |\n| :----------- | :----------------------------------------- | :-------------------- |\n| `id`              | Текст                                           | ID босс-бара               |\n| `title`           | Текст                                           | Текст                      |\n| `progress`        | Число                                           | Заполненность (0-100)      |\n| `sky_effect`      | Маркер                                          | Эффект неба                |\n|                   | **DARK_SKY** - Тёмное небо                      |                            |\n|                   | **FOG** - Туман                                 |                            |\n|                   | **FOG_AND_DARK_SKY** - Туман и тёмное небо      |                            |\n|                   | **NONE** - Отсутствует                          |                            |\n| `style`           | Маркер                                          | Стиль                      |\n|                   | **NOTCHED_10** - 10 сегментов                   |                            |\n|                   | **NOTCHED_12** - 12 сегментов                   |                            |\n|                   | **NOTCHED_20** - 20 сегментов                   |                            |\n|                   | **NOTCHED_6** - 6 сегментов                     |                            |\n|                   | **PROGRESS** - Сплошной                         |                            |\n| `color`           | Маркер                                          | Цвет                       |\n|                   | **BLUE** - Синий                                |                            |\n|                   | **GREEN** - Зелёный                             |                            |\n|                   | **PINK** - Розовый                              |                            |\n|                   | **PURPLE** - Фиолетовый                         |                            |\n|                   | **RED** - Красный                               |                            |\n|                   | **WHITE** - Белый                               |                            |\n|                   | **YELLOW** - Жёлтый                             |                            |","player::set_chat_completions":"```justcode\nplayer::set_chat_completions\n```\n\n**Имя:** Обновление подсказок в чате\\\n**Тип:** Действие без значения\\\n**Описание:** Обновляет игроку подсказки, показываемые при вводе текста в чате.\n\n**Пример использования:** \n```justcode\nplayer::set_chat_completions([\"completions\", \"completions\"], \"ADD\");\n\n//Или в сухую по ключам\n\nplayer::set_chat_completions(completions=[\"completions\", \"completions\"], setting_mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                   | **Описание**        |\n| :------------- | :------------------- | :------------- |\n| `completions`       | список[Текст]             | Подсказки           |\n| `setting_mode`      | Маркер                    | Тип обновления      |\n|                     | **ADD** - Добавить        |                     |\n|                     | **REMOVE** - Удалить      |                     |\n|                     | **SET** - Установить      |                     |","player::set_collidable":"```justcode\nplayer::set_collidable\n```\n\n**Имя:** Установить режим столкновения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает игроку режим столкновения с существами.\n\n**Пример использования:** \n```justcode\nplayer::set_collidable(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_collidable(collidable=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                             | **Описание**            |\n| :----------- | :--------------------------------------------- | :----------------- |\n| `collidable`      | Маркер                                              | Режим столкновения      |\n|                   | **FALSE** - Не сталкивается с другими игроками      |                         |\n|                   | **TRUE** - Сталкивается с другими игроками          |                         |","player::set_compass_target":"```justcode\nplayer::set_compass_target\n```\n\n**Имя:** Установить цель компаса\\\n**Тип:** Действие без значения\\\n**Описание:** Установить цель компаса для игрока, в сторону которой будет крутиться стрелка компаса.\n\n**Пример использования:** \n```justcode\nplayer::set_compass_target(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nplayer::set_compass_target(location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**      |\n| :--------- | :------------- | :----------- |\n| `location`      | Местоположение      | Цель компаса      |","player::set_cursor_item":"```justcode\nplayer::set_cursor_item\n```\n\n**Имя:** Установить предмет на курсор\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предмет на курсор игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_cursor_item(item(\"stick\"));\n\n//Или в сухую по ключам\n\nplayer::set_cursor_item(item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**               |\n| :------ | :------ | :-------------------- |\n| `item`       | Предмет      | Предмет для установки      |","player::set_death_drops":"```justcode\nplayer::set_death_drops\n```\n\n**Имя:** Установить выпадение предметов\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает выпадение предметов из игрока при смерти.\n\n**Пример использования:** \n```justcode\nplayer::set_death_drops(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_death_drops(death_drops=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                      | **Описание**             |\n| :------------ | :---------------------- | :------------------ |\n| `death_drops`      | Маркер                       | Выпадение предметов      |\n|                    | **FALSE** - Не выпадают      |                          |\n|                    | **TRUE** - Выпадают          |                          |","player::set_death_screen_score":"```justcode\nplayer::set_death_screen_score\n```\n\n**Имя:** Установить количество очков\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает количество очков, отображаемых игроку на экране смерти.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;После установки значения, число очков по-прежнему изменяется при получении опыта игроком.\n\n**Пример использования:** \n```justcode\nplayer::set_death_screen_score(1);\n\n//Или в сухую по ключам\n\nplayer::set_death_screen_score(score=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**          |\n| :------ | :------ | :--------------- |\n| `score`      | Число        | Количество очков      |","player::set_default_visible":"```justcode\nplayer::set_default_visible\n```\n\n**Имя:** Установить видимость\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает игроку видимость.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Видимость игрока может быть изменена через действие \"Скрыть сущность игроку\".\n\n**Пример использования:** \n```justcode\nplayer::set_default_visible(\"TRUE\");\n\n//Или в сухую по ключам\n\nplayer::set_default_visible(default_visible=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                    | **Описание**      |\n| :---------------- | :-------------------- | :----------- |\n| `default_visible`      | Маркер                     | Видимость         |\n|                        | **TRUE** - Видимый         |                   |\n|                        | **FALSE** - Невидимый      |                   |","player::set_ender_chest_contents":"```justcode\nplayer::set_ender_chest_contents\n```\n\n**Имя:** Установить содержимое Эндер-сундука\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предметы в инвентарь Эндер-сундука игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_ender_chest_contents([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую по ключам\n\nplayer::set_ender_chest_contents(items=[item(\"stick\"), item(\"stick\")]);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**                |\n| :------ | :-------------- | :--------------------- |\n| `items`      | список[Предмет]      | Предметы для установки      |","player::set_entity_glowing":"```justcode\nplayer::set_entity_glowing\n```\n\n**Имя:** Установить свечение сущности\\\n**Тип:** Действие без значения\\\n**Описание:** Включает или выключает свечение сущности для данного игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_entity_glowing([\"name_or_uuid\", \"name_or_uuid\"], \"AQUA\", \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_entity_glowing(name_or_uuid=[\"name_or_uuid\", \"name_or_uuid\"], color=\"AQUA\", glow=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                 | **Описание**               |\n| :------------- | :--------------------------------- | :-------------------- |\n| `name_or_uuid`      | список[Текст]                           | Имя или UUID сущности      |\n| `color`             | Маркер                                  | Цвет свечения              |\n|                     | **AQUA** - Светло-синий                 |                            |\n|                     | **BLACK** - Чёрный                      |                            |\n|                     | **BLUE** - Синий                        |                            |\n|                     | **DARK_AQUA** - Бирюзовый               |                            |\n|                     | **DARK_BLUE** - Тёмно-синий             |                            |\n|                     | **DARK_GRAY** - Серый                   |                            |\n|                     | **DARK_GREEN** - Тёмно-зелёный          |                            |\n|                     | **DARK_PURPLE** - Тёмно-фиолетовый      |                            |\n|                     | **DARK_RED** - Тёмно-красный            |                            |\n|                     | **GOLD** - Золотой                      |                            |\n|                     | **GRAY** - Светло-серый                 |                            |\n|                     | **GREEN** - Зелёный                     |                            |\n|                     | **PURPLE** - Фиолетовый                 |                            |\n|                     | **RED** - Красный                       |                            |\n|                     | **WHITE** - Белый                       |                            |\n|                     | **YELLOW** - Жёлтый                     |                            |\n| `glow`              | Маркер                                  | Свечение                   |\n|                     | **FALSE** - Выключить                   |                            |\n|                     | **TRUE** - Включить                     |                            |","player::set_equipment":"```justcode\nplayer::set_equipment\n```\n\n**Имя:** Установить экипировку\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предметы в один из слотов экипировки (броня и предметы в руках) игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_equipment(item(\"stick\"), \"BODY\");\n\n//Или в сухую по ключам\n\nplayer::set_equipment(item=item(\"stick\"), slot=\"BODY\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                                 | **Описание**             |\n| :------ | :--------------------------------- | :------------------ |\n| `item`       | Предмет                                 | Предметы для выдачи      |\n| `slot`       | Маркер                                  | Слот снаряжения          |\n|              | **BODY** - Тело                         |                          |\n|              | **CHEST** - Нагрудник                   |                          |\n|              | **FEET** - Ботинки                      |                          |\n|              | **HAND** - Основная рука                |                          |\n|              | **HEAD** - Шлем                         |                          |\n|              | **LEGS** - Поножи                       |                          |\n|              | **OFF_HAND** - Второстепенная рука      |                          |","player::set_exhaustion":"```justcode\nplayer::set_exhaustion\n```\n\n**Имя:** Установить уровень истощения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает уровень истощения игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_exhaustion(1, \"ADD\");\n\n//Или в сухую по ключам\n\nplayer::set_exhaustion(exhaustion=1, mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                   | **Описание**           |\n| :----------- | :------------------- | :---------------- |\n| `exhaustion`      | Число                     | Уровень истощения      |\n| `mode`            | Маркер                    | Режим установки        |\n|                   | **ADD** - Добавление      |                        |\n|                   | **SET** - Установка       |                        |","player::set_experience":"```justcode\nplayer::set_experience\n```\n\n**Имя:** Установить уровень\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает уровень игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_experience(1, \"LEVEL\");\n\n//Или в сухую по ключам\n\nplayer::set_experience(experience=1, mode=\"LEVEL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                           | **Описание**                  |\n| :----------- | :------------------------------------------- | :----------------------- |\n| `experience`      | Число                                             | Количество для установки      |\n| `mode`            | Маркер                                            | Тип установки                 |\n|                   | **LEVEL** - Как уровень                           |                               |\n|                   | **LEVEL_PERCENTAGE** - Как процент от уровня      |                               |\n|                   | **POINTS** - Как очки опыта                       |                               |","player::set_fall_distance":"```justcode\nplayer::set_fall_distance\n```\n\n**Имя:** Установить дистанцию падения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает дистанцию, с которой падает игрок.\n\n**Пример использования:** \n```justcode\nplayer::set_fall_distance(1);\n\n//Или в сухую по ключам\n\nplayer::set_fall_distance(distance=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**           |\n| :--------- | :------ | :---------------- |\n| `distance`      | Число        | Дистанция падения      |","player::set_fire_ticks":"```justcode\nplayer::set_fire_ticks\n```\n\n**Имя:** Поджечь игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Поджигает игрока на выбранное время.\n\n**Пример использования:** \n```justcode\nplayer::set_fire_ticks(1);\n\n//Или в сухую по ключам\n\nplayer::set_fire_ticks(ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                |\n| :------ | :------ | :--------------------- |\n| `ticks`      | Число        | Длительность (в тиках)      |","player::set_flying":"```justcode\nplayer::set_flying\n```\n\n**Имя:** Установить полёт\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает для игрока состояние полёта.\n\n**Пример использования:** \n```justcode\nplayer::set_flying(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_flying(is_flying=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**      |\n| :---------- | :-------------------- | :----------- |\n| `is_flying`      | Маркер                     | Полёт             |\n|                  | **FALSE** - Выключено      |                   |\n|                  | **TRUE** - Включено        |                   |","player::set_fog_distance":"```justcode\nplayer::set_fog_distance\n```\n\n**Имя:** Установить дистанцию прорисовки\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает дистанцию прорисовки чанков для игрока. Значение \\\"-1\\\" сбрасывает до стандартной.\n\n**Пример использования:** \n```justcode\nplayer::set_fog_distance(1);\n\n//Или в сухую по ключам\n\nplayer::set_fog_distance(distance=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**                              |\n| :--------- | :------ | :----------------------------------- |\n| `distance`      | Число        | Дистанция прорисовки в чанках (2-32)      |","player::set_food":"```justcode\nplayer::set_food\n```\n\n**Имя:** Установить голод\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает уровень голода игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_food(1, \"ADD\");\n\n//Или в сухую по ключам\n\nplayer::set_food(food=1, mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                    | **Описание**         |\n| :------ | :-------------------- | :-------------- |\n| `food`       | Число                      | Уровень голода       |\n| `mode`       | Маркер                     | Режим установки      |\n|              | **ADD** - Прибавление      |                      |\n|              | **SET** - Установка        |                      |","player::set_freeze_ticks":"```justcode\nplayer::set_freeze_ticks\n```\n\n**Имя:** Установить время заморозки\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает игроку время заморозки (количество тиков, которое игрок провёл в рыхлом снегу).\n\n**Пример использования:** \n```justcode\nplayer::set_freeze_ticks(1, \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_freeze_ticks(ticks=1, ticking_locked=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                    | **Описание**                                          |\n| :--------------- | :-------------------- | :----------------------------------------------- |\n| `ticks`               | Число                      | Время заморозки в тиках                               |\n| `ticking_locked`      | Маркер                     | Блокировка состояния (время не будет изменяться)      |\n|                       | **FALSE** - Выключить      |                                                       |\n|                       | **TRUE** - Включить        |                                                       |","player::set_gamemode":"```justcode\nplayer::set_gamemode\n```\n\n**Имя:** Установить режим игры\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает режим игры для игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_gamemode(\"ADVENTURE\", \"KEEP_ORIGINAL\");\n\n//Или в сухую по ключам\n\nplayer::set_gamemode(gamemode=\"ADVENTURE\", flight_mode=\"KEEP_ORIGINAL\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                          | **Описание**      |\n| :------------ | :------------------------------------------ | :----------- |\n| `gamemode`         | Маркер                                           | Режим игры        |\n|                    | **ADVENTURE** - Приключение                      |                   |\n|                    | **CREATIVE** - Творческий                        |                   |\n|                    | **SPECTATOR** - Наблюдатель                      |                   |\n|                    | **SURVIVAL** - Выживание                         |                   |\n| `flight_mode`      | Маркер                                           | Режим полёта      |\n|                    | **KEEP_ORIGINAL** - Оставить изначальный         |                   |\n|                    | **RESPECT_GAMEMODE** - Учитывать режим игры      |                   |","player::set_gliding":"```justcode\nplayer::set_gliding\n```\n\n**Имя:** Установить полёт на элитрах\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает для игрока состояние полёта на элитрах.\n\n**Пример использования:** \n```justcode\nplayer::set_gliding(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_gliding(is_gliding=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**          |\n| :----------- | :-------------------- | :--------------- |\n| `is_gliding`      | Маркер                     | Полёт на элитрах      |\n|                   | **FALSE** - Выключено      |                       |\n|                   | **TRUE** - Включено        |                       |","player::set_health":"```justcode\nplayer::set_health\n```\n\n**Имя:** Установить здоровье игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает здоровье игрока на выбранное количество.\n\n**Пример использования:** \n```justcode\nplayer::set_health(1);\n\n//Или в сухую по ключам\n\nplayer::set_health(health=1);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**             |\n| :------- | :------ | :------------------ |\n| `health`      | Число        | Количество здоровья      |","player::set_hotbar_slot":"```justcode\nplayer::set_hotbar_slot\n```\n\n**Имя:** Установить слот\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает выбранный слот игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_hotbar_slot(1);\n\n//Или в сухую по ключам\n\nplayer::set_hotbar_slot(slot=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `slot`       | Число        | Номер слота       |","player::set_instant_respawn":"```justcode\nplayer::set_instant_respawn\n```\n\n**Имя:** Установить мгновенное возрождение\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает мгновенное возрождение игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_instant_respawn(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_instant_respawn(instant_respawn=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                    | **Описание**                |\n| :---------------- | :-------------------- | :--------------------- |\n| `instant_respawn`      | Маркер                     | Мгновенное возрождение      |\n|                        | **FALSE** - Выключено      |                             |\n|                        | **TRUE** - Включено        |                             |","player::set_inventory_kept":"```justcode\nplayer::set_inventory_kept\n```\n\n**Имя:** Установить сохранение инвентаря\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает игроку сохранение инвентаря при смерти.\n\n**Пример использования:** \n```justcode\nplayer::set_inventory_kept(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_inventory_kept(kept=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**                    | **Описание**              |\n| :------ | :-------------------- | :------------------- |\n| `kept`       | Маркер                     | Сохранение инвентаря      |\n|              | **FALSE** - Выключено      |                           |\n|              | **TRUE** - Включено        |                           |","player::set_inventory_menu_item":"```justcode\nplayer::set_inventory_menu_item\n```\n\n**Имя:** Установить предмет в слот\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предмет в указанный слот открытого инвентарного меню игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_inventory_menu_item(item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nplayer::set_inventory_menu_item(item=item(\"stick\"), slot=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**               |\n| :------ | :------ | :-------------------- |\n| `item`       | Предмет      | Предмет для установки      |\n| `slot`       | Число        | Слот для установки         |","player::set_inventory_menu_name":"```justcode\nplayer::set_inventory_menu_name\n```\n\n**Имя:** Установить название меню\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает новое название для открытого инвентарного меню игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_inventory_menu_name(\"text\");\n\n//Или в сухую по ключам\n\nplayer::set_inventory_menu_name(text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**        |\n| :------ | :------ | :------------- |\n| `text`       | Текст        | Новое название      |","player::set_invulnerability_ticks":"```justcode\nplayer::set_invulnerability_ticks\n```\n\n**Имя:** Установить длительность неуязвимости\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает длительность неуязвимости для игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_invulnerability_ticks(1);\n\n//Или в сухую по ключам\n\nplayer::set_invulnerability_ticks(ticks=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                             |\n| :------ | :------ | :---------------------------------- |\n| `ticks`      | Число        | Длительность неуязвимости (в тиках)      |","player::set_item_cooldown":"```justcode\nplayer::set_item_cooldown\n```\n\n**Имя:** Установить задержку предмета\\\n**Тип:** Действие без значения\\\n**Описание:** Применяет визуальный эффект шкалы задержки для всех предметов выбранного типа.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Задержка будет применена ко всем предметам выбранного типа.\n\n**Пример использования:** \n```justcode\nplayer::set_item_cooldown(1, item(\"stick\"), sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nplayer::set_item_cooldown(cooldown=1, item=item(\"stick\"), sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**                   |\n| :--------- | :------ | :------------------------ |\n| `cooldown`      | Число        | Задержка в тиках               |\n| `item`          | Предмет      | Тип предмета для задержки      |\n| `sound`         | Звук         | Звук сброса задержки           |","player::set_item_group_cooldown":"```justcode\nplayer::set_item_group_cooldown\n```\n\n**Имя:** Установить задержку для группы предметов\\\n**Тип:** Действие без значения\\\n**Описание:** Применяет визуальный эффект шкалы задержки для всех предметов указанной группы.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Задержка будет применена ко всем предметам, которые относятся к указанной группе.\n\n**Пример использования:** \n```justcode\nplayer::set_item_group_cooldown(\"key\", 1);\n\n//Или в сухую по ключам\n\nplayer::set_item_group_cooldown(key=\"key\", cooldown=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**          |\n| :--------- | :------ | :--------------- |\n| `key`           | Текст        | Группа предметов      |\n| `cooldown`      | Число        | Задержка              |","player::set_items":"```justcode\nplayer::set_items\n```\n\n**Имя:** Установить предметы\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает в инвентарь игрока соответственно предметы из сундука.\n\n**Пример использования:** \n```justcode\nplayer::set_items([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую по ключам\n\nplayer::set_items(items=[item(\"stick\"), item(\"stick\")]);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**                                     |\n| :------ | :-------------- | :------------------------------------------ |\n| `items`      | список[Предмет]      | Предметы для выдачи в соответствующие слоты      |","player::set_max_health":"```justcode\nplayer::set_max_health\n```\n\n**Имя:** Установить максимальное здоровье игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает максимальное количество здоровья для игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_max_health(1, \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_max_health(health=1, heal=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**              | **Описание**                          |\n| :------- | :-------------- | :------------------------------- |\n| `health`      | Число                | Максимальное количество здоровья      |\n| `heal`        | Маркер               | Исцелить игрока                       |\n|               | **FALSE** - Нет      |                                       |\n|               | **TRUE** - Да        |                                       |","player::set_movement_speed":"```justcode\nplayer::set_movement_speed\n```\n\n**Имя:** Установить скорость движения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает скорость движения игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_movement_speed(1, \"FLY\");\n\n//Или в сухую по ключам\n\nplayer::set_movement_speed(distance=1, movement_type=\"FLY\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                | **Описание**           |\n| :-------------- | :---------------- | :---------------- |\n| `distance`           | Число                  | Скорость движения      |\n| `movement_type`      | Маркер                 | Тип движения           |\n|                      | **FLY** - Полёт        |                        |\n|                      | **WALK** - Ходьба      |                        |","player::set_nametag_visible":"```justcode\nplayer::set_nametag_visible\n```\n\n**Имя:** Отображение ника игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Отобразит или скроет ник над головой.\n\n**Пример использования:** \n```justcode\nplayer::set_nametag_visible(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_nametag_visible(visible=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**                        | **Описание**          |\n| :-------- | :------------------------ | :--------------- |\n| `visible`      | Маркер                         | Отображение ника      |\n|                | **FALSE** - Не отображать      |                       |\n|                | **TRUE** - Отображать          |                       |","player::set_player_list_info":"```justcode\nplayer::set_player_list_info\n```\n\n**Имя:** Установить текст в списке игроков\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает текст над или под списком игроков для игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_player_list_info([\"text\", \"text\"], \"CONCATENATION\", \"FOOTER\");\n\n//Или в сухую по ключам\n\nplayer::set_player_list_info(text=[\"text\", \"text\"], merging=\"CONCATENATION\", position=\"FOOTER\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                        | **Описание**                |\n| :--------- | :---------------------------------------- | :--------------------- |\n| `text`          | список[Текст]                                  | Текст в списке игроков      |\n| `merging`       | Маркер                                         | Объединение текста          |\n|                 | **CONCATENATION** - Объединение                |                             |\n|                 | **SEPARATE_LINES** - Разделение на строки      |                             |\n|                 | **SPACES** - Разделение пробелом               |                             |\n| `position`      | Маркер                                         | Позиция                     |\n|                 | **FOOTER** - Снизу                             |                             |\n|                 | **HEADER** - Сверху                            |                             |","player::set_pose":"```justcode\nplayer::set_pose\n```\n\n**Имя:** Установить позу игроку\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает определённую позу игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_pose(\"CROAKING\", \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_pose(pose=\"CROAKING\", locked=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                                                | **Описание**           |\n| :------- | :------------------------------------------------ | :---------------- |\n| `pose`        | Маркер                                                 | Отображаемая поза      |\n|               | **CROAKING** - Кваканье (для Жаб)                      |                        |\n|               | **CROUCHING** - Приседание                             |                        |\n|               | **DIGGING** - Зарывание в землю (для Хранителя)        |                        |\n|               | **DYING** - Смерть                                     |                        |\n|               | **EMERGING** - Появление из земли (для Хранителя)      |                        |\n|               | **FALL_FLYING** - Полёт на Элитрах                     |                        |\n|               | **INHALING** - Вдыхание (для Вихря)                    |                        |\n|               | **LONG_JUMPING** - Длинный прыжок                      |                        |\n|               | **ROARING** - Рёв (для Хранителя)                      |                        |\n|               | **SHOOTING** - Выстреливание (для Вихря)               |                        |\n|               | **SITTING** - Сидение                                  |                        |\n|               | **SLEEPING** - Лежание                                 |                        |\n|               | **SLIDING** - Скольжение (для Вихря)                   |                        |\n|               | **SNEAKING** - None                                    |                        |\n|               | **SNIFFING** - Нюханье (для Хранителя)                 |                        |\n|               | **SPIN_ATTACK** - Использование Тягуна                 |                        |\n|               | **STANDING** - Обычное состояние                       |                        |\n|               | **SWIMMING** - Плавание                                |                        |\n|               | **USING_TONGUE** - Использование языка (для Жаб)       |                        |\n| `locked`      | Маркер                                                 | Блокировка позы        |\n|               | **FALSE** - Выключить                                  |                        |\n|               | **TRUE** - Включить                                    |                        |","player::set_pvp":"```justcode\nplayer::set_pvp\n```\n\n**Имя:** Установить разрешение атаковать игроков\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает разрешение игроку атаковать других игроков и наносить им урон.\n\n**Пример использования:** \n```justcode\nplayer::set_pvp(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_pvp(pvp=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**              | **Описание**         |\n| :------ | :-------------- | :-------------- |\n| `pvp`        | Маркер               | Может атаковать      |\n|              | **FALSE** - Нет      |                      |\n|              | **TRUE** - Да        |                      |","player::set_rain_level":"```justcode\nplayer::set_rain_level\n```\n\n**Имя:** Установить уровень дождя\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает уровень дождя игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_rain_level(1);\n\n//Или в сухую по ключам\n\nplayer::set_rain_level(rain_level=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**                     |\n| :----------- | :------ | :-------------------------- |\n| `rain_level`      | Число        | Уровень дождя (от 0 до 100)      |","player::set_rotation":"```justcode\nplayer::set_rotation\n```\n\n**Имя:** Установить поворот\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает поворот игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_rotation(1, 2);\n\n//Или в сухую по ключам\n\nplayer::set_rotation(yaw=1, pitch=2);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**                      |\n| :------ | :------ | :--------------------------- |\n| `yaw`        | Число        | Горизонтальный поворот (yaw)      |\n| `pitch`      | Число        | Вертикальный поворот (pitch)      |","player::set_rotation_by_vector":"```justcode\nplayer::set_rotation_by_vector\n```\n\n**Имя:** Установить поворот по вектору\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает поворот игрока по вектору.\n\n**Пример использования:** \n```justcode\nplayer::set_rotation_by_vector(vector(0,0,0));\n\n//Или в сухую по ключам\n\nplayer::set_rotation_by_vector(vector=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**      | **Описание**             |\n| :------- | :------ | :------------------ |\n| `vector`      | Вектор       | Вектор для поворота      |","player::set_saturation":"```justcode\nplayer::set_saturation\n```\n\n**Имя:** Установить насыщенность\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает второстепенный уровень голода (насыщенность) игроку.\n\n**Пример использования:** \n```justcode\nplayer::set_saturation(1, \"ADD\");\n\n//Или в сухую по ключам\n\nplayer::set_saturation(saturation=1, mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**              |\n| :----------- | :-------------------- | :------------------- |\n| `saturation`      | Число                      | Уровень насыщенности      |\n| `mode`            | Маркер                     | Режим установки           |\n|                   | **ADD** - Прибавление      |                           |\n|                   | **SET** - Установка        |                           |","player::set_simulation_distance":"```justcode\nplayer::set_simulation_distance\n```\n\n**Имя:** Установить дистанцию симуляции\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает дистанцию симуляции чанков для игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_simulation_distance(1);\n\n//Или в сухую по ключам\n\nplayer::set_simulation_distance(distance=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**                             |\n| :--------- | :------ | :---------------------------------- |\n| `distance`      | Число        | Дистанция симуляции в чанках (2-32)      |","player::set_skin":"```justcode\nplayer::set_skin\n```\n\n**Имя:** Установить скин\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает скин указанного игрока для цели события.\n\n**Пример использования:** \n```justcode\nplayer::set_skin(\"name_or_uuid\", \"MOJANG\");\n\n//Или в сухую по ключам\n\nplayer::set_skin(name_or_uuid=\"name_or_uuid\", server_type=\"MOJANG\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                       | **Описание**                             |\n| :------------- | :----------------------- | :---------------------------------- |\n| `name_or_uuid`      | Текст                         | Имя, UUID или ссылка на изображение      |\n| `server_type`       | Маркер                        | Тип сервера скинов                       |\n|                     | **MOJANG** - Скин Mojang      |                                          |\n|                     | **SERVER** - Скин JustMC      |                                          |","player::set_slot_item":"```justcode\nplayer::set_slot_item\n```\n\n**Имя:** Установить предмет в слот\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает предмет в слот в инвентаре игрока.\n\n**Пример использования:** \n```justcode\nplayer::set_slot_item(item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nplayer::set_slot_item(item=item(\"stick\"), slot=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**            |\n| :------ | :------ | :----------------- |\n| `item`       | Предмет      | Предмет для выдачи      |\n| `slot`       | Число        | Слот для выдачи         |","player::set_spawn_point":"```justcode\nplayer::set_spawn_point\n```\n\n**Имя:** Установить местоположение возрождения\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает игроку новое местоположение возрождения.\n\n**Пример использования:** \n```justcode\nplayer::set_spawn_point(location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nplayer::set_spawn_point(spawn_point=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**             | **Описание**                    |\n| :------------ | :------------- | :------------------------- |\n| `spawn_point`      | Местоположение      | Местоположение возрождения      |","player::set_thunder_level":"```justcode\nplayer::set_thunder_level\n```\n\n**Имя:** Установить уровень грозы\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает уровень грозы игроку.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Для установки необходима дождливая погода.\n\n**Пример использования:** \n```justcode\nplayer::set_thunder_level(1);\n\n//Или в сухую по ключам\n\nplayer::set_thunder_level(thunder_level=1);\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**      | **Описание**                     |\n| :-------------- | :------ | :-------------------------- |\n| `thunder_level`      | Число        | Уровень грозы (от 0 до 100)      |","player::set_tick_rate":"```justcode\nplayer::set_tick_rate\n```\n\n**Имя:** Установить тик-рейт\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает игроку тик-рейт, не влияя на других игроков.\n\n**Пример использования:** \n```justcode\nplayer::set_tick_rate(1);\n\n//Или в сухую по ключам\n\nplayer::set_tick_rate(tick_rate=1);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**      | **Описание**      |\n| :---------- | :------ | :----------- |\n| `tick_rate`      | Число        | Тик-рейт          |","player::set_time":"```justcode\nplayer::set_time\n```\n\n**Имя:** Установить время игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Установить время игроку, не меняя его для остальных игроков.\n\n**Пример использования:** \n```justcode\nplayer::set_time(1);\n\n//Или в сухую по ключам\n\nplayer::set_time(time=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**       |\n| :------ | :------ | :------------ |\n| `time`       | Число        | Время в тиках      |","player::set_velocity":"```justcode\nplayer::set_velocity\n```\n\n**Имя:** Запустить по вектору\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает игрока по указанному вектору.\n\n**Пример использования:** \n```justcode\nplayer::set_velocity(vector(0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_velocity(velocity=vector(0,0,0), increment=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                    | **Описание**                   |\n| :---------- | :-------------------- | :------------------------ |\n| `velocity`       | Вектор                     | Вектор движения                |\n| `increment`      | Маркер                     | Учитывать текущую инерцию      |\n|                  | **FALSE** - Выключено      |                                |\n|                  | **TRUE** - Включено        |                                |","player::set_visual_fire":"```justcode\nplayer::set_visual_fire\n```\n\n**Имя:** Установить визуальный огонь\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает игроку эффект горения.\n\n**Пример использования:** \n```justcode\nplayer::set_visual_fire(\"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::set_visual_fire(visual_fire=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                         | **Описание**          |\n| :------------ | :------------------------- | :--------------- |\n| `visual_fire`      | Маркер                          | Визуальный огонь      |\n|                    | **FALSE** - Выключить           |                       |\n|                    | **NOT_SET** - По умолчанию      |                       |\n|                    | **TRUE** - Включить             |                       |","player::set_weather":"```justcode\nplayer::set_weather\n```\n\n**Имя:** Установить погоду\\\n**Тип:** Действие без значения\\\n**Описание:** Установить погоду для игрока, не влияя на других игроков.\n\n**Пример использования:** \n```justcode\nplayer::set_weather(\"CLEAR\");\n\n//Или в сухую по ключам\n\nplayer::set_weather(weather_type=\"CLEAR\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                       | **Описание**      |\n| :------------- | :----------------------- | :----------- |\n| `weather_type`      | Маркер                        | Тип погоды        |\n|                     | **CLEAR** - Солнечная         |                   |\n|                     | **DOWNFALL** - Дождливая      |                   |","player::set_world_border":"```justcode\nplayer::set_world_border\n```\n\n**Имя:** Установить границу мира игроку\\\n**Тип:** Действие без значения\\\n**Описание:** Установить границу мира для игрока, не меняя её для других игроков.\n\n**Пример использования:** \n```justcode\nplayer::set_world_border(location(0,0,0,0,0), 1, 2);\n\n//Или в сухую по ключам\n\nplayer::set_world_border(center=location(0,0,0,0,0), size=1, warning=2);\n```\n\n**Аргументы:**\n\n| **Имя**        | **Тип**             | **Описание**                                 |\n| :-------- | :------------- | :-------------------------------------- |\n| `center`       | Местоположение      | Центр границы мира                           |\n| `size`         | Число               | Размер границы мира                          |\n| `warning`      | Число               | Расстояние до появления красной обводки      |","player::shift_world_border":"```justcode\nplayer::shift_world_border\n```\n\n**Имя:** Передвинуть границу мира\\\n**Тип:** Действие без значения\\\n**Описание:** Передвинуть границу мира для игрока, не меняя её для других игроков.\n\n**Пример использования:** \n```justcode\nplayer::shift_world_border(1, 2, 3);\n\n//Или в сухую по ключам\n\nplayer::shift_world_border(old_size=1, size=2, time=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**      | **Описание**                    |\n| :--------- | :------ | :------------------------- |\n| `old_size`      | Число        | Старый размер границы мира      |\n| `size`          | Число        | Новый размер границы мира       |\n| `time`          | Число        | Время изменения размера         |","player::show_debug_marker":"```justcode\nplayer::show_debug_marker\n```\n\n**Имя:** Показать отладочный маркер\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает игроку отладочный маркер на местоположении на указанное время. Красный и синий цвет работают для игроков на версии 1.19.4 и выше.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Оставьте аргумент \\\"Отображаемое имя\\\" пустым, чтобы полностью скрыть имя.\n\n**Пример использования:** \n```justcode\nplayer::show_debug_marker(location(0,0,0,0,0), \"name\", 1, 2, 3, 4, 5);\n\n//Или в сухую по ключам\n\nplayer::show_debug_marker(location=location(0,0,0,0,0), name=\"name\", duration=1, red=2, green=3, blue=4, alpha=5);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                                       |\n| :--------- | :------------- | :-------------------------------------------- |\n| `location`      | Местоположение      | Местоположение появления                           |\n| `name`          | Текст               | Отображаемое имя                                   |\n| `duration`      | Число               | Длительность в миллисекундах (не обязательно)      |\n| `red`           | Число               | Красный цвет (от 0 до 100)                         |\n| `green`         | Число               | Зелёный цвет (от 0 до 100)                         |\n| `blue`          | Число               | Синий цвет (от 0 до 100)                           |\n| `alpha`         | Число               | Прозрачность (от 0 до 100)                         |","player::show_demo_screen":"```justcode\nplayer::show_demo_screen\n```\n\n**Имя:** Показать экран демо-режима\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает игроку экран демо-режима.\n\n**Пример использования:** \n```justcode\nplayer::show_demo_screen();\n```\n\n","player::show_dialog_menu_from_nbt":"```justcode\nplayer::show_dialog_menu_from_nbt\n```\n\n**Имя:** Показать диалоговое окно\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает игроку диалоговое окно из NBT-тегов.\n\n**Пример использования:** \n```justcode\nplayer::show_dialog_menu_from_nbt(\"dialog_nbt\");\n\n//Или в сухую по ключам\n\nplayer::show_dialog_menu_from_nbt(dialog_nbt=\"dialog_nbt\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**      | **Описание**                   |\n| :----------- | :------ | :------------------------ |\n| `dialog_nbt`      | Текст        | NBT-теги диалогового окна      |","player::show_inventory_menu":"```justcode\nplayer::show_inventory_menu\n```\n\n**Имя:** Показать меню\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает игроку инвентарное меню с выбранными предметами и названием.\n\n**Пример использования:** \n```justcode\nplayer::show_inventory_menu([item(\"stick\"), item(\"stick\")], \"name\", \"custom_id\", \"ANVIL\");\n\n//Или в сухую по ключам\n\nplayer::show_inventory_menu(items=[item(\"stick\"), item(\"stick\")], name=\"name\", custom_id=\"custom_id\", inventory_type=\"ANVIL\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                  | **Описание**            |\n| :--------------- | :---------------------------------- | :----------------- |\n| `items`               | список[Предмет]                          | Предметы инвентаря      |\n| `name`                | Текст                                    | Название инвентаря      |\n| `custom_id`           | Текст                                    | Кастомный ID            |\n| `inventory_type`      | Маркер                                   | Тип инвентаря           |\n|                       | **ANVIL** - Наковальня                   |                         |\n|                       | **BARREL** - Бочка                       |                         |\n|                       | **BEACON** - Маяк                        |                         |\n|                       | **BLAST_FURNACE** - Плавильная печь      |                         |\n|                       | **BREWING** - Зельеварка                 |                         |\n|                       | **CARTOGRAPHY** - Стол картографа        |                         |\n|                       | **CHEST** - Сундук                       |                         |\n|                       | **COMPOSTER** - Компостер                |                         |\n|                       | **CRAFTER** - Сборщик                    |                         |\n|                       | **CRAFTING** - Не открыт                 |                         |\n|                       | **CREATIVE** - Инвентарь креатива        |                         |\n|                       | **DISPENSER** - Раздатчик                |                         |\n|                       | **DROPPER** - Выбрасыватель              |                         |\n|                       | **ENCHANTING** - Чародейский стол        |                         |\n|                       | **ENDER_CHEST** - Эндер-сундук           |                         |\n|                       | **FURNACE** - Печь                       |                         |\n|                       | **GRINDSTONE** - Точило                  |                         |\n|                       | **HOPPER** - Воронка                     |                         |\n|                       | **LECTERN** - Кафедра                    |                         |\n|                       | **LOOM** - Ткацкий станок                |                         |\n|                       | **MERCHANT** - Торговец                  |                         |\n|                       | **PLAYER** - Инвентарь игрока            |                         |\n|                       | **SHULKER_BOX** - Шалкеровый ящик        |                         |\n|                       | **SMITHING** - Стол кузнеца              |                         |\n|                       | **SMOKER** - Коптильня                   |                         |\n|                       | **STONECUTTER** - Камнерез               |                         |\n|                       | **WORKBENCH** - Верстак                  |                         |","player::show_scoreboard":"```justcode\nplayer::show_scoreboard\n```\n\n**Имя:** Показать скорборд\\\n**Тип:** Действие без значения\\\n**Описание:** Отображает определённый скорборд игроку. Для отображения указанный скорборд должен иметь минимум одно значение.\n\n**Пример использования:** \n```justcode\nplayer::show_scoreboard(\"id\");\n\n//Или в сухую по ключам\n\nplayer::show_scoreboard(id=\"id\");\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**      |\n| :------ | :------ | :----------- |\n| `id`         | Текст        | ID скорборда      |","player::show_win_screen":"```justcode\nplayer::show_win_screen\n```\n\n**Имя:** Показать экран титров\\\n**Тип:** Действие без значения\\\n**Описание:** Показывает игроку экран титров.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Действие \\\"Закрыть Меню\\\" закрывает титры.\n\n**Пример использования:** \n```justcode\nplayer::show_win_screen();\n```\n\n","player::spectate_target":"```justcode\nplayer::spectate_target\n```\n\n**Имя:** Следить за целью\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает цель слежения игрока в режиме наблюдателя.\n\n**Пример использования:** \n```justcode\nplayer::spectate_target(\"name_or_uuid\");\n\n//Или в сухую по ключам\n\nplayer::spectate_target(name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**      | **Описание**           |\n| :------------- | :------ | :---------------- |\n| `name_or_uuid`      | Текст        | Имя или UUID цели      |","player::stop_sound":"```justcode\nplayer::stop_sound\n```\n\n**Имя:** Остановить звук\\\n**Тип:** Действие без значения\\\n**Описание:** Останавливает все или определённые звуки для игрока.\n\n**Пример использования:** \n```justcode\nplayer::stop_sound([sound(\"entity.zombie.hurt\"), sound(\"entity.zombie.hurt\")]);\n\n//Или в сухую по ключам\n\nplayer::stop_sound(sounds=[sound(\"entity.zombie.hurt\"), sound(\"entity.zombie.hurt\")]);\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**           | **Описание**               |\n| :------- | :----------- | :-------------------- |\n| `sounds`      | список[Звук]      | Эффекты для остановки      |","player::stop_sounds_by_source":"```justcode\nplayer::stop_sounds_by_source\n```\n\n**Имя:** Остановить звуки по источнику\\\n**Тип:** Действие без значения\\\n**Описание:** Останавливает все звуки по определённому источнику.\n\n**Пример использования:** \n```justcode\nplayer::stop_sounds_by_source(\"AMBIENT\");\n\n//Или в сухую по ключам\n\nplayer::stop_sounds_by_source(source=\"AMBIENT\");\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**                                           | **Описание**        |\n| :------- | :------------------------------------------- | :------------- |\n| `source`      | Маркер                                            | Источник звука      |\n|               | **AMBIENT** - Окружение (ambient)                 |                     |\n|               | **BLOCK** - Блоки (block)                         |                     |\n|               | **HOSTILE** - Враждебные существа (hostile)       |                     |\n|               | **MASTER** - Общий (master)                       |                     |\n|               | **MUSIC** - Музыка (music)                        |                     |\n|               | **NEUTRAL** - Дружелюбные существа (neutral)      |                     |\n|               | **PLAYER** - Игроки (player)                      |                     |\n|               | **RECORD** - Музыкальные блоки (record)           |                     |\n|               | **VOICE** - Голос/Речь (voice)                    |                     |\n|               | **WEATHER** - Погода (weather)                    |                     |","player::swing_hand":"```justcode\nplayer::swing_hand\n```\n\n**Имя:** Проиграть анимацию взмаха руки\\\n**Тип:** Действие без значения\\\n**Описание:** Проигрывает для игрока анимацию взмаха руки.\n\n**Пример использования:** \n```justcode\nplayer::swing_hand(\"MAIN\");\n\n//Или в сухую по ключам\n\nplayer::swing_hand(hand_type=\"MAIN\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                       | **Описание**      |\n| :---------- | :----------------------- | :----------- |\n| `hand_type`      | Маркер                        | Тип руки          |\n|                  | **MAIN** - Главная            |                   |\n|                  | **OFF** - Второстепенная      |                   |","player::teleport":"```justcode\nplayer::teleport\n```\n\n**Имя:** Телепортация\\\n**Тип:** Действие без значения\\\n**Описание:** Телепортирует игрока в выбранное местоположение.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Закрывает открытое инвентарное меню.\n\n**Пример использования:** \n```justcode\nplayer::teleport(location(0,0,0,0,0), \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nplayer::teleport(location=location(0,0,0,0,0), keep_rotation=\"FALSE\", keep_velocity=\"FALSE\", dismount=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                    | **Описание**                      |\n| :-------------- | :-------------------- | :--------------------------- |\n| `location`           | Местоположение             | Новая позиция                     |\n| `keep_rotation`      | Маркер                     | Оставить текущий поворот          |\n|                      | **FALSE** - Выключено      |                                   |\n|                      | **TRUE** - Включено        |                                   |\n| `keep_velocity`      | Маркер                     | Сохранение инерции                |\n|                      | **FALSE** - Выключить      |                                   |\n|                      | **TRUE** - Включить        |                                   |\n| `dismount`           | Маркер                     | Спешиться после телепортации      |\n|                      | **FALSE** - Нет            |                                   |\n|                      | **TRUE** - Да              |                                   |","player::teleport_sequence":"```justcode\nplayer::teleport_sequence\n```\n\n**Имя:** Последовательность телепортаций\\\n**Тип:** Действие без значения\\\n**Описание:** Телепортирует игрока между местоположениями с заданной задержкой.\n\n**Пример использования:** \n```justcode\nplayer::teleport_sequence([location(0,0,0,0,0), location(0,0,0,0,0)], 1);\n\n//Или в сухую по ключам\n\nplayer::teleport_sequence(locations=[location(0,0,0,0,0), location(0,0,0,0,0)], delay=1);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                     | **Описание**                  |\n| :---------- | :--------------------- | :----------------------- |\n| `locations`      | список[Местоположение]      | Позиции для телепортации      |\n| `delay`          | Число                       | Задержка в тиках              |","repeat::adjacently":"```justcode\nrepeat::adjacently\n```\n\n**Имя:** Проход по смежным блокам\\\n**Тип:** Действие без значения\\\n**Описание:** Присваивает текущее местоположение в указанную переменную среди соседних блоков относительно заданного местоположения.\n\n**Пример использования:** \n```justcode\nrepeat::adjacently(location(0,0,0,0,0), \"FALSE\", \"FALSE\", \"ADJACENT\"){`variable`->\n    player::message(\"Код в цикле\");\n}\n\n//Или в сухую по ключам\n\nrepeat::adjacently(variable=`variable`, origin=location(0,0,0,0,0), change_rotation=\"FALSE\", include_self=\"FALSE\", pattern=\"ADJACENT\"){\n    player::message(\"Код в цикле\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                          | **Описание**                                                               |\n| :---------------- | :-------------------------- | :-------------------------------------------------------------------- |\n| `variable`             | Переменная                       | Для присвоения местоположения                                              |\n| `origin`               | Местоположение                   | Центральный блок                                                           |\n| `change_rotation`      | Маркер                           | Поворачивать направление взгляда элемента относительно местоположения      |\n|                        | **FALSE** - Не поворачивать      |                                                                            |\n|                        | **TRUE** - Поворачивать          |                                                                            |\n| `include_self`         | Маркер                           | Учитывать центральный блок                                                 |\n|                        | **FALSE** - Не учитывать         |                                                                            |\n|                        | **TRUE** - Учитывать             |                                                                            |\n| `pattern`              | Маркер                           | Тип выбора смежных блоков                                                  |\n|                        | **ADJACENT** - Примыкающий       |                                                                            |\n|                        | **CARDINAL** - Кардинальный      |                                                                            |\n|                        | **CUBE** - Кубический            |                                                                            |\n|                        | **SQUARE** - Квадратный          |                                                                            |","repeat::dummy":"```justcode\nrepeat::dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие без значения\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nrepeat::dummy(){\n    player::message(\"Всё работает\");\n}\n```\n\n","repeat::for_each_in_list":"```justcode\nrepeat::for_each_in_list\n```\n\n**Имя:** Проход по списку\\\n**Тип:** Действие без значения\\\n**Описание:** Обращается к каждому элементу из указанного списка и выдаёт его индекс и значение в указанные переменные.\n\n**Пример использования:** \n```justcode\nrepeat::for_each_in_list(`list`){`index_variable`, `value_variable`->\n    player::message(\"Код в цикле\");\n}\n\n//Или в сухую по ключам\n\nrepeat::for_each_in_list(index_variable=`index_variable`, value_variable=`value_variable`, list=`list`){\n    player::message(\"Код в цикле\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**         | **Описание**                                    |\n| :--------------- | :--------- | :----------------------------------------- |\n| `index_variable`      | Переменная      | Для присвоения индекса элемента                 |\n| `value_variable`      | Переменная      | Для присвоения значения элемента                |\n| `list`                | Список          | Список, по которому необходимо проходиться      |","repeat::for_each_map_entry":"```justcode\nrepeat::for_each_map_entry\n```\n\n**Имя:** Проход по словарю\\\n**Тип:** Действие без значения\\\n**Описание:** Обращается к каждому элементу из указанного словаря и выдаёт его индекс и значение в указанные переменные.\n\n**Пример использования:** \n```justcode\nrepeat::for_each_map_entry(`map`){`key_variable`, `value_variable`->\n    player::message(\"Код в цикле\");\n}\n\n//Или в сухую по ключам\n\nrepeat::for_each_map_entry(key_variable=`key_variable`, value_variable=`value_variable`, map=`map`){\n    player::message(\"Код в цикле\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**         | **Описание**                                     |\n| :--------------- | :--------- | :------------------------------------------ |\n| `key_variable`        | Переменная      | Переменная для присвоения ключа элемента         |\n| `value_variable`      | Переменная      | Переменная для присвоения значения элемента      |\n| `map`                 | Словарь         | Словарь, по которому необходимо проходиться      |","repeat::forever":"```justcode\nrepeat::forever\n```\n\n**Имя:** Повторять вечно\\\n**Тип:** Действие без значения\\\n**Описание:** Постоянно повторяет код внутри поршней.\n\n**Пример использования:** \n```justcode\nrepeat::forever(){\n    player::message(\"Всё работает\");\n}\n```\n\n","repeat::multi_times":"```justcode\nrepeat::multi_times\n```\n\n**Имя:** Цикл со счётчиком\\\n**Тип:** Действие без значения\\\n**Описание:** Выполняет код заданное количество раз.\n\n**Пример использования:** \n```justcode\nrepeat::multi_times(1){`variable`->\n    player::message(\"Код в цикле\");\n}\n\n//Или в сухую по ключам\n\nrepeat::multi_times(variable=`variable`, amount=1){\n    player::message(\"Код в цикле\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                    |\n| :--------- | :--------- | :------------------------- |\n| `variable`      | Переменная      | Текущее значения счетчика       |\n| `amount`        | Число           | Количество выполнений кода      |","repeat::on_circle":"```justcode\nrepeat::on_circle\n```\n\n**Имя:** Проход по окружности\\\n**Тип:** Действие без значения\\\n**Описание:** Последовательно выдаёт местоположение каждого блока окружности с указанными параметрами.\n\n**Пример использования:** \n```justcode\nrepeat::on_circle(location(0,0,0,0,0), 1, 2, vector(0,0,0), 3, \"DEGREES\"){`variable`->\n    player::message(\"Код в цикле\");\n}\n\n//Или в сухую по ключам\n\nrepeat::on_circle(variable=`variable`, center=location(0,0,0,0,0), radius=1, circle_points=2, perpendicular_to_plane=vector(0,0,0), start_angle=3, angle_unit=\"DEGREES\"){\n    player::message(\"Код в цикле\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                       | **Тип**                    | **Описание**                                                       |\n| :----------------------- | :-------------------- | :------------------------------------------------------------ |\n| `variable`                    | Переменная                 | Для присвоения местоположения                                      |\n| `center`                      | Местоположение             | Центр окружности                                                   |\n| `radius`                      | Число                      | Радиус круга                                                       |\n| `circle_points`               | Число                      | Количество точек круга                                             |\n| `perpendicular_to_plane`      | Вектор                     | Нормаль плоскости, к которой окружность будет перпендикулярна      |\n| `start_angle`                 | Число                      | Начальный угол                                                     |\n| `angle_unit`                  | Маркер                     | Тип угла                                                           |\n|                               | **DEGREES** - Градусы      |                                                                    |\n|                               | **RADIANS** - Радианы      |                                                                    |","repeat::on_grid":"```justcode\nrepeat::on_grid\n```\n\n**Имя:** Проход по региону\\\n**Тип:** Действие без значения\\\n**Описание:** Выдаёт местоположение каждого блока из заданного региона в указанную переменную.\n\n**Пример использования:** \n```justcode\nrepeat::on_grid(location(0,0,0,0,0), location(0,0,0,0,0)){`variable`->\n    player::message(\"Код в цикле\");\n}\n\n//Или в сухую по ключам\n\nrepeat::on_grid(variable=`variable`, start=location(0,0,0,0,0), end=location(0,0,0,0,0)){\n    player::message(\"Код в цикле\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                                        |\n| :--------- | :------------- | :--------------------------------------------- |\n| `variable`      | Переменная          | Для присвоения текущего местоположения региона      |\n| `start`         | Местоположение      | Начальное местоположение                            |\n| `end`           | Местоположение      | Конечное местоположение                             |","repeat::on_path":"```justcode\nrepeat::on_path\n```\n\n**Имя:** Проход по пути\\\n**Тип:** Действие без значения\\\n**Описание:** Проходит от одного местоположения к другому с определённым шагом, присваивая текущее местоположение в указанную переменную.\n\n**Пример использования:** \n```justcode\nrepeat::on_path(1, [location(0,0,0,0,0), location(0,0,0,0,0)], \"FALSE\"){`variable`->\n    player::message(\"Код в цикле\");\n}\n\n//Или в сухую по ключам\n\nrepeat::on_path(variable=`variable`, step=1, locations=[location(0,0,0,0,0), location(0,0,0,0,0)], rotation=\"FALSE\"){\n    player::message(\"Код в цикле\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                       | **Описание**                                     |\n| :---------- | :----------------------- | :------------------------------------------ |\n| `variable`       | Переменная                    | Для присвоения местоположения                    |\n| `step`           | Число                         | Расстояние между точками                         |\n| `locations`      | список[Местоположение]        | Местоположения концов прямых                     |\n| `rotation`       | Маркер                        | Сохранять поворот указанного местоположения      |\n|                  | **FALSE** - Не сохранять      |                                                  |\n|                  | **TRUE** - Сохранять          |                                                  |","repeat::on_range":"```justcode\nrepeat::on_range\n```\n\n**Имя:** Цикл в диапазоне\\\n**Тип:** Действие без значения\\\n**Описание:** Присваивает текущее число в указанную переменную из заданного диапазона с определённым шагом.\n\n**Пример использования:** \n```justcode\nrepeat::on_range(1, 2, 3){`variable`->\n    player::message(\"Код в цикле\");\n}\n\n//Или в сухую по ключам\n\nrepeat::on_range(variable=`variable`, start=1, end=2, interval=3){\n    player::message(\"Код в цикле\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                    |\n| :--------- | :--------- | :------------------------- |\n| `variable`      | Переменная      | Текущее число из диапазона      |\n| `start`         | Число           | Нижняя граница диапазона        |\n| `end`           | Число           | Верхняя граница диапазона       |\n| `interval`      | Число           | Шаг                             |","repeat::on_sphere":"```justcode\nrepeat::on_sphere\n```\n\n**Имя:** Проход по сфере\\\n**Тип:** Действие без значения\\\n**Описание:** Последовательно выдаёт местоположение каждой точки на сфере с указанными параметрами.\n\n**Пример использования:** \n```justcode\nrepeat::on_sphere(location(0,0,0,0,0), 1, 2, \"INWARDS\"){`variable`->\n    player::message(\"Код в цикле\");\n}\n\n//Или в сухую по ключам\n\nrepeat::on_sphere(variable=`variable`, center=location(0,0,0,0,0), radius=1, points=2, rotate_location=\"INWARDS\"){\n    player::message(\"Код в цикле\");\n}\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                  | **Описание**                               |\n| :---------------- | :---------------------------------- | :------------------------------------ |\n| `variable`             | Переменная                               | Текущее местоположение точки на сфере      |\n| `center`               | Местоположение                           | Центр сферы                                |\n| `radius`               | Число                                    | Радиус сферы                               |\n| `points`               | Число                                    | Количество точек                           |\n| `rotate_location`      | Маркер                                   | Направление местоположения у точек         |\n|                        | **INWARDS** - К центру                   |                                            |\n|                        | **NO_CHANGES** - Как в месположении      |                                            |\n|                        | **OUTWARDS** - От центра                 |                                            |","repeat::while":"```justcode\nrepeat::while\n```\n\n**Имя:** Цикл с условием\\\n**Тип:** Действие без значения\\\n**Описание:** Выполняет код до тех пор, пока выбранное условие является истиной.\n\n**Пример использования:** \n```justcode\nrepeat::while(a1.exists()){\n    player::message(\"Всё работает\");\n}\n```\n\n","select::add_all_entities":"```justcode\nselect::add_all_entities\n```\n\n**Имя:** Добавить всех сущностей\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку всех сущностей из мира.\n\n**Пример использования:** \n```justcode\nselect::add_all_entities();\n```\n\n","select::add_all_mobs":"```justcode\nselect::add_all_mobs\n```\n\n**Имя:** Добавить всех мобов\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку всех мобов из мира.\n\n**Пример использования:** \n```justcode\nselect::add_all_mobs();\n```\n\n","select::add_all_players":"```justcode\nselect::add_all_players\n```\n\n**Имя:** Добавить всех игроков\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку всех игроков из мира.\n\n**Пример использования:** \n```justcode\nselect::add_all_players();\n```\n\n","select::add_entity_by_conditional":"```justcode\nselect::add_entity_by_conditional\n```\n\n**Имя:** Добавить сущность по условию\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет сущностей, если выполняется указанное условие.\n\n**Пример использования:** \n```justcode\nselect::add_entity_by_conditional(a1.exists());\n```\n\n","select::add_entity_by_name":"```justcode\nselect::add_entity_by_name\n```\n\n**Имя:** Добавить сущность по имени/UUID\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку сущность с указанным именем/UUID.\n\n**Пример использования:** \n```justcode\nselect::add_entity_by_name([\"name_or_uuid\", \"name_or_uuid\"]);\n\n//Или в сухую по ключам\n\nselect::add_entity_by_name(name_or_uuid=[\"name_or_uuid\", \"name_or_uuid\"]);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**            | **Описание**               |\n| :------------- | :------------ | :-------------------- |\n| `name_or_uuid`      | список[Текст]      | Имя или UUID сущности      |","select::add_event_target":"```justcode\nselect::add_event_target\n```\n\n**Имя:** Добавить цель события\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку цель, которая запустила событие.\n\n**Пример использования:** \n```justcode\nselect::add_event_target(\"DAMAGER\");\n\n//Или в сухую по ключам\n\nselect::add_event_target(selection_type=\"DAMAGER\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                              | **Описание**          |\n| :--------------- | :------------------------------ | :--------------- |\n| `selection_type`      | Маркер                               | Тип цели выборки      |\n|                       | **DAMAGER** - Атакующий              |                       |\n|                       | **DEFAULT** - По умолчанию           |                       |\n|                       | **KILLER** - Убийца                  |                       |\n|                       | **PROJECTILE** - Снаряд стрелка      |                       |\n|                       | **SHOOTER** - Стрелок                |                       |\n|                       | **VICTIM** - Жертва                  |                       |","select::add_last_entity":"```justcode\nselect::add_last_entity\n```\n\n**Имя:** Добавить последнюю появившуюся сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку последнюю появившуюся сущность из мира.\n\n**Пример использования:** \n```justcode\nselect::add_last_entity();\n```\n\n","select::add_last_mob":"```justcode\nselect::add_last_mob\n```\n\n**Имя:** Добавить последнего появившегося моба\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку последнего появившегося моба из мира.\n\n**Пример использования:** \n```justcode\nselect::add_last_mob();\n```\n\n","select::add_mob_by_name":"```justcode\nselect::add_mob_by_name\n```\n\n**Имя:** Добавить моба по имени/UUID\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку моба с указанным именем/UUID.\n\n**Пример использования:** \n```justcode\nselect::add_mob_by_name([\"name_or_uuid\", \"name_or_uuid\"]);\n\n//Или в сухую по ключам\n\nselect::add_mob_by_name(name_or_uuid=[\"name_or_uuid\", \"name_or_uuid\"]);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**            | **Описание**           |\n| :------------- | :------------ | :---------------- |\n| `name_or_uuid`      | список[Текст]      | Имя или UUID моба      |","select::add_player_by_conditional":"```justcode\nselect::add_player_by_conditional\n```\n\n**Имя:** Добавить игрока по условию\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет игроков, если выполняется указанное условие.\n\n**Пример использования:** \n```justcode\nselect::add_player_by_conditional(a1.exists());\n```\n\n","select::add_player_by_name":"```justcode\nselect::add_player_by_name\n```\n\n**Имя:** Добавить игрока по имени/UUID\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку игрока с указанным именем/UUID.\n\n**Пример использования:** \n```justcode\nselect::add_player_by_name([\"name_or_uuid\", \"name_or_uuid\"]);\n\n//Или в сухую по ключам\n\nselect::add_player_by_name(name_or_uuid=[\"name_or_uuid\", \"name_or_uuid\"]);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**            | **Описание**             |\n| :------------- | :------------ | :------------------ |\n| `name_or_uuid`      | список[Текст]      | Имя или UUID игрока      |","select::add_random_entity":"```justcode\nselect::add_random_entity\n```\n\n**Имя:** Добавить случайную сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку случайную сущность из мира.\n\n**Пример использования:** \n```justcode\nselect::add_random_entity();\n```\n\n","select::add_random_mob":"```justcode\nselect::add_random_mob\n```\n\n**Имя:** Добавить случайного моба\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку случайного моба из мира.\n\n**Пример использования:** \n```justcode\nselect::add_random_mob();\n```\n\n","select::add_random_player":"```justcode\nselect::add_random_player\n```\n\n**Имя:** Добавить случайного игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет в выборку случайного игрока из мира.\n\n**Пример использования:** \n```justcode\nselect::add_random_player();\n```\n\n","select::all_entities":"```justcode\nselect::all_entities\n```\n\n**Имя:** Выбрать всех сущностей\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает всех сущностей в мире.\n\n**Пример использования:** \n```justcode\nselect::all_entities();\n```\n\n","select::all_mobs":"```justcode\nselect::all_mobs\n```\n\n**Имя:** Выбрать всех мобов\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает всех мобов в мире.\n\n**Пример использования:** \n```justcode\nselect::all_mobs();\n```\n\n","select::all_players":"```justcode\nselect::all_players\n```\n\n**Имя:** Выбрать всех игроков\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает всех игроков в мире.\n\n**Пример использования:** \n```justcode\nselect::all_players();\n```\n\n","select::dummy":"```justcode\nselect::dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие без значения\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nselect::dummy();\n```\n\n","select::entity_by_conditional":"```justcode\nselect::entity_by_conditional\n```\n\n**Имя:** Выбрать сущность по условию\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает сущностей, если выполняется указанное условие.\n\n**Пример использования:** \n```justcode\nselect::entity_by_conditional(a1.exists());\n```\n\n","select::entity_by_name":"```justcode\nselect::entity_by_name\n```\n\n**Имя:** Выбрать сущность по имени\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает сущность или сущностей по имени или UUID.\n\n**Пример использования:** \n```justcode\nselect::entity_by_name([\"name_or_uuid\", \"name_or_uuid\"]);\n\n//Или в сухую по ключам\n\nselect::entity_by_name(name_or_uuid=[\"name_or_uuid\", \"name_or_uuid\"]);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**            | **Описание**           |\n| :------------- | :------------ | :---------------- |\n| `name_or_uuid`      | список[Текст]      | Имя или UUID цели      |","select::event_target":"```justcode\nselect::event_target\n```\n\n**Имя:** Выбрать цель события\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает цель, которая запустила событие.\n\n**Пример использования:** \n```justcode\nselect::event_target(\"DAMAGER\");\n\n//Или в сухую по ключам\n\nselect::event_target(selection_type=\"DAMAGER\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                              | **Описание**          |\n| :--------------- | :------------------------------ | :--------------- |\n| `selection_type`      | Маркер                               | Тип цели выборки      |\n|                       | **DAMAGER** - Атакующий              |                       |\n|                       | **DEFAULT** - По умолчанию           |                       |\n|                       | **KILLER** - Убийца                  |                       |\n|                       | **PROJECTILE** - Снаряд стрелка      |                       |\n|                       | **SHOOTER** - Стрелок                |                       |\n|                       | **VICTIM** - Жертва                  |                       |","select::filter_by_conditional":"```justcode\nselect::filter_by_conditional\n```\n\n**Имя:** Отфильтровать выборку по условию\\\n**Тип:** Действие без значения\\\n**Описание:** Оставляет в выборке те цели, которые подходят под выбранное условие.\n\n**Пример использования:** \n```justcode\nselect::filter_by_conditional(a1.exists());\n```\n\n","select::filter_by_distance":"```justcode\nselect::filter_by_distance\n```\n\n**Имя:** Отфильтровать выборку по расстоянию\\\n**Тип:** Действие без значения\\\n**Описание:** Оставляет в выборке те цели, которые находятся на расстоянии до местоположения.\n\n**Пример использования:** \n```justcode\nselect::filter_by_distance(location(0,0,0,0,0), 1, \"FALSE\", \"FARTHEST\");\n\n//Или в сухую по ключам\n\nselect::filter_by_distance(location=location(0,0,0,0,0), selection_size=1, ignore_y_axis=\"FALSE\", compare_mode=\"FARTHEST\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                           | **Описание**               |\n| :--------------- | :--------------------------- | :-------------------- |\n| `location`            | Местоположение                    | Местоположение центра      |\n| `selection_size`      | Число                             | Количество целей           |\n| `ignore_y_axis`       | Маркер                            | Игнорировать ось Y         |\n|                       | **FALSE** - Не игнорировать       |                            |\n|                       | **TRUE** - Игнорировать           |                            |\n| `compare_mode`        | Маркер                            | Тип сравнения              |\n|                       | **FARTHEST** - Дальние цели       |                            |\n|                       | **NEAREST** - Ближайшие цели      |                            |","select::filter_by_raycast":"```justcode\nselect::filter_by_raycast\n```\n\n**Имя:** Фильтр рейкастом\\\n**Тип:** Действие без значения\\\n**Описание:** Оставляет в выборке только те цели, в которые попал запущенный луч. Ширина луча работает только на сущностей (увеличивает или уменьшает хитбоксы существ).\n\n**Пример использования:** \n```justcode\nselect::filter_by_raycast(`variable`, location(0,0,0,0,0), 1, 2, 3, \"FALSE\", \"FALSE\", \"ALWAYS\");\n\n//Или в сухую по ключам\n\nselect::filter_by_raycast(variable=`variable`, origin=location(0,0,0,0,0), max_distance=1, ray_size=2, selection_size=3, consider_blocks=\"FALSE\", ignore_passable_blocks=\"FALSE\", fluid_collision_mode=\"ALWAYS\");\n```\n\n**Аргументы:**\n\n| **Имя**                       | **Тип**                                                   | **Описание**                           |\n| :----------------------- | :--------------------------------------------------- | :-------------------------------- |\n| `variable`                    | Переменная                                                | Точка конца луча                       |\n| `origin`                      | Местоположение                                            | Начало луча                            |\n| `max_distance`                | Число                                                     | Длина луча                             |\n| `ray_size`                    | Число                                                     | Ширина луча                            |\n| `selection_size`              | Число                                                     | Максимальное количество сущностей      |\n| `consider_blocks`             | Маркер                                                    | Учитывать блоки                        |\n|                               | **FALSE** - Не учитывать                                  |                                        |\n|                               | **TRUE** - Учитывать                                      |                                        |\n| `ignore_passable_blocks`      | Маркер                                                    | Игнорировать проходимые блоки          |\n|                               | **FALSE** - Не игнорировать                               |                                        |\n|                               | **TRUE** - Игнорировать                                   |                                        |\n| `fluid_collision_mode`        | Маркер                                                    | Игнорировать жидкость                  |\n|                               | **ALWAYS** - Не игнорировать                              |                                        |\n|                               | **NEVER** - Полностью игнорировать                        |                                        |\n|                               | **SOURCE_ONLY** - Учитывать только источник жидкости      |                                        |","select::filter_randomly":"```justcode\nselect::filter_randomly\n```\n\n**Имя:** Отфильтровать выборку случайно\\\n**Тип:** Действие без значения\\\n**Описание:** Оставляет в выборке указанное количество случайных целей.\n\n**Пример использования:** \n```justcode\nselect::filter_randomly(1);\n\n//Или в сухую по ключам\n\nselect::filter_randomly(size=1);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**      | **Описание**          |\n| :------ | :------ | :--------------- |\n| `size`       | Число        | Количество целей      |","select::invert":"```justcode\nselect::invert\n```\n\n**Имя:** Инвертировать выборку\\\n**Тип:** Действие без значения\\\n**Описание:** Создаёт новую выборку, в которую входят все существа, кроме выбранных.\n\n**Пример использования:** \n```justcode\nselect::invert();\n```\n\n","select::last_entity":"```justcode\nselect::last_entity\n```\n\n**Имя:** Выбрать последнюю появившуюся сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает последнюю появившуюся сущность в мире.\n\n**Пример использования:** \n```justcode\nselect::last_entity();\n```\n\n","select::last_mob":"```justcode\nselect::last_mob\n```\n\n**Имя:** Выбрать последнего появившегося моба\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает последнего появившегося моба в мире.\n\n**Пример использования:** \n```justcode\nselect::last_mob();\n```\n\n","select::mob_by_name":"```justcode\nselect::mob_by_name\n```\n\n**Имя:** Выбрать моба по имени\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает моба или мобов по имени или UUID.\n\n**Пример использования:** \n```justcode\nselect::mob_by_name([\"name_or_uuid\", \"name_or_uuid\"]);\n\n//Или в сухую по ключам\n\nselect::mob_by_name(name_or_uuid=[\"name_or_uuid\", \"name_or_uuid\"]);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**            | **Описание**           |\n| :------------- | :------------ | :---------------- |\n| `name_or_uuid`      | список[Текст]      | Имя или UUID цели      |","select::player_by_conditional":"```justcode\nselect::player_by_conditional\n```\n\n**Имя:** Выбрать игрока по условию\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает игроков, если выполняется указанное условие.\n\n**Пример использования:** \n```justcode\nselect::player_by_conditional(a1.exists());\n```\n\n","select::player_by_name":"```justcode\nselect::player_by_name\n```\n\n**Имя:** Выбрать игрока по имени\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает игрока или игроков по имени или UUID.\n\n**Пример использования:** \n```justcode\nselect::player_by_name([\"name_or_uuid\", \"name_or_uuid\"]);\n\n//Или в сухую по ключам\n\nselect::player_by_name(name_or_uuid=[\"name_or_uuid\", \"name_or_uuid\"]);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**            | **Описание**           |\n| :------------- | :------------ | :---------------- |\n| `name_or_uuid`      | список[Текст]      | Имя или UUID цели      |","select::random_entity":"```justcode\nselect::random_entity\n```\n\n**Имя:** Выбрать случайную сущность\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает случайную сущность в мире.\n\n**Пример использования:** \n```justcode\nselect::random_entity();\n```\n\n","select::random_mob":"```justcode\nselect::random_mob\n```\n\n**Имя:** Выбрать случайного моба\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает случайного моба в мире.\n\n**Пример использования:** \n```justcode\nselect::random_mob();\n```\n\n","select::random_player":"```justcode\nselect::random_player\n```\n\n**Имя:** Выбрать случайного игрока\\\n**Тип:** Действие без значения\\\n**Описание:** Выбирает случайного игрока в мире.\n\n**Пример использования:** \n```justcode\nselect::random_player();\n```\n\n","select::reset":"```justcode\nselect::reset\n```\n\n**Имя:** Сбросить выборку\\\n**Тип:** Действие без значения\\\n**Описание:** Сбрасывает всю выборку.\n\n**Пример использования:** \n```justcode\nselect::reset();\n```\n\n","variable::absolute":"```justcode\nvariable::absolute\n```\n\n**Имя:** Модуль числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение модуля выбранного числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::absolute(1);\n\n//Или от объекта\n\n`variable` = (1).absolute();\n\n//Или в сухую позиционно\n\nvariable::absolute(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::absolute(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число в модуле                 |",".absolute":"```justcode\nvariable::absolute\n```\n\n**Имя:** Модуль числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение модуля выбранного числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::absolute(1);\n\n//Или от объекта\n\n`variable` = (1).absolute();\n\n//Или в сухую позиционно\n\nvariable::absolute(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::absolute(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число в модуле                 |","variable::add":"```justcode\nvariable::add\n```\n\n**Имя:** Сложение чисел (+)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной сумму чисел.\n\n**Пример использования:** \n```justcode\n`variable` = variable::add([1, 2]);\n\n//Или в сухую позиционно\n\nvariable::add(`variable`, [1, 2]);\n\n//Или в сухую по ключам\n\nvariable::add(variable=`variable`, value=[1, 2]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `value`         | список[Число]      | Числа для суммирования         |","variable::add_item_enchantment":"```justcode\nvariable::add_item_enchantment\n```\n\n**Имя:** Добавить зачарование предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Добавляет зачарование предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::add_item_enchantment(item(\"stick\"), \"enchantment\", 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").add_item_enchantment(\"enchantment\", 1);\n\n//Или в сухую позиционно\n\nvariable::add_item_enchantment(`variable`, item(\"stick\"), \"enchantment\", 1);\n\n//Или в сухую по ключам\n\nvariable::add_item_enchantment(variable=`variable`, item=item(\"stick\"), enchantment=\"enchantment\", level=1);\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**         | **Описание**                   |\n| :------------ | :--------- | :------------------------ |\n| `variable`         | Переменная      | Переменная для присвоения      |\n| `item`             | Предмет         | Предмет                        |\n| `enchantment`      | Текст           | ID зачарования                 |\n| `level`            | Число           | Уровень зачарования            |",".add_item_enchantment":"```justcode\nvariable::add_item_enchantment\n```\n\n**Имя:** Добавить зачарование предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Добавляет зачарование предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::add_item_enchantment(item(\"stick\"), \"enchantment\", 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").add_item_enchantment(\"enchantment\", 1);\n\n//Или в сухую позиционно\n\nvariable::add_item_enchantment(`variable`, item(\"stick\"), \"enchantment\", 1);\n\n//Или в сухую по ключам\n\nvariable::add_item_enchantment(variable=`variable`, item=item(\"stick\"), enchantment=\"enchantment\", level=1);\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**         | **Описание**                   |\n| :------------ | :--------- | :------------------------ |\n| `variable`         | Переменная      | Переменная для присвоения      |\n| `item`             | Предмет         | Предмет                        |\n| `enchantment`      | Текст           | ID зачарования                 |\n| `level`            | Число           | Уровень зачарования            |","variable::add_item_potion_effects":"```justcode\nvariable::add_item_potion_effects\n```\n\n**Имя:** Установить эффекты зелий предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает эффекты зелий предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::add_item_potion_effects([potion(\"slow_falling\"), potion(\"slow_falling\")], item(\"stick\"), \"FALSE\", \"FALSE\", \"AMBIENT\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").add_item_potion_effects([potion(\"slow_falling\"), potion(\"slow_falling\")], \"FALSE\", \"FALSE\", \"AMBIENT\");\n\n//Или в сухую позиционно\n\nvariable::add_item_potion_effects(`variable`, [potion(\"slow_falling\"), potion(\"slow_falling\")], item(\"stick\"), \"FALSE\", \"FALSE\", \"AMBIENT\");\n\n//Или в сухую по ключам\n\nvariable::add_item_potion_effects(variable=`variable`, potions=[potion(\"slow_falling\"), potion(\"slow_falling\")], item=item(\"stick\"), overwrite=\"FALSE\", show_icon=\"FALSE\", particle_mode=\"AMBIENT\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                        | **Описание**                             |\n| :-------------- | :------------------------ | :---------------------------------- |\n| `variable`           | Переменная                     | Переменная для присвоения                |\n| `potions`            | список[Зелье]                  | Эффекты зелий                            |\n| `item`               | Предмет                        | Предмет                                  |\n| `overwrite`          | Маркер                         | Перезаписывать существующие эффекты      |\n|                      | **FALSE** - Нет                |                                          |\n|                      | **TRUE** - Да                  |                                          |\n| `show_icon`          | Маркер                         | Показывать иконку эффекта                |\n|                      | **FALSE** - Нет                |                                          |\n|                      | **TRUE** - Да                  |                                          |\n| `particle_mode`      | Маркер                         | Показывать частицы                       |\n|                      | **AMBIENT** - Прозрачными      |                                          |\n|                      | **NONE** - Нет                 |                                          |\n|                      | **REGULAR** - Да               |                                          |",".add_item_potion_effects":"```justcode\nvariable::add_item_potion_effects\n```\n\n**Имя:** Установить эффекты зелий предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает эффекты зелий предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::add_item_potion_effects([potion(\"slow_falling\"), potion(\"slow_falling\")], item(\"stick\"), \"FALSE\", \"FALSE\", \"AMBIENT\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").add_item_potion_effects([potion(\"slow_falling\"), potion(\"slow_falling\")], \"FALSE\", \"FALSE\", \"AMBIENT\");\n\n//Или в сухую позиционно\n\nvariable::add_item_potion_effects(`variable`, [potion(\"slow_falling\"), potion(\"slow_falling\")], item(\"stick\"), \"FALSE\", \"FALSE\", \"AMBIENT\");\n\n//Или в сухую по ключам\n\nvariable::add_item_potion_effects(variable=`variable`, potions=[potion(\"slow_falling\"), potion(\"slow_falling\")], item=item(\"stick\"), overwrite=\"FALSE\", show_icon=\"FALSE\", particle_mode=\"AMBIENT\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                        | **Описание**                             |\n| :-------------- | :------------------------ | :---------------------------------- |\n| `variable`           | Переменная                     | Переменная для присвоения                |\n| `potions`            | список[Зелье]                  | Эффекты зелий                            |\n| `item`               | Предмет                        | Предмет                                  |\n| `overwrite`          | Маркер                         | Перезаписывать существующие эффекты      |\n|                      | **FALSE** - Нет                |                                          |\n|                      | **TRUE** - Да                  |                                          |\n| `show_icon`          | Маркер                         | Показывать иконку эффекта                |\n|                      | **FALSE** - Нет                |                                          |\n|                      | **TRUE** - Да                  |                                          |\n| `particle_mode`      | Маркер                         | Показывать частицы                       |\n|                      | **AMBIENT** - Прозрачными      |                                          |\n|                      | **NONE** - Нет                 |                                          |\n|                      | **REGULAR** - Да               |                                          |","variable::add_vectors":"```justcode\nvariable::add_vectors\n```\n\n**Имя:** Сумма векторов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение суммы векторов.\n\n**Пример использования:** \n```justcode\n`variable` = variable::add_vectors([vector(0,0,0), vector(0,0,0)]);\n\n//Или в сухую позиционно\n\nvariable::add_vectors(`variable`, [vector(0,0,0), vector(0,0,0)]);\n\n//Или в сухую по ключам\n\nvariable::add_vectors(variable=`variable`, vectors=[vector(0,0,0), vector(0,0,0)]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `vectors`       | список[Вектор]      | Вектора для суммирования       |","variable::align_location":"```justcode\nvariable::align_location\n```\n\n**Имя:** Округлить местоположение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Округляет местоположение к центру или углу блока и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::align_location(location(0,0,0,0,0), \"KEEP\", \"ALL\", \"BLOCK_CENTER\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).align_location(\"KEEP\", \"ALL\", \"BLOCK_CENTER\");\n\n//Или в сухую позиционно\n\nvariable::align_location(`variable`, location(0,0,0,0,0), \"KEEP\", \"ALL\", \"BLOCK_CENTER\");\n\n//Или в сухую по ключам\n\nvariable::align_location(variable=`variable`, location=location(0,0,0,0,0), rotation_mode=\"KEEP\", coordinates_mode=\"ALL\", align_mode=\"BLOCK_CENTER\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                                | **Описание**                   |\n| :----------------- | :-------------------------------- | :------------------------ |\n| `variable`              | Переменная                             | Переменная для присвоения      |\n| `location`              | Местоположение                         | Местоположение                 |\n| `rotation_mode`         | Маркер                                 | Сохранение поворота            |\n|                         | **KEEP** - Включить                    |                                |\n|                         | **REMOVE** - Выключить                 |                                |\n| `coordinates_mode`      | Маркер                                 | Тип координаты                 |\n|                         | **ALL** - Все координаты               |                                |\n|                         | **X_Z** - Координаты X и Z             |                                |\n|                         | **Y** - Координата Y                   |                                |\n| `align_mode`            | Маркер                                 | Режим округления               |\n|                         | **BLOCK_CENTER** - К центру блока      |                                |\n|                         | **CORNER** - К углу блока              |                                |",".align_location":"```justcode\nvariable::align_location\n```\n\n**Имя:** Округлить местоположение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Округляет местоположение к центру или углу блока и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::align_location(location(0,0,0,0,0), \"KEEP\", \"ALL\", \"BLOCK_CENTER\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).align_location(\"KEEP\", \"ALL\", \"BLOCK_CENTER\");\n\n//Или в сухую позиционно\n\nvariable::align_location(`variable`, location(0,0,0,0,0), \"KEEP\", \"ALL\", \"BLOCK_CENTER\");\n\n//Или в сухую по ключам\n\nvariable::align_location(variable=`variable`, location=location(0,0,0,0,0), rotation_mode=\"KEEP\", coordinates_mode=\"ALL\", align_mode=\"BLOCK_CENTER\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                                | **Описание**                   |\n| :----------------- | :-------------------------------- | :------------------------ |\n| `variable`              | Переменная                             | Переменная для присвоения      |\n| `location`              | Местоположение                         | Местоположение                 |\n| `rotation_mode`         | Маркер                                 | Сохранение поворота            |\n|                         | **KEEP** - Включить                    |                                |\n|                         | **REMOVE** - Выключить                 |                                |\n| `coordinates_mode`      | Маркер                                 | Тип координаты                 |\n|                         | **ALL** - Все координаты               |                                |\n|                         | **X_Z** - Координаты X и Z             |                                |\n|                         | **Y** - Координата Y                   |                                |\n| `align_mode`            | Маркер                                 | Режим округления               |\n|                         | **BLOCK_CENTER** - К центру блока      |                                |\n|                         | **CORNER** - К углу блока              |                                |","variable::align_to_axis_vector":"```justcode\nvariable::align_to_axis_vector\n```\n\n**Имя:** Выровнять вектор\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Выравнивает вектор к ближайшей оси и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::align_to_axis_vector(vector(0,0,0), \"FALSE\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).align_to_axis_vector(\"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::align_to_axis_vector(`variable`, vector(0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::align_to_axis_vector(variable=`variable`, vector=vector(0,0,0), normalize=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                         | **Описание**                   |\n| :---------- | :------------------------- | :------------------------ |\n| `variable`       | Переменная                      | Переменная для присвоения      |\n| `vector`         | Вектор                          | Вектор для выравнивания        |\n| `normalize`      | Маркер                          | Тип выдаваемого вектора        |\n|                  | **FALSE** - Исходной длины      |                                |\n|                  | **TRUE** - Нормализованный      |                                |",".align_to_axis_vector":"```justcode\nvariable::align_to_axis_vector\n```\n\n**Имя:** Выровнять вектор\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Выравнивает вектор к ближайшей оси и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::align_to_axis_vector(vector(0,0,0), \"FALSE\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).align_to_axis_vector(\"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::align_to_axis_vector(`variable`, vector(0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::align_to_axis_vector(variable=`variable`, vector=vector(0,0,0), normalize=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                         | **Описание**                   |\n| :---------- | :------------------------- | :------------------------ |\n| `variable`       | Переменная                      | Переменная для присвоения      |\n| `vector`         | Вектор                          | Вектор для выравнивания        |\n| `normalize`      | Маркер                          | Тип выдаваемого вектора        |\n|                  | **FALSE** - Исходной длины      |                                |\n|                  | **TRUE** - Нормализованный      |                                |","variable::append_component":"```justcode\nvariable::append_component\n```\n\n**Имя:** Объединить стилизуемые тексты\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Объединяет указанные стилизуемые тексты в единый стилизуемый текст и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::append_component([\"components\", \"components\"], \"CONCATENATION\");\n\n//Или в сухую позиционно\n\nvariable::append_component(`variable`, [\"components\", \"components\"], \"CONCATENATION\");\n\n//Или в сухую по ключам\n\nvariable::append_component(variable=`variable`, components=[\"components\", \"components\"], merging=\"CONCATENATION\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                        | **Описание**                            |\n| :----------- | :---------------------------------------- | :--------------------------------- |\n| `variable`        | Переменная                                     | Переменная для присвоения               |\n| `components`      | список[Текст]                                  | Стилизуемые тексты для объединения      |\n| `merging`         | Маркер                                         | Объединение текста                      |\n|                   | **CONCATENATION** - Объединение                |                                         |\n|                   | **SEPARATE_LINES** - Разделение на строки      |                                         |\n|                   | **SPACES** - Разделение пробелом               |                                         |","variable::append_list":"```justcode\nvariable::append_list\n```\n\n**Имя:** Объединить два списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Объединяет два указанных списка в один.\n\n**Пример использования:** \n```justcode\n`variable` = variable::append_list(`list_1`, `list_2`);\n\n//Или от объекта\n\n`variable` = `list_1`.append_list(`list_2`);\n\n//Или в сухую позиционно\n\nvariable::append_list(`variable`, `list_1`, `list_2`);\n\n//Или в сухую по ключам\n\nvariable::append_list(variable=`variable`, list_1=`list_1`, list_2=`list_2`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list_1`        | Список          | Первый список                  |\n| `list_2`        | Список          | Второй список                  |",".append_list":"```justcode\nvariable::append_list\n```\n\n**Имя:** Объединить два списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Объединяет два указанных списка в один.\n\n**Пример использования:** \n```justcode\n`variable` = variable::append_list(`list_1`, `list_2`);\n\n//Или от объекта\n\n`variable` = `list_1`.append_list(`list_2`);\n\n//Или в сухую позиционно\n\nvariable::append_list(`variable`, `list_1`, `list_2`);\n\n//Или в сухую по ключам\n\nvariable::append_list(variable=`variable`, list_1=`list_1`, list_2=`list_2`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list_1`        | Список          | Первый список                  |\n| `list_2`        | Список          | Второй список                  |","variable::append_map":"```justcode\nvariable::append_map\n```\n\n**Имя:** Объединить словари\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Объединяет два словаря и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::append_map(`map`, `other_map`);\n\n//Или от объекта\n\n`variable` = `map`.append_map(`other_map`);\n\n//Или в сухую позиционно\n\nvariable::append_map(`variable`, `map`, `other_map`);\n\n//Или в сухую по ключам\n\nvariable::append_map(variable=`variable`, map=`map`, other_map=`other_map`);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `map`            | Словарь         | Первый словарь                 |\n| `other_map`      | Словарь         | Второй словарь                 |",".append_map":"```justcode\nvariable::append_map\n```\n\n**Имя:** Объединить словари\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Объединяет два словаря и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::append_map(`map`, `other_map`);\n\n//Или от объекта\n\n`variable` = `map`.append_map(`other_map`);\n\n//Или в сухую позиционно\n\nvariable::append_map(`variable`, `map`, `other_map`);\n\n//Или в сухую по ключам\n\nvariable::append_map(variable=`variable`, map=`map`, other_map=`other_map`);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `map`            | Словарь         | Первый словарь                 |\n| `other_map`      | Словарь         | Второй словарь                 |","variable::append_value":"```justcode\nvariable::append_value\n```\n\n**Имя:** Добавить значение\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет указанные значения в конец списка.\n\n**Пример использования:** \n```justcode\nvariable::append_value(`variable`, [\"any value\", \"any value\"]);\n\n//Или от объекта\n\n`variable`.append_value([\"any value\", \"any value\"]);\n\n//Или в сухую по ключам\n\nvariable::append_value(variable=`variable`, values=[\"any value\", \"any value\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**      |\n| :--------- | :--------------------- | :----------- |\n| `variable`      | Переменная                  | Список            |\n| `values`        | список[Любое значение]      | Значения          |",".append_value":"```justcode\nvariable::append_value\n```\n\n**Имя:** Добавить значение\\\n**Тип:** Действие без значения\\\n**Описание:** Добавляет указанные значения в конец списка.\n\n**Пример использования:** \n```justcode\nvariable::append_value(`variable`, [\"any value\", \"any value\"]);\n\n//Или от объекта\n\n`variable`.append_value([\"any value\", \"any value\"]);\n\n//Или в сухую по ключам\n\nvariable::append_value(variable=`variable`, values=[\"any value\", \"any value\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**      |\n| :--------- | :--------------------- | :----------- |\n| `variable`      | Переменная                  | Список            |\n| `values`        | список[Любое значение]      | Значения          |","variable::atan2":"```justcode\nvariable::atan2\n```\n\n**Имя:** Обратный тангенс\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает обратный тангенс от двух указанных чисел.\n\n**Пример использования:** \n```justcode\n`variable` = variable::atan2(1, 2);\n\n//Или в сухую позиционно\n\nvariable::atan2(`variable`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::atan2(variable=`variable`, y=1, x=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `y`             | Число           | Первое число (y)               |\n| `x`             | Число           | Второе число (x)               |","variable::average":"```justcode\nvariable::average\n```\n\n**Имя:** Среднее значение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной среднее значение чисел.\n\n**Пример использования:** \n```justcode\n`variable` = variable::average([1, 2]);\n\n//Или в сухую позиционно\n\nvariable::average(`variable`, [1, 2]);\n\n//Или в сухую по ключам\n\nvariable::average(variable=`variable`, value=[1, 2]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                      |\n| :--------- | :------------ | :--------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения         |\n| `value`         | список[Число]      | Числа для получения значения      |","variable::bitwise_operation":"```justcode\nvariable::bitwise_operation\n```\n\n**Имя:** Побитовая операция над числами\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной результат побитовой операции над числами.\n\n**Пример использования:** \n```justcode\n`variable` = variable::bitwise_operation(1, 2, \"AND\");\n\n//Или в сухую позиционно\n\nvariable::bitwise_operation(`variable`, 1, 2, \"AND\");\n\n//Или в сухую по ключам\n\nvariable::bitwise_operation(variable=`variable`, operand1=1, operand2=2, operator=\"AND\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                                         | **Описание**                   |\n| :--------- | :------------------------------------------------------------------------- | :------------------------ |\n| `variable`      | Переменная                                                                      | Переменная для присвоения      |\n| `operand1`      | Число                                                                           | Первый операнд                 |\n| `operand2`      | Число                                                                           | Второй операнд                 |\n| `operator`      | Маркер                                                                          | Тип операции                   |\n|                 | **AND** - И (and)                                                               |                                |\n|                 | **LEFT_SHIFT** - Сдвиг влево (left_shift)                                       |                                |\n|                 | **NOT** - НЕ (not)                                                              |                                |\n|                 | **OR** - ИЛИ (or)                                                               |                                |\n|                 | **RIGHT_SHIFT** - Сдвиг вправо (right_shift)                                    |                                |\n|                 | **UNSIGNED_RIGHT_SHIFT** - Беззнаковый сдвиг вправо (unsigned_right_shift)      |                                |\n|                 | **XOR** - Исключающее ИЛИ (xor)                                                 |                                |","variable::center_location":"```justcode\nvariable::center_location\n```\n\n**Имя:** Получить центральное местоположение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Находит местоположение равное центру между двумя местоположениями и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::center_location([location(0,0,0,0,0), location(0,0,0,0,0)]);\n\n//Или в сухую позиционно\n\nvariable::center_location(`variable`, [location(0,0,0,0,0), location(0,0,0,0,0)]);\n\n//Или в сухую по ключам\n\nvariable::center_location(variable=`variable`, locations=[location(0,0,0,0,0), location(0,0,0,0,0)]);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                     | **Описание**                      |\n| :---------- | :--------------------- | :--------------------------- |\n| `variable`       | Переменная                  | Переменная для присвоения         |\n| `locations`      | список[Местоположение]      | Местоположения для установки      |","variable::change_component_parsing":"```justcode\nvariable::change_component_parsing\n```\n\n**Имя:** Изменить тип преобразования стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Изменяет тип преобразования для указанного стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::change_component_parsing(\"component\", \"JSON\");\n\n//Или от объекта\n\n`variable` = \"component\".change_component_parsing(\"JSON\");\n\n//Или в сухую позиционно\n\nvariable::change_component_parsing(`variable`, \"component\", \"JSON\");\n\n//Или в сухую по ключам\n\nvariable::change_component_parsing(variable=`variable`, component=\"component\", parsing=\"JSON\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                            | **Описание**                         |\n| :---------- | :---------------------------- | :------------------------------ |\n| `variable`       | Переменная                         | Переменная для присвоения            |\n| `component`      | Текст                              | Стилизуемый текст для установки      |\n| `parsing`        | Маркер                             | Тип преобразования                   |\n|                  | **JSON** - JSON                    |                                      |\n|                  | **LEGACY** - Цветной (&)           |                                      |\n|                  | **MINIMESSAGE** - Стилизуемый      |                                      |\n|                  | **PLAIN** - Обычный                |                                      |",".change_component_parsing":"```justcode\nvariable::change_component_parsing\n```\n\n**Имя:** Изменить тип преобразования стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Изменяет тип преобразования для указанного стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::change_component_parsing(\"component\", \"JSON\");\n\n//Или от объекта\n\n`variable` = \"component\".change_component_parsing(\"JSON\");\n\n//Или в сухую позиционно\n\nvariable::change_component_parsing(`variable`, \"component\", \"JSON\");\n\n//Или в сухую по ключам\n\nvariable::change_component_parsing(variable=`variable`, component=\"component\", parsing=\"JSON\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                            | **Описание**                         |\n| :---------- | :---------------------------- | :------------------------------ |\n| `variable`       | Переменная                         | Переменная для присвоения            |\n| `component`      | Текст                              | Стилизуемый текст для установки      |\n| `parsing`        | Маркер                             | Тип преобразования                   |\n|                  | **JSON** - JSON                    |                                      |\n|                  | **LEGACY** - Цветной (&)           |                                      |\n|                  | **MINIMESSAGE** - Стилизуемый      |                                      |\n|                  | **PLAIN** - Обычный                |                                      |","variable::char_to_number":"```justcode\nvariable::char_to_number\n```\n\n**Имя:** Получить число по символу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённое число из символа и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::char_to_number(\"char\");\n\n//Или от объекта\n\n`variable` = \"char\".char_to_number();\n\n//Или в сухую позиционно\n\nvariable::char_to_number(`variable`, \"char\");\n\n//Или в сухую по ключам\n\nvariable::char_to_number(variable=`variable`, char=\"char\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                    |\n| :--------- | :--------- | :------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения       |\n| `char`          | Текст           | Символ для получения числа      |",".char_to_number":"```justcode\nvariable::char_to_number\n```\n\n**Имя:** Получить число по символу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённое число из символа и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::char_to_number(\"char\");\n\n//Или от объекта\n\n`variable` = \"char\".char_to_number();\n\n//Или в сухую позиционно\n\nvariable::char_to_number(`variable`, \"char\");\n\n//Или в сухую по ключам\n\nvariable::char_to_number(variable=`variable`, char=\"char\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                    |\n| :--------- | :--------- | :------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения       |\n| `char`          | Текст           | Символ для получения числа      |","variable::clamp":"```justcode\nvariable::clamp\n```\n\n**Имя:** Ограничить число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Проверяет, находится ли число между минимальным и максимальным значением, и если нет, устанавливает его на ближайшее.\n\n**Пример использования:** \n```justcode\n`variable` = variable::clamp(1, 2, 3);\n\n//Или от объекта\n\n`variable` = (1).clamp(2, 3);\n\n//Или в сухую позиционно\n\nvariable::clamp(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::clamp(variable=`variable`, number=1, min=2, max=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число для ограничения          |\n| `min`           | Число           | Минимальное значение           |\n| `max`           | Число           | Максимальное значение          |",".clamp":"```justcode\nvariable::clamp\n```\n\n**Имя:** Ограничить число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Проверяет, находится ли число между минимальным и максимальным значением, и если нет, устанавливает его на ближайшее.\n\n**Пример использования:** \n```justcode\n`variable` = variable::clamp(1, 2, 3);\n\n//Или от объекта\n\n`variable` = (1).clamp(2, 3);\n\n//Или в сухую позиционно\n\nvariable::clamp(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::clamp(variable=`variable`, number=1, min=2, max=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число для ограничения          |\n| `min`           | Число           | Минимальное значение           |\n| `max`           | Число           | Максимальное значение          |","variable::clear_color_codes":"```justcode\nvariable::clear_color_codes\n```\n\n**Имя:** Очистить цвета текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Очищает текст от цветовых кодов и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::clear_color_codes(\"text\");\n\n//Или от объекта\n\n`variable` = \"text\".clear_color_codes();\n\n//Или в сухую позиционно\n\nvariable::clear_color_codes(`variable`, \"text\");\n\n//Или в сухую по ключам\n\nvariable::clear_color_codes(variable=`variable`, text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Текст для изменения            |",".clear_color_codes":"```justcode\nvariable::clear_color_codes\n```\n\n**Имя:** Очистить цвета текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Очищает текст от цветовых кодов и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::clear_color_codes(\"text\");\n\n//Или от объекта\n\n`variable` = \"text\".clear_color_codes();\n\n//Или в сухую позиционно\n\nvariable::clear_color_codes(`variable`, \"text\");\n\n//Или в сухую по ключам\n\nvariable::clear_color_codes(variable=`variable`, text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Текст для изменения            |","variable::clear_map":"```justcode\nvariable::clear_map\n```\n\n**Имя:** Очистить словарь\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает словарь.\n\n**Пример использования:** \n```justcode\nvariable::clear_map(`map`);\n\n//Или от объекта\n\n`map`.clear_map();\n\n//Или в сухую по ключам\n\nvariable::clear_map(map=`map`);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**         | **Описание**             |\n| :------ | :--------- | :------------------ |\n| `map`        | Переменная      | Словарь для очистки      |",".clear_map":"```justcode\nvariable::clear_map\n```\n\n**Имя:** Очистить словарь\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает словарь.\n\n**Пример использования:** \n```justcode\nvariable::clear_map(`map`);\n\n//Или от объекта\n\n`map`.clear_map();\n\n//Или в сухую по ключам\n\nvariable::clear_map(map=`map`);\n```\n\n**Аргументы:**\n\n| **Имя**      | **Тип**         | **Описание**             |\n| :------ | :--------- | :------------------ |\n| `map`        | Переменная      | Словарь для очистки      |","variable::compact_component":"```justcode\nvariable::compact_component\n```\n\n**Имя:** Сжать стилизуемый текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной указанный стилизуемый текст без элементов стиля и дочерних частей.\n\n**Пример использования:** \n```justcode\n`variable` = variable::compact_component(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".compact_component();\n\n//Или в сухую позиционно\n\nvariable::compact_component(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::compact_component(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                     |\n| :---------- | :--------- | :-------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения        |\n| `component`      | Текст           | Сжимаемый стилизуемый текст      |",".compact_component":"```justcode\nvariable::compact_component\n```\n\n**Имя:** Сжать стилизуемый текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной указанный стилизуемый текст без элементов стиля и дочерних частей.\n\n**Пример использования:** \n```justcode\n`variable` = variable::compact_component(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".compact_component();\n\n//Или в сухую позиционно\n\nvariable::compact_component(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::compact_component(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                     |\n| :---------- | :--------- | :-------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения        |\n| `component`      | Текст           | Сжимаемый стилизуемый текст      |","variable::component_of_children":"```justcode\nvariable::component_of_children\n```\n\n**Имя:** Создать стилизуемый текст из дочерних частей\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт стилизуемый текст из указанных дочерних стилизуемых текстов и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::component_of_children([\"components\", \"components\"]);\n\n//Или в сухую позиционно\n\nvariable::component_of_children(`variable`, [\"components\", \"components\"]);\n\n//Или в сухую по ключам\n\nvariable::component_of_children(variable=`variable`, components=[\"components\", \"components\"]);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**            | **Описание**                   |\n| :----------- | :------------ | :------------------------ |\n| `variable`        | Переменная         | Переменная для присвоения      |\n| `components`      | список[Текст]      | Стилизуемые тексты             |","variable::convert_number_to_text":"```justcode\nvariable::convert_number_to_text\n```\n\n**Имя:** Преобразовать число в текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной результат преобразования числа в текст.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Работает только с целыми числами.\\\n&nbsp;&nbsp;Основание системы счисления должно находиться в диапазоне от 2 до 36 включительно.\n\n**Пример использования:** \n```justcode\n`variable` = variable::convert_number_to_text(1, 2);\n\n//Или от объекта\n\n`variable` = (1).convert_number_to_text(2);\n\n//Или в сухую позиционно\n\nvariable::convert_number_to_text(`variable`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::convert_number_to_text(variable=`variable`, number=1, radix=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `number`        | Число           | Число для преобразования         |\n| `radix`         | Число           | Основание системы счисления      |",".convert_number_to_text":"```justcode\nvariable::convert_number_to_text\n```\n\n**Имя:** Преобразовать число в текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной результат преобразования числа в текст.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Работает только с целыми числами.\\\n&nbsp;&nbsp;Основание системы счисления должно находиться в диапазоне от 2 до 36 включительно.\n\n**Пример использования:** \n```justcode\n`variable` = variable::convert_number_to_text(1, 2);\n\n//Или от объекта\n\n`variable` = (1).convert_number_to_text(2);\n\n//Или в сухую позиционно\n\nvariable::convert_number_to_text(`variable`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::convert_number_to_text(variable=`variable`, number=1, radix=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `number`        | Число           | Число для преобразования         |\n| `radix`         | Число           | Основание системы счисления      |","variable::convert_text_to_number":"```justcode\nvariable::convert_text_to_number\n```\n\n**Имя:** Преобразовать текст в число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной результат преобразования числа в виде текста другой системы счисления в число десятичной системы счисления. Работает только с целыми числами.\n\n**Пример использования:** \n```justcode\n`variable` = variable::convert_text_to_number(\"text\", 1);\n\n//Или от объекта\n\n`variable` = \"text\".convert_text_to_number(1);\n\n//Или в сухую позиционно\n\nvariable::convert_text_to_number(`variable`, \"text\", 1);\n\n//Или в сухую по ключам\n\nvariable::convert_text_to_number(variable=`variable`, text=\"text\", radix=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `text`          | Текст           | Текст для преобразования         |\n| `radix`         | Число           | Основание системы счисления      |",".convert_text_to_number":"```justcode\nvariable::convert_text_to_number\n```\n\n**Имя:** Преобразовать текст в число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной результат преобразования числа в виде текста другой системы счисления в число десятичной системы счисления. Работает только с целыми числами.\n\n**Пример использования:** \n```justcode\n`variable` = variable::convert_text_to_number(\"text\", 1);\n\n//Или от объекта\n\n`variable` = \"text\".convert_text_to_number(1);\n\n//Или в сухую позиционно\n\nvariable::convert_text_to_number(`variable`, \"text\", 1);\n\n//Или в сухую по ключам\n\nvariable::convert_text_to_number(variable=`variable`, text=\"text\", radix=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `text`          | Текст           | Текст для преобразования         |\n| `radix`         | Число           | Основание системы счисления      |","variable::cosine":"```justcode\nvariable::cosine\n```\n\n**Имя:** Косинус числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает косинус от числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::cosine(1, \"ARCCOSINE\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = (1).cosine(\"ARCCOSINE\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::cosine(`variable`, 1, \"ARCCOSINE\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::cosine(variable=`variable`, number=1, variant=\"ARCCOSINE\", input=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                    | **Описание**                      |\n| :--------- | :---------------------------------------------------- | :--------------------------- |\n| `variable`      | Переменная                                                 | Переменная для присвоения         |\n| `number`        | Число                                                      | Число для получения косинуса      |\n| `variant`       | Маркер                                                     | Тип операции                      |\n|                 | **ARCCOSINE** - Арккосинус                                 |                                   |\n|                 | **COSINE** - Косинус                                       |                                   |\n|                 | **HYPERBOLIC_ARCCOSINE** - Гиперболический арккосинус      |                                   |\n|                 | **HYPERBOLIC_COSINE** - Гиперболический косинус            |                                   |\n| `input`         | Маркер                                                     | Тип угла                          |\n|                 | **DEGREES** - Градусы                                      |                                   |\n|                 | **RADIANS** - Радианы                                      |                                   |",".cosine":"```justcode\nvariable::cosine\n```\n\n**Имя:** Косинус числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает косинус от числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::cosine(1, \"ARCCOSINE\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = (1).cosine(\"ARCCOSINE\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::cosine(`variable`, 1, \"ARCCOSINE\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::cosine(variable=`variable`, number=1, variant=\"ARCCOSINE\", input=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                    | **Описание**                      |\n| :--------- | :---------------------------------------------------- | :--------------------------- |\n| `variable`      | Переменная                                                 | Переменная для присвоения         |\n| `number`        | Число                                                      | Число для получения косинуса      |\n| `variant`       | Маркер                                                     | Тип операции                      |\n|                 | **ARCCOSINE** - Арккосинус                                 |                                   |\n|                 | **COSINE** - Косинус                                       |                                   |\n|                 | **HYPERBOLIC_ARCCOSINE** - Гиперболический арккосинус      |                                   |\n|                 | **HYPERBOLIC_COSINE** - Гиперболический косинус            |                                   |\n| `input`         | Маркер                                                     | Тип угла                          |\n|                 | **DEGREES** - Градусы                                      |                                   |\n|                 | **RADIANS** - Радианы                                      |                                   |","variable::cotangent":"```justcode\nvariable::cotangent\n```\n\n**Имя:** Котангенс числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает котангенс от числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::cotangent(1, \"ARCCOTANGENT\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = (1).cotangent(\"ARCCOTANGENT\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::cotangent(`variable`, 1, \"ARCCOTANGENT\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::cotangent(variable=`variable`, number=1, variant=\"ARCCOTANGENT\", input=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                         | **Описание**                        |\n| :--------- | :--------------------------------------------------------- | :----------------------------- |\n| `variable`      | Переменная                                                      | Переменная для присвоения           |\n| `number`        | Число                                                           | Число для получения котангенса      |\n| `variant`       | Маркер                                                          | Тип операции                        |\n|                 | **ARCCOTANGENT** - Арккотангенс                                 |                                     |\n|                 | **COTANGENT** - Котангенс                                       |                                     |\n|                 | **HYPERBOLIC_ARCCOTANGENT** - Гиперболический арккотангенс      |                                     |\n|                 | **HYPERBOLIC_COTANGENT** - Гиперболический котангенс            |                                     |\n| `input`         | Маркер                                                          | Тип угла                            |\n|                 | **DEGREES** - Градусы                                           |                                     |\n|                 | **RADIANS** - Радианы                                           |                                     |",".cotangent":"```justcode\nvariable::cotangent\n```\n\n**Имя:** Котангенс числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает котангенс от числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::cotangent(1, \"ARCCOTANGENT\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = (1).cotangent(\"ARCCOTANGENT\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::cotangent(`variable`, 1, \"ARCCOTANGENT\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::cotangent(variable=`variable`, number=1, variant=\"ARCCOTANGENT\", input=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                         | **Описание**                        |\n| :--------- | :--------------------------------------------------------- | :----------------------------- |\n| `variable`      | Переменная                                                      | Переменная для присвоения           |\n| `number`        | Число                                                           | Число для получения котангенса      |\n| `variant`       | Маркер                                                          | Тип операции                        |\n|                 | **ARCCOTANGENT** - Арккотангенс                                 |                                     |\n|                 | **COTANGENT** - Котангенс                                       |                                     |\n|                 | **HYPERBOLIC_ARCCOTANGENT** - Гиперболический арккотангенс      |                                     |\n|                 | **HYPERBOLIC_COTANGENT** - Гиперболический котангенс            |                                     |\n| `input`         | Маркер                                                          | Тип угла                            |\n|                 | **DEGREES** - Градусы                                           |                                     |\n|                 | **RADIANS** - Радианы                                           |                                     |","variable::create_keybind_component":"```justcode\nvariable::create_keybind_component\n```\n\n**Имя:** Создать стилизуемый текст с привязкой к клавише\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной стилизуемый текст, привязанный к клавише клиента.\n\n**Пример использования:** \n```justcode\n`variable` = variable::create_keybind_component(\"key\");\n\n//Или в сухую позиционно\n\nvariable::create_keybind_component(`variable`, \"key\");\n\n//Или в сухую по ключам\n\nvariable::create_keybind_component(variable=`variable`, key=\"key\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `key`           | Текст           | Ключ клавиши                   |","variable::create_list":"```justcode\nvariable::create_list\n```\n\n**Имя:** Создать список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт список, содержащий указанные значения.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Очищает список если он уже существует.\n\n**Пример использования:** \n```justcode\n`variable` = variable::create_list([\"any value\", \"any value\"]);\n\n//Или в сухую позиционно\n\nvariable::create_list(`variable`, [\"any value\", \"any value\"]);\n\n//Или в сухую по ключам\n\nvariable::create_list(variable=`variable`, values=[\"any value\", \"any value\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**                   |\n| :--------- | :--------------------- | :------------------------ |\n| `variable`      | Переменная                  | Переменная для присвоения      |\n| `values`        | список[Любое значение]      | Значения                       |","variable::create_map":"```justcode\nvariable::create_map\n```\n\n**Имя:** Создать словарь\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт словарь из списка ключей и значений и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Очищает словарь, если он уже существует.\n\n**Пример использования:** \n```justcode\n`variable` = variable::create_map(`keys`, `values`);\n\n//Или в сухую позиционно\n\nvariable::create_map(`variable`, `keys`, `values`);\n\n//Или в сухую по ключам\n\nvariable::create_map(variable=`variable`, keys=`keys`, values=`values`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `keys`          | Список          | Список ключей                  |\n| `values`        | Список          | Список значений                |","variable::create_map_from_values":"```justcode\nvariable::create_map_from_values\n```\n\n**Имя:** Создать словарь из значений\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт словарь из ключей и значений и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Очищает словарь, если он уже существует.\n\n**Пример использования:** \n```justcode\n`variable` = variable::create_map_from_values([\"any value\", \"any value\"], [\"any value\", \"any value\"]);\n\n//Или в сухую позиционно\n\nvariable::create_map_from_values(`variable`, [\"any value\", \"any value\"], [\"any value\", \"any value\"]);\n\n//Или в сухую по ключам\n\nvariable::create_map_from_values(variable=`variable`, keys=[\"any value\", \"any value\"], values=[\"any value\", \"any value\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**                   |\n| :--------- | :--------------------- | :------------------------ |\n| `variable`      | Переменная                  | Переменная для присвоения      |\n| `keys`          | список[Любое значение]      | Ключи                          |\n| `values`        | список[Любое значение]      | Значения                       |","variable::create_translatable_component":"```justcode\nvariable::create_translatable_component\n```\n\n**Имя:** Создать переводимый стилизуемый текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной переводимый стилизуемый текст с указанными аргументами.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Если запасное сообщение не задано и указанный ключ не имеет перевода, конечное сообщение будет равно указанному ключу.\n\n**Пример использования:** \n```justcode\n`variable` = variable::create_translatable_component(\"key\", \"fallback\", [\"args\", \"args\"]);\n\n//Или в сухую позиционно\n\nvariable::create_translatable_component(`variable`, \"key\", \"fallback\", [\"args\", \"args\"]);\n\n//Или в сухую по ключам\n\nvariable::create_translatable_component(variable=`variable`, key=\"key\", fallback=\"fallback\", args=[\"args\", \"args\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `key`           | Текст              | Ключ                           |\n| `fallback`      | Текст              | Запасное сообщение             |\n| `args`          | список[Текст]      | Аргументы для вставки          |","variable::decrement":"```justcode\nvariable::decrement\n```\n\n**Имя:** Отнимание (-=)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Отнимает от переменной выбранное число.\n\n**Пример использования:** \n```justcode\n`variable` = variable::decrement(1);\n\n//Или от объекта\n\n`variable`.decrement(1);\n\n//Или в сухую позиционно\n\nvariable::decrement(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::decrement(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число для отнимания            |",".decrement":"```justcode\nvariable::decrement\n```\n\n**Имя:** Отнимание (-=)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Отнимает от переменной выбранное число.\n\n**Пример использования:** \n```justcode\n`variable` = variable::decrement(1);\n\n//Или от объекта\n\n`variable`.decrement(1);\n\n//Или в сухую позиционно\n\nvariable::decrement(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::decrement(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число для отнимания            |","variable::divide":"```justcode\nvariable::divide\n```\n\n**Имя:** Деление чисел (÷)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной частное чисел.\n\n**Пример использования:** \n```justcode\n`variable` = variable::divide([1, 2], \"CEIL\");\n\n//Или в сухую позиционно\n\nvariable::divide(`variable`, [1, 2], \"CEIL\");\n\n//Или в сухую по ключам\n\nvariable::divide(variable=`variable`, value=[1, 2], division_mode=\"CEIL\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                                    | **Описание**                   |\n| :-------------- | :------------------------------------ | :------------------------ |\n| `variable`           | Переменная                                 | Переменная для присвоения      |\n| `value`              | список[Число]                              | Числа для деления              |\n| `division_mode`      | Маркер                                     | Режим деления                  |\n|                      | **CEIL** - Округлить до большего           |                                |\n|                      | **DEFAULT** - По умолчанию                 |                                |\n|                      | **FLOOR** - Округлить до меньшего          |                                |\n|                      | **ROUND_TO_INT** - Обычное округление      |                                |","variable::divide_vector":"```justcode\nvariable::divide_vector\n```\n\n**Имя:** Деление векторов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной результат деления двух векторов.\n\n**Пример использования:** \n```justcode\n`variable` = variable::divide_vector(vector(0,0,0), vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::divide_vector(`variable`, vector(0,0,0), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::divide_vector(variable=`variable`, vector=vector(0,0,0), divider=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector`        | Вектор          | Вектор для изменения           |\n| `divider`       | Вектор          | Вектор-делитель                |","variable::dummy":"```justcode\nvariable::dummy\n```\n\n**Имя:** ...\\\n**Тип:** Действие без значения\\\n**Описание:** ...\n\n**Пример использования:** \n```justcode\nvariable::dummy();\n```\n\n","variable::edit_item_custom_model_data":"```justcode\nvariable::edit_item_custom_model_data\n```\n\n**Имя:** Изменить данные о модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Изменяет данные о модели предмета (CustomModelData) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::edit_item_custom_model_data(item(\"stick\"), [\"any value\", \"any value\"], \"FLOATS\", \"SET\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").edit_item_custom_model_data([\"any value\", \"any value\"], \"FLOATS\", \"SET\");\n\n//Или в сухую позиционно\n\nvariable::edit_item_custom_model_data(`variable`, item(\"stick\"), [\"any value\", \"any value\"], \"FLOATS\", \"SET\");\n\n//Или в сухую по ключам\n\nvariable::edit_item_custom_model_data(variable=`variable`, item=item(\"stick\"), data=[\"any value\", \"any value\"], value_type=\"FLOATS\", setup_mode=\"SET\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                         | **Описание**                   |\n| :----------- | :----------------------------------------- | :------------------------ |\n| `variable`        | Переменная                                      | Переменная для присвоения      |\n| `item`            | Предмет                                         | Предмет                        |\n| `data`            | список[Любое значение]                          | Данные                         |\n| `value_type`      | Маркер                                          | Тип данных                     |\n|                   | **FLOATS** - Плавающие значения (floats)        |                                |\n|                   | **BOOLEANS** - Булевые значения (booleans)      |                                |\n|                   | **STRINGS** - Строчные значения (strings)       |                                |\n|                   | **COLORS** - Список цветов (colors)             |                                |\n| `setup_mode`      | Маркер                                          | Действие                       |\n|                   | **SET** - Установка                             |                                |\n|                   | **ADD** - Добавление                            |                                |\n|                   | **REMOVE_ALL** - Удалить все                    |                                |\n|                   | **REMOVE_FIRST** - Удалить первую запись        |                                |\n|                   | **REMOVE_LAST** - Удалить последнюю запись      |                                |",".edit_item_custom_model_data":"```justcode\nvariable::edit_item_custom_model_data\n```\n\n**Имя:** Изменить данные о модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Изменяет данные о модели предмета (CustomModelData) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::edit_item_custom_model_data(item(\"stick\"), [\"any value\", \"any value\"], \"FLOATS\", \"SET\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").edit_item_custom_model_data([\"any value\", \"any value\"], \"FLOATS\", \"SET\");\n\n//Или в сухую позиционно\n\nvariable::edit_item_custom_model_data(`variable`, item(\"stick\"), [\"any value\", \"any value\"], \"FLOATS\", \"SET\");\n\n//Или в сухую по ключам\n\nvariable::edit_item_custom_model_data(variable=`variable`, item=item(\"stick\"), data=[\"any value\", \"any value\"], value_type=\"FLOATS\", setup_mode=\"SET\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                         | **Описание**                   |\n| :----------- | :----------------------------------------- | :------------------------ |\n| `variable`        | Переменная                                      | Переменная для присвоения      |\n| `item`            | Предмет                                         | Предмет                        |\n| `data`            | список[Любое значение]                          | Данные                         |\n| `value_type`      | Маркер                                          | Тип данных                     |\n|                   | **FLOATS** - Плавающие значения (floats)        |                                |\n|                   | **BOOLEANS** - Булевые значения (booleans)      |                                |\n|                   | **STRINGS** - Строчные значения (strings)       |                                |\n|                   | **COLORS** - Список цветов (colors)             |                                |\n| `setup_mode`      | Маркер                                          | Действие                       |\n|                   | **SET** - Установка                             |                                |\n|                   | **ADD** - Добавление                            |                                |\n|                   | **REMOVE_ALL** - Удалить все                    |                                |\n|                   | **REMOVE_FIRST** - Удалить первую запись        |                                |\n|                   | **REMOVE_LAST** - Удалить последнюю запись      |                                |","variable::face_location":"```justcode\nvariable::face_location\n```\n\n**Имя:** Направить местоположение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Поворачивает местоположение в направлении другого местоположения и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::face_location(location(0,0,0,0,0), location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).face_location(location(0,0,0,0,0));\n\n//Или в сухую позиционно\n\nvariable::face_location(`variable`, location(0,0,0,0,0), location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::face_location(variable=`variable`, location=location(0,0,0,0,0), target=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения         |\n| `location`      | Местоположение      | Местоположения для установки      |\n| `target`        | Местоположение      | Целевое местоположение            |",".face_location":"```justcode\nvariable::face_location\n```\n\n**Имя:** Направить местоположение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Поворачивает местоположение в направлении другого местоположения и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::face_location(location(0,0,0,0,0), location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).face_location(location(0,0,0,0,0));\n\n//Или в сухую позиционно\n\nvariable::face_location(`variable`, location(0,0,0,0,0), location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::face_location(variable=`variable`, location=location(0,0,0,0,0), target=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения         |\n| `location`      | Местоположение      | Местоположения для установки      |\n| `target`        | Местоположение      | Целевое местоположение            |","variable::flatten_list":"```justcode\nvariable::flatten_list\n```\n\n**Имя:** Сгладить список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Разделяет подсписки указанного списка на отдельные элементы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::flatten_list(`list`);\n\n//Или от объекта\n\n`variable` = `list`.flatten_list();\n\n//Или в сухую позиционно\n\nvariable::flatten_list(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::flatten_list(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |",".flatten_list":"```justcode\nvariable::flatten_list\n```\n\n**Имя:** Сгладить список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Разделяет подсписки указанного списка на отдельные элементы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::flatten_list(`list`);\n\n//Или от объекта\n\n`variable` = `list`.flatten_list();\n\n//Или в сухую позиционно\n\nvariable::flatten_list(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::flatten_list(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |","variable::format_timestamp":"```justcode\nvariable::format_timestamp\n```\n\n**Имя:** Создать формат времени\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Преобразовывает число (миллисекунды) в указанный формат времени и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::format_timestamp(1, \"pattern\", \"zone_id\", \"locale\", \"CUSTOM\");\n\n//Или от объекта\n\n`variable` = (1).format_timestamp(\"pattern\", \"zone_id\", \"locale\", \"CUSTOM\");\n\n//Или в сухую позиционно\n\nvariable::format_timestamp(`variable`, 1, \"pattern\", \"zone_id\", \"locale\", \"CUSTOM\");\n\n//Или в сухую по ключам\n\nvariable::format_timestamp(variable=`variable`, time=1, pattern=\"pattern\", zone_id=\"zone_id\", locale=\"locale\", format=\"CUSTOM\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                                    | **Описание**                                 |\n| :--------- | :-------------------------------------------------------------------- | :-------------------------------------- |\n| `variable`      | Переменная                                                                 | Переменная для присвоения                    |\n| `time`          | Число                                                                      | Число для преобразования                     |\n| `pattern`       | Текст                                                                      | Шаблон времени (например, mm\\:ss)            |\n| `zone_id`       | Текст                                                                      | Часовой пояс (GMT+1\\.\\.13, GMT-1\\.\\.13)      |\n| `locale`        | Текст                                                                      | Язык (ru_RU, en_US...)                       |\n| `format`        | Маркер                                                                     | Формат времени                               |\n|                 | **CUSTOM** - Настраиваемое                                                 |                                              |\n|                 | **DD_MM_YYYY** - 01\\/01\\/1970 (dd_mm_yyyy)                                 |                                              |\n|                 | **DD_MM_YYYY_HH_MM_S** - 01\\/01\\/1970 00\\:00\\:00 (dd_mm_yyyy_hh_mm_s)      |                                              |\n|                 | **EEEE** - Thursday (eeee)                                                 |                                              |\n|                 | **EEE_D_MMMM** - Thu, 01 January (eee_d_mmmm)                              |                                              |\n|                 | **EEE_MMMM_D** - Thu, January 01 (eee_mmmm_d)                              |                                              |\n|                 | **HH_MM_SS** - 00\\:00\\:00 (hh_mm_ss)                                       |                                              |\n|                 | **H_H_M_M_S_S** - 00h00m00s (h_h_m_m_s_s)                                  |                                              |\n|                 | **H_MM_A** - 00\\:00 AM (h_mm_a)                                            |                                              |\n|                 | **S_S** - 00.00 (s_s)                                                      |                                              |\n|                 | **YYYY_MM_DD** - 1970\\/01\\/01 (yyyy_mm_dd)                                 |                                              |\n|                 | **YYYY_MM_DD_HH_MM_S** - 1970\\/01\\/01 00\\:00\\:00 (yyyy_mm_dd_hh_mm_s)      |                                              |",".format_timestamp":"```justcode\nvariable::format_timestamp\n```\n\n**Имя:** Создать формат времени\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Преобразовывает число (миллисекунды) в указанный формат времени и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::format_timestamp(1, \"pattern\", \"zone_id\", \"locale\", \"CUSTOM\");\n\n//Или от объекта\n\n`variable` = (1).format_timestamp(\"pattern\", \"zone_id\", \"locale\", \"CUSTOM\");\n\n//Или в сухую позиционно\n\nvariable::format_timestamp(`variable`, 1, \"pattern\", \"zone_id\", \"locale\", \"CUSTOM\");\n\n//Или в сухую по ключам\n\nvariable::format_timestamp(variable=`variable`, time=1, pattern=\"pattern\", zone_id=\"zone_id\", locale=\"locale\", format=\"CUSTOM\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                                    | **Описание**                                 |\n| :--------- | :-------------------------------------------------------------------- | :-------------------------------------- |\n| `variable`      | Переменная                                                                 | Переменная для присвоения                    |\n| `time`          | Число                                                                      | Число для преобразования                     |\n| `pattern`       | Текст                                                                      | Шаблон времени (например, mm\\:ss)            |\n| `zone_id`       | Текст                                                                      | Часовой пояс (GMT+1\\.\\.13, GMT-1\\.\\.13)      |\n| `locale`        | Текст                                                                      | Язык (ru_RU, en_US...)                       |\n| `format`        | Маркер                                                                     | Формат времени                               |\n|                 | **CUSTOM** - Настраиваемое                                                 |                                              |\n|                 | **DD_MM_YYYY** - 01\\/01\\/1970 (dd_mm_yyyy)                                 |                                              |\n|                 | **DD_MM_YYYY_HH_MM_S** - 01\\/01\\/1970 00\\:00\\:00 (dd_mm_yyyy_hh_mm_s)      |                                              |\n|                 | **EEEE** - Thursday (eeee)                                                 |                                              |\n|                 | **EEE_D_MMMM** - Thu, 01 January (eee_d_mmmm)                              |                                              |\n|                 | **EEE_MMMM_D** - Thu, January 01 (eee_mmmm_d)                              |                                              |\n|                 | **HH_MM_SS** - 00\\:00\\:00 (hh_mm_ss)                                       |                                              |\n|                 | **H_H_M_M_S_S** - 00h00m00s (h_h_m_m_s_s)                                  |                                              |\n|                 | **H_MM_A** - 00\\:00 AM (h_mm_a)                                            |                                              |\n|                 | **S_S** - 00.00 (s_s)                                                      |                                              |\n|                 | **YYYY_MM_DD** - 1970\\/01\\/01 (yyyy_mm_dd)                                 |                                              |\n|                 | **YYYY_MM_DD_HH_MM_S** - 1970\\/01\\/01 00\\:00\\:00 (yyyy_mm_dd_hh_mm_s)      |                                              |","variable::gamma_function":"```justcode\nvariable::gamma_function\n```\n\n**Имя:** Гамма-функция\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает гамма-функцию числа и присваивает к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Является обобщением факториала.\\\n&nbsp;&nbsp;Гамма-функция может быть представлена как (n-1)!, где n - заданное число.\n\n**Пример использования:** \n```justcode\n`variable` = variable::gamma_function(1);\n\n//Или от объекта\n\n`variable` = (1).gamma_function();\n\n//Или в сухую позиционно\n\nvariable::gamma_function(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::gamma_function(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число                          |",".gamma_function":"```justcode\nvariable::gamma_function\n```\n\n**Имя:** Гамма-функция\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает гамма-функцию числа и присваивает к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Является обобщением факториала.\\\n&nbsp;&nbsp;Гамма-функция может быть представлена как (n-1)!, где n - заданное число.\n\n**Пример использования:** \n```justcode\n`variable` = variable::gamma_function(1);\n\n//Или от объекта\n\n`variable` = (1).gamma_function();\n\n//Или в сухую позиционно\n\nvariable::gamma_function(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::gamma_function(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число                          |","variable::gaussian_distribution":"```justcode\nvariable::gaussian_distribution\n```\n\n**Имя:** Нормально распределённое случайное число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Выдаёт случайное число близкое к среднему значению μ со стандартным отклонением σ с шансом, заданным графиком нормального распределения.\n\n**Пример использования:** \n```justcode\n`variable` = variable::gaussian_distribution(1, 2, \"FOLDER_NORMAL\");\n\n//Или в сухую позиционно\n\nvariable::gaussian_distribution(`variable`, 1, 2, \"FOLDER_NORMAL\");\n\n//Или в сухую по ключам\n\nvariable::gaussian_distribution(variable=`variable`, deviant=1, mean=2, distribution=\"FOLDER_NORMAL\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                            | **Описание**                             |\n| :------------- | :-------------------------------------------- | :---------------------------------- |\n| `variable`          | Переменная                                         | Переменная для присвоения                |\n| `deviant`           | Число                                              | Отклонение σ от среднего значения μ      |\n| `mean`              | Число                                              | Среднее значение μ                       |\n| `distribution`      | Маркер                                             | Тип σ отклонения                         |\n|                     | **FOLDER_NORMAL** - Отклонение в сторону >= μ      |                                          |\n|                     | **NORMAL** - Полное отклонение                     |                                          |","variable::get_all_block_data":"```justcode\nvariable::get_all_block_data\n```\n\n**Имя:** Получить все данные блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной все данные блока на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_all_block_data(location(0,0,0,0,0), \"FALSE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_all_block_data(\"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::get_all_block_data(`variable`, location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::get_all_block_data(variable=`variable`, location=location(0,0,0,0,0), hide_unspecified=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                    | **Описание**                          |\n| :----------------- | :-------------------- | :------------------------------- |\n| `variable`              | Переменная                 | Переменная для присвоения             |\n| `location`              | Местоположение             | Местоположение блока                  |\n| `hide_unspecified`      | Маркер                     | Скрытие неустановленных значений      |\n|                         | **FALSE** - Выключить      |                                       |\n|                         | **TRUE** - Включить        |                                       |",".get_all_block_data":"```justcode\nvariable::get_all_block_data\n```\n\n**Имя:** Получить все данные блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной все данные блока на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_all_block_data(location(0,0,0,0,0), \"FALSE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_all_block_data(\"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::get_all_block_data(`variable`, location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::get_all_block_data(variable=`variable`, location=location(0,0,0,0,0), hide_unspecified=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                    | **Описание**                          |\n| :----------------- | :-------------------- | :------------------------------- |\n| `variable`              | Переменная                 | Переменная для присвоения             |\n| `location`              | Местоположение             | Местоположение блока                  |\n| `hide_unspecified`      | Маркер                     | Скрытие неустановленных значений      |\n|                         | **FALSE** - Выключить      |                                       |\n|                         | **TRUE** - Включить        |                                       |","variable::get_all_coordinates":"```justcode\nvariable::get_all_coordinates\n```\n\n**Имя:** Получить все координаты местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение всех координат с местоположения и присваивает их в переменные.\n\n**Пример использования:** \n```justcode\n`x`, `y`, `z`, `yaw`, `pitch` = variable::get_all_coordinates(location(0,0,0,0,0));\n\n//Или от объекта\n\n`x`, `y`, `z`, `yaw`, `pitch` = location(0,0,0,0,0).get_all_coordinates();\n\n//Или в сухую позиционно\n\nvariable::get_all_coordinates(`x`, `y`, `z`, `yaw`, `pitch`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_all_coordinates(x=`x`, y=`y`, z=`z`, yaw=`yaw`, pitch=`pitch`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `x`             | Переменная          | Координата X                      |\n| `y`             | Переменная          | Координата Y                      |\n| `z`             | Переменная          | Координата Z                      |\n| `yaw`           | Переменная          | Горизонтальный поворот            |\n| `pitch`         | Переменная          | Вертикальный поворот              |\n| `location`      | Местоположение      | Местоположение для получения      |",".get_all_coordinates":"```justcode\nvariable::get_all_coordinates\n```\n\n**Имя:** Получить все координаты местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение всех координат с местоположения и присваивает их в переменные.\n\n**Пример использования:** \n```justcode\n`x`, `y`, `z`, `yaw`, `pitch` = variable::get_all_coordinates(location(0,0,0,0,0));\n\n//Или от объекта\n\n`x`, `y`, `z`, `yaw`, `pitch` = location(0,0,0,0,0).get_all_coordinates();\n\n//Или в сухую позиционно\n\nvariable::get_all_coordinates(`x`, `y`, `z`, `yaw`, `pitch`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_all_coordinates(x=`x`, y=`y`, z=`z`, yaw=`yaw`, pitch=`pitch`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `x`             | Переменная          | Координата X                      |\n| `y`             | Переменная          | Координата Y                      |\n| `z`             | Переменная          | Координата Z                      |\n| `yaw`           | Переменная          | Горизонтальный поворот            |\n| `pitch`         | Переменная          | Вертикальный поворот              |\n| `location`      | Местоположение      | Местоположение для получения      |","variable::get_angle_between_vectors":"```justcode\nvariable::get_angle_between_vectors\n```\n\n**Имя:** Получить угол между двумя векторами\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение угла между двумя векторами.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_angle_between_vectors(vector(0,0,0), vector(0,0,0), \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::get_angle_between_vectors(`variable`, vector(0,0,0), vector(0,0,0), \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::get_angle_between_vectors(variable=`variable`, vector_1=vector(0,0,0), vector_2=vector(0,0,0), angle_units=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**                   |\n| :------------ | :-------------------- | :------------------------ |\n| `variable`         | Переменная                 | Переменная для присвоения      |\n| `vector_1`         | Вектор                     | Первый вектор                  |\n| `vector_2`         | Вектор                     | Второй вектор                  |\n| `angle_units`      | Маркер                     | Тип угла                       |\n|                    | **DEGREES** - Градусы      |                                |\n|                    | **RADIANS** - Радианы      |                                |","variable::get_block_custom_tag":"```justcode\nvariable::get_block_custom_tag\n```\n\n**Имя:** None\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** None\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_custom_tag(location(0,0,0,0,0), \"tag_name\", \"tag_value\", \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_block_custom_tag(`variable`, location(0,0,0,0,0), \"tag_name\", \"tag_value\", \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_block_custom_tag(variable=`variable`, location=location(0,0,0,0,0), tag_name=\"tag_name\", tag_value=\"tag_value\", default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**      |\n| :-------------- | :------------- | :----------- |\n| `variable`           | Переменная          | None              |\n| `location`           | Местоположение      | None              |\n| `tag_name`           | Текст               | None              |\n| `tag_value`          | Текст               | None              |\n| `default_value`      | Любое значение      | None              |","variable::get_block_data":"```justcode\nvariable::get_block_data\n```\n\n**Имя:** Получить данные блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает данные блока и присваивает его в переменную.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_data(location(0,0,0,0,0), \"tag_name\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_block_data(\"tag_name\");\n\n//Или в сухую позиционно\n\nvariable::get_block_data(`variable`, location(0,0,0,0,0), \"tag_name\");\n\n//Или в сухую по ключам\n\nvariable::get_block_data(variable=`variable`, location=location(0,0,0,0,0), tag_name=\"tag_name\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |\n| `tag_name`      | Текст               | Название тега                  |",".get_block_data":"```justcode\nvariable::get_block_data\n```\n\n**Имя:** Получить данные блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает данные блока и присваивает его в переменную.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_data(location(0,0,0,0,0), \"tag_name\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_block_data(\"tag_name\");\n\n//Или в сухую позиционно\n\nvariable::get_block_data(`variable`, location(0,0,0,0,0), \"tag_name\");\n\n//Или в сухую по ключам\n\nvariable::get_block_data(variable=`variable`, location=location(0,0,0,0,0), tag_name=\"tag_name\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |\n| `tag_name`      | Текст               | Название тега                  |","variable::get_block_growth":"```justcode\nvariable::get_block_growth\n```\n\n**Имя:** Получить уровень роста блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение уровня роста блока на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_growth(location(0,0,0,0,0), \"GROWTH_PERCENTAGE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_block_growth(\"GROWTH_PERCENTAGE\");\n\n//Или в сухую позиционно\n\nvariable::get_block_growth(`variable`, location(0,0,0,0,0), \"GROWTH_PERCENTAGE\");\n\n//Или в сухую по ключам\n\nvariable::get_block_growth(variable=`variable`, location=location(0,0,0,0,0), growth_unit=\"GROWTH_PERCENTAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                    | **Описание**                   |\n| :------------ | :------------------------------------ | :------------------------ |\n| `variable`         | Переменная                                 | Переменная для присвоения      |\n| `location`         | Местоположение                             | Местоположение блока           |\n| `growth_unit`      | Маркер                                     | Единица измерения              |\n|                    | **GROWTH_PERCENTAGE** - Процент роста      |                                |\n|                    | **GROWTH_STAGE** - Стадия роста            |                                |",".get_block_growth":"```justcode\nvariable::get_block_growth\n```\n\n**Имя:** Получить уровень роста блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение уровня роста блока на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_growth(location(0,0,0,0,0), \"GROWTH_PERCENTAGE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_block_growth(\"GROWTH_PERCENTAGE\");\n\n//Или в сухую позиционно\n\nvariable::get_block_growth(`variable`, location(0,0,0,0,0), \"GROWTH_PERCENTAGE\");\n\n//Или в сухую по ключам\n\nvariable::get_block_growth(variable=`variable`, location=location(0,0,0,0,0), growth_unit=\"GROWTH_PERCENTAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                    | **Описание**                   |\n| :------------ | :------------------------------------ | :------------------------ |\n| `variable`         | Переменная                                 | Переменная для присвоения      |\n| `location`         | Местоположение                             | Местоположение блока           |\n| `growth_unit`      | Маркер                                     | Единица измерения              |\n|                    | **GROWTH_PERCENTAGE** - Процент роста      |                                |\n|                    | **GROWTH_STAGE** - Стадия роста            |                                |","variable::get_block_material":"```justcode\nvariable::get_block_material\n```\n\n**Имя:** Получить тип блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной тип блока на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_material(location(0,0,0,0,0), \"ID\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_block_material(\"ID\");\n\n//Или в сухую позиционно\n\nvariable::get_block_material(`variable`, location(0,0,0,0,0), \"ID\");\n\n//Или в сухую по ключам\n\nvariable::get_block_material(variable=`variable`, location=location(0,0,0,0,0), value_type=\"ID\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                   | **Описание**                   |\n| :----------- | :----------------------------------- | :------------------------ |\n| `variable`        | Переменная                                | Переменная для присвоения      |\n| `location`        | Местоположение                            | Местоположение блока           |\n| `value_type`      | Маркер                                    | Тип значения                   |\n|                   | **ID** - ID блока                         |                                |\n|                   | **ID_WITH_DATA** - ID и данные блока      |                                |\n|                   | **ITEM** - Как предмет                    |                                |\n|                   | **NAME** - Имя блока                      |                                |",".get_block_material":"```justcode\nvariable::get_block_material\n```\n\n**Имя:** Получить тип блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной тип блока на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_material(location(0,0,0,0,0), \"ID\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_block_material(\"ID\");\n\n//Или в сухую позиционно\n\nvariable::get_block_material(`variable`, location(0,0,0,0,0), \"ID\");\n\n//Или в сухую по ключам\n\nvariable::get_block_material(variable=`variable`, location=location(0,0,0,0,0), value_type=\"ID\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                   | **Описание**                   |\n| :----------- | :----------------------------------- | :------------------------ |\n| `variable`        | Переменная                                | Переменная для присвоения      |\n| `location`        | Местоположение                            | Местоположение блока           |\n| `value_type`      | Маркер                                    | Тип значения                   |\n|                   | **ID** - ID блока                         |                                |\n|                   | **ID_WITH_DATA** - ID и данные блока      |                                |\n|                   | **ITEM** - Как предмет                    |                                |\n|                   | **NAME** - Имя блока                      |                                |","variable::get_block_material_property":"```justcode\nvariable::get_block_material_property\n```\n\n**Имя:** Получить свойство блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённое свойство блока и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_material_property(item(\"stone\"), \"BLAST_RESISTANCE\");\n\n//Или от объекта\n\n`variable` = item(\"stone\").get_block_material_property(\"BLAST_RESISTANCE\");\n\n//Или в сухую позиционно\n\nvariable::get_block_material_property(`variable`, item(\"stone\"), \"BLAST_RESISTANCE\");\n\n//Или в сухую по ключам\n\nvariable::get_block_material_property(variable=`variable`, block=item(\"stone\"), property=\"BLAST_RESISTANCE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                           | **Описание**                   |\n| :--------- | :------------------------------------------- | :------------------------ |\n| `variable`      | Переменная                                        | Переменная для присвоения      |\n| `block`         | Блок                                              | Блок для получения             |\n| `property`      | Маркер                                            | Свойство                       |\n|                 | **BLAST_RESISTANCE** - Устойчивость к взрыву      |                                |\n|                 | **HARDNESS** - Прочность                          |                                |\n|                 | **SLIPPERINESS** - Скользкость                    |                                |",".get_block_material_property":"```justcode\nvariable::get_block_material_property\n```\n\n**Имя:** Получить свойство блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённое свойство блока и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_material_property(item(\"stone\"), \"BLAST_RESISTANCE\");\n\n//Или от объекта\n\n`variable` = item(\"stone\").get_block_material_property(\"BLAST_RESISTANCE\");\n\n//Или в сухую позиционно\n\nvariable::get_block_material_property(`variable`, item(\"stone\"), \"BLAST_RESISTANCE\");\n\n//Или в сухую по ключам\n\nvariable::get_block_material_property(variable=`variable`, block=item(\"stone\"), property=\"BLAST_RESISTANCE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                           | **Описание**                   |\n| :--------- | :------------------------------------------- | :------------------------ |\n| `variable`      | Переменная                                        | Переменная для присвоения      |\n| `block`         | Блок                                              | Блок для получения             |\n| `property`      | Маркер                                            | Свойство                       |\n|                 | **BLAST_RESISTANCE** - Устойчивость к взрыву      |                                |\n|                 | **HARDNESS** - Прочность                          |                                |\n|                 | **SLIPPERINESS** - Скользкость                    |                                |","variable::get_block_power":"```justcode\nvariable::get_block_power\n```\n\n**Имя:** Получить силу редстоуна\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение силы сигнала редстоуна на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_power(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_block_power();\n\n//Или в сухую позиционно\n\nvariable::get_block_power(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_block_power(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |",".get_block_power":"```justcode\nvariable::get_block_power\n```\n\n**Имя:** Получить силу редстоуна\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение силы сигнала редстоуна на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_power(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_block_power();\n\n//Или в сухую позиционно\n\nvariable::get_block_power(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_block_power(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |","variable::get_block_sound":"```justcode\nvariable::get_block_sound\n```\n\n**Имя:** Получить звук блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает звук указанного блока и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_sound(item(\"stone\"), \"BREAK\");\n\n//Или от объекта\n\n`variable` = item(\"stone\").get_block_sound(\"BREAK\");\n\n//Или в сухую позиционно\n\nvariable::get_block_sound(`variable`, item(\"stone\"), \"BREAK\");\n\n//Или в сухую по ключам\n\nvariable::get_block_sound(variable=`variable`, block=item(\"stone\"), source=\"BREAK\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                               | **Описание**                   |\n| :--------- | :------------------------------- | :------------------------ |\n| `variable`      | Переменная                            | Переменная для присвоения      |\n| `block`         | Блок                                  | Блок                           |\n| `source`        | Маркер                                | Источник звука                 |\n|                 | **BREAK** - Ломание                   |                                |\n|                 | **PLACE** - Установка                 |                                |\n|                 | **HIT** - Процесс ломания             |                                |\n|                 | **FALL** - Падение на блок            |                                |\n|                 | **STEP** - Передвижение по блоку      |                                |",".get_block_sound":"```justcode\nvariable::get_block_sound\n```\n\n**Имя:** Получить звук блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает звук указанного блока и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_block_sound(item(\"stone\"), \"BREAK\");\n\n//Или от объекта\n\n`variable` = item(\"stone\").get_block_sound(\"BREAK\");\n\n//Или в сухую позиционно\n\nvariable::get_block_sound(`variable`, item(\"stone\"), \"BREAK\");\n\n//Или в сухую по ключам\n\nvariable::get_block_sound(variable=`variable`, block=item(\"stone\"), source=\"BREAK\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                               | **Описание**                   |\n| :--------- | :------------------------------- | :------------------------ |\n| `variable`      | Переменная                            | Переменная для присвоения      |\n| `block`         | Блок                                  | Блок                           |\n| `source`        | Маркер                                | Источник звука                 |\n|                 | **BREAK** - Ломание                   |                                |\n|                 | **PLACE** - Установка                 |                                |\n|                 | **HIT** - Процесс ломания             |                                |\n|                 | **FALL** - Падение на блок            |                                |\n|                 | **STEP** - Передвижение по блоку      |                                |","variable::get_book_text":"```justcode\nvariable::get_book_text\n```\n\n**Имя:** Получить текст книги\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение текста книги на определённой странице.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_book_text(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_book_text(1);\n\n//Или в сухую позиционно\n\nvariable::get_book_text(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::get_book_text(variable=`variable`, book=item(\"stick\"), page=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                      |\n| :--------- | :--------- | :--------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения         |\n| `book`          | Предмет         | Книга для получения значения      |\n| `page`          | Число           | Номер страницы                    |",".get_book_text":"```justcode\nvariable::get_book_text\n```\n\n**Имя:** Получить текст книги\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение текста книги на определённой странице.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_book_text(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_book_text(1);\n\n//Или в сухую позиционно\n\nvariable::get_book_text(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::get_book_text(variable=`variable`, book=item(\"stick\"), page=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                      |\n| :--------- | :--------- | :--------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения         |\n| `book`          | Предмет         | Книга для получения значения      |\n| `page`          | Число           | Номер страницы                    |","variable::get_brushable_block_item":"```justcode\nvariable::get_brushable_block_item\n```\n\n**Имя:** Получить предмет из подозрительного блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получить предмет из подозрительного блока (песка, гравия) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_brushable_block_item(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_brushable_block_item();\n\n//Или в сухую позиционно\n\nvariable::get_brushable_block_item(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_brushable_block_item(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |",".get_brushable_block_item":"```justcode\nvariable::get_brushable_block_item\n```\n\n**Имя:** Получить предмет из подозрительного блока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получить предмет из подозрительного блока (песка, гравия) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_brushable_block_item(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_brushable_block_item();\n\n//Или в сухую позиционно\n\nvariable::get_brushable_block_item(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_brushable_block_item(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |","variable::get_bundle_items":"```justcode\nvariable::get_bundle_items\n```\n\n**Имя:** Получить содержимое мешка\\\n**Тип:** Действие без значения\\\n**Описание:** Получает содержимое мешка и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::get_bundle_items(`variable`, item(\"stick\"));\n\n//Или от объекта\n\nitem(\"stick\").get_bundle_items(`variable`);\n\n//Или в сухую по ключам\n\nvariable::get_bundle_items(variable=`variable`, bundle=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `bundle`        | Предмет         | Мешок                          |",".get_bundle_items":"```justcode\nvariable::get_bundle_items\n```\n\n**Имя:** Получить содержимое мешка\\\n**Тип:** Действие без значения\\\n**Описание:** Получает содержимое мешка и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::get_bundle_items(`variable`, item(\"stick\"));\n\n//Или от объекта\n\nitem(\"stick\").get_bundle_items(`variable`);\n\n//Или в сухую по ключам\n\nvariable::get_bundle_items(variable=`variable`, bundle=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `bundle`        | Предмет         | Мешок                          |","variable::get_char_at":"```justcode\nvariable::get_char_at\n```\n\n**Имя:** Получить символ по индексу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает символ из текста по указанному индексу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_char_at(\"text\", 1);\n\n//Или от объекта\n\n`variable` = \"text\".get_char_at(1);\n\n//Или в сухую позиционно\n\nvariable::get_char_at(`variable`, \"text\", 1);\n\n//Или в сухую по ключам\n\nvariable::get_char_at(variable=`variable`, text=\"text\", index=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `text`          | Текст           | Текст для получения символа      |\n| `index`         | Число           | Индекс                           |",".get_char_at":"```justcode\nvariable::get_char_at\n```\n\n**Имя:** Получить символ по индексу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает символ из текста по указанному индексу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_char_at(\"text\", 1);\n\n//Или от объекта\n\n`variable` = \"text\".get_char_at(1);\n\n//Или в сухую позиционно\n\nvariable::get_char_at(`variable`, \"text\", 1);\n\n//Или в сухую по ключам\n\nvariable::get_char_at(variable=`variable`, text=\"text\", index=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `text`          | Текст           | Текст для получения символа      |\n| `index`         | Число           | Индекс                           |","variable::get_color_channels":"```justcode\nvariable::get_color_channels\n```\n\n**Имя:** Получить цветовые каналы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает числовые значения RGB/HSB/HSL цвета в виде списка.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_color_channels(\"color\", \"HSB\");\n\n//Или от объекта\n\n`variable` = \"color\".get_color_channels(\"HSB\");\n\n//Или в сухую позиционно\n\nvariable::get_color_channels(`variable`, \"color\", \"HSB\");\n\n//Или в сухую по ключам\n\nvariable::get_color_channels(variable=`variable`, color=\"color\", color_channels=\"HSB\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**            | **Описание**                     |\n| :--------------- | :------------ | :-------------------------- |\n| `variable`            | Переменная         | Переменная для присвоения        |\n| `color`               | Текст              | Цвет для получения значения      |\n| `color_channels`      | Маркер             | Цветовой канал                   |\n|                       | **HSB** - HSB      |                                  |\n|                       | **HSL** - HSL      |                                  |\n|                       | **RGB** - RGB      |                                  |",".get_color_channels":"```justcode\nvariable::get_color_channels\n```\n\n**Имя:** Получить цветовые каналы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает числовые значения RGB/HSB/HSL цвета в виде списка.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_color_channels(\"color\", \"HSB\");\n\n//Или от объекта\n\n`variable` = \"color\".get_color_channels(\"HSB\");\n\n//Или в сухую позиционно\n\nvariable::get_color_channels(`variable`, \"color\", \"HSB\");\n\n//Или в сухую по ключам\n\nvariable::get_color_channels(variable=`variable`, color=\"color\", color_channels=\"HSB\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**            | **Описание**                     |\n| :--------------- | :------------ | :-------------------------- |\n| `variable`            | Переменная         | Переменная для присвоения        |\n| `color`               | Текст              | Цвет для получения значения      |\n| `color_channels`      | Маркер             | Цветовой канал                   |\n|                       | **HSB** - HSB      |                                  |\n|                       | **HSL** - HSL      |                                  |\n|                       | **RGB** - RGB      |                                  |","variable::get_compass_lodestone":"```justcode\nvariable::get_compass_lodestone\n```\n\n**Имя:** Получить местоположение магнетита\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает с намагниченного компаса местоположение магнетита и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_compass_lodestone(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_compass_lodestone();\n\n//Или в сухую позиционно\n\nvariable::get_compass_lodestone(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_compass_lodestone(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Намагниченный компас           |",".get_compass_lodestone":"```justcode\nvariable::get_compass_lodestone\n```\n\n**Имя:** Получить местоположение магнетита\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает с намагниченного компаса местоположение магнетита и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_compass_lodestone(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_compass_lodestone();\n\n//Или в сухую позиционно\n\nvariable::get_compass_lodestone(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_compass_lodestone(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Намагниченный компас           |","variable::get_component_children":"```justcode\nvariable::get_component_children\n```\n\n**Имя:** Получить дочерние части стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной дочерние части указанного стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_component_children(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".get_component_children();\n\n//Или в сухую позиционно\n\nvariable::get_component_children(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_component_children(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |",".get_component_children":"```justcode\nvariable::get_component_children\n```\n\n**Имя:** Получить дочерние части стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной дочерние части указанного стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_component_children(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".get_component_children();\n\n//Или в сухую позиционно\n\nvariable::get_component_children(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_component_children(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |","variable::get_component_decorations":"```justcode\nvariable::get_component_decorations\n```\n\n**Имя:** Получить декорации стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной все декорации (стилизацию) стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_component_decorations(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".get_component_decorations();\n\n//Или в сухую позиционно\n\nvariable::get_component_decorations(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_component_decorations(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |",".get_component_decorations":"```justcode\nvariable::get_component_decorations\n```\n\n**Имя:** Получить декорации стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной все декорации (стилизацию) стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_component_decorations(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".get_component_decorations();\n\n//Или в сухую позиционно\n\nvariable::get_component_decorations(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_component_decorations(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |","variable::get_component_hex_color":"```justcode\nvariable::get_component_hex_color\n```\n\n**Имя:** Получить HEX-цвет стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной HEX-цвет указанного стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_component_hex_color(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".get_component_hex_color();\n\n//Или в сухую позиционно\n\nvariable::get_component_hex_color(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_component_hex_color(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |",".get_component_hex_color":"```justcode\nvariable::get_component_hex_color\n```\n\n**Имя:** Получить HEX-цвет стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной HEX-цвет указанного стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_component_hex_color(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".get_component_hex_color();\n\n//Или в сухую позиционно\n\nvariable::get_component_hex_color(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_component_hex_color(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |","variable::get_component_parsing":"```justcode\nvariable::get_component_parsing\n```\n\n**Имя:** Получить тип преобразования стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение типа преобразования указанного стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_component_parsing(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".get_component_parsing();\n\n//Или в сухую позиционно\n\nvariable::get_component_parsing(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_component_parsing(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                    |\n| :---------- | :--------- | :------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения       |\n| `component`      | Текст           | Исходный стилизуемый текст      |",".get_component_parsing":"```justcode\nvariable::get_component_parsing\n```\n\n**Имя:** Получить тип преобразования стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение типа преобразования указанного стилизуемого текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_component_parsing(\"component\");\n\n//Или от объекта\n\n`variable` = \"component\".get_component_parsing();\n\n//Или в сухую позиционно\n\nvariable::get_component_parsing(`variable`, \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_component_parsing(variable=`variable`, component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                    |\n| :---------- | :--------- | :------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения       |\n| `component`      | Текст           | Исходный стилизуемый текст      |","variable::get_container_contents":"```justcode\nvariable::get_container_contents\n```\n\n**Имя:** Получить содержимое контейнера\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной список содержимого контейнера на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_container_contents(location(0,0,0,0,0), \"FALSE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_container_contents(\"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::get_container_contents(`variable`, location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::get_container_contents(variable=`variable`, location=location(0,0,0,0,0), ignore_empty_slots=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                   | **Тип**                          | **Описание**                     |\n| :------------------- | :-------------------------- | :-------------------------- |\n| `variable`                | Переменная                       | Переменная для присвоения        |\n| `location`                | Местоположение                   | Местоположение контейнера        |\n| `ignore_empty_slots`      | Маркер                           | Игнорирование пустых слотов      |\n|                           | **FALSE** - Не игнорировать      |                                  |\n|                           | **TRUE** - Игнорировать          |                                  |",".get_container_contents":"```justcode\nvariable::get_container_contents\n```\n\n**Имя:** Получить содержимое контейнера\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной список содержимого контейнера на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_container_contents(location(0,0,0,0,0), \"FALSE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_container_contents(\"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::get_container_contents(`variable`, location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::get_container_contents(variable=`variable`, location=location(0,0,0,0,0), ignore_empty_slots=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                   | **Тип**                          | **Описание**                     |\n| :------------------- | :-------------------------- | :-------------------------- |\n| `variable`                | Переменная                       | Переменная для присвоения        |\n| `location`                | Местоположение                   | Местоположение контейнера        |\n| `ignore_empty_slots`      | Маркер                           | Игнорирование пустых слотов      |\n|                           | **FALSE** - Не игнорировать      |                                  |\n|                           | **TRUE** - Игнорировать          |                                  |","variable::get_container_lock":"```justcode\nvariable::get_container_lock\n```\n\n**Имя:** Получить ключ контейнера\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной предмет ключа контейнера на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_container_lock(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_container_lock();\n\n//Или в сухую позиционно\n\nvariable::get_container_lock(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_container_lock(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |",".get_container_lock":"```justcode\nvariable::get_container_lock\n```\n\n**Имя:** Получить ключ контейнера\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной предмет ключа контейнера на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_container_lock(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_container_lock();\n\n//Или в сухую позиционно\n\nvariable::get_container_lock(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_container_lock(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |","variable::get_container_name":"```justcode\nvariable::get_container_name\n```\n\n**Имя:** Получить имя контейнера\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной имя контейнера на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_container_name(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_container_name();\n\n//Или в сухую позиционно\n\nvariable::get_container_name(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_container_name(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение контейнера      |",".get_container_name":"```justcode\nvariable::get_container_name\n```\n\n**Имя:** Получить имя контейнера\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной имя контейнера на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_container_name(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_container_name();\n\n//Или в сухую позиционно\n\nvariable::get_container_name(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_container_name(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение контейнера      |","variable::get_coordinate":"```justcode\nvariable::get_coordinate\n```\n\n**Имя:** Получить координату местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение выбранной координаты с местоположения и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_coordinate(location(0,0,0,0,0), \"PITCH\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_coordinate(\"PITCH\");\n\n//Или в сухую позиционно\n\nvariable::get_coordinate(`variable`, location(0,0,0,0,0), \"PITCH\");\n\n//Или в сухую по ключам\n\nvariable::get_coordinate(variable=`variable`, location=location(0,0,0,0,0), type=\"PITCH\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                               | **Описание**                               |\n| :--------- | :------------------------------- | :------------------------------------ |\n| `variable`      | Переменная                            | Переменная для присвоения                  |\n| `location`      | Местоположение                        | Местоположение для получения значения      |\n| `type`          | Маркер                                | Тип координаты                             |\n|                 | **PITCH** - Вертикальный поворот      |                                            |\n|                 | **X** - Ось X                         |                                            |\n|                 | **Y** - Ось Y                         |                                            |\n|                 | **YAW** - Горизонтальный поворот      |                                            |\n|                 | **Z** - Ось Z                         |                                            |",".get_coordinate":"```justcode\nvariable::get_coordinate\n```\n\n**Имя:** Получить координату местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение выбранной координаты с местоположения и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_coordinate(location(0,0,0,0,0), \"PITCH\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_coordinate(\"PITCH\");\n\n//Или в сухую позиционно\n\nvariable::get_coordinate(`variable`, location(0,0,0,0,0), \"PITCH\");\n\n//Или в сухую по ключам\n\nvariable::get_coordinate(variable=`variable`, location=location(0,0,0,0,0), type=\"PITCH\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                               | **Описание**                               |\n| :--------- | :------------------------------- | :------------------------------------ |\n| `variable`      | Переменная                            | Переменная для присвоения                  |\n| `location`      | Местоположение                        | Местоположение для получения значения      |\n| `type`          | Маркер                                | Тип координаты                             |\n|                 | **PITCH** - Вертикальный поворот      |                                            |\n|                 | **X** - Ось X                         |                                            |\n|                 | **Y** - Ось Y                         |                                            |\n|                 | **YAW** - Горизонтальный поворот      |                                            |\n|                 | **Z** - Ось Z                         |                                            |","variable::get_decorate_pot_sherd":"```justcode\nvariable::get_decorate_pot_sherd\n```\n\n**Имя:** Получить украшение вазы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной материал черепка выбранной стороны вазы на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_decorate_pot_sherd(location(0,0,0,0,0), \"BACK\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_decorate_pot_sherd(\"BACK\");\n\n//Или в сухую позиционно\n\nvariable::get_decorate_pot_sherd(`variable`, location(0,0,0,0,0), \"BACK\");\n\n//Или в сухую по ключам\n\nvariable::get_decorate_pot_sherd(variable=`variable`, location=location(0,0,0,0,0), side=\"BACK\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                           | **Описание**                   |\n| :--------- | :--------------------------- | :------------------------ |\n| `variable`      | Переменная                        | Переменная для присвоения      |\n| `location`      | Местоположение                    | Местоположение вазы            |\n| `side`          | Маркер                            | Сторона вазы                   |\n|                 | **BACK** - Задняя сторона         |                                |\n|                 | **FRONT** - Передняя сторона      |                                |\n|                 | **LEFT** - Левая сторона          |                                |\n|                 | **RIGHT** - Правая сторона        |                                |",".get_decorate_pot_sherd":"```justcode\nvariable::get_decorate_pot_sherd\n```\n\n**Имя:** Получить украшение вазы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной материал черепка выбранной стороны вазы на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_decorate_pot_sherd(location(0,0,0,0,0), \"BACK\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_decorate_pot_sherd(\"BACK\");\n\n//Или в сухую позиционно\n\nvariable::get_decorate_pot_sherd(`variable`, location(0,0,0,0,0), \"BACK\");\n\n//Или в сухую по ключам\n\nvariable::get_decorate_pot_sherd(variable=`variable`, location=location(0,0,0,0,0), side=\"BACK\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                           | **Описание**                   |\n| :--------- | :--------------------------- | :------------------------ |\n| `variable`      | Переменная                        | Переменная для присвоения      |\n| `location`      | Местоположение                    | Местоположение вазы            |\n| `side`          | Маркер                            | Сторона вазы                   |\n|                 | **BACK** - Задняя сторона         |                                |\n|                 | **FRONT** - Передняя сторона      |                                |\n|                 | **LEFT** - Левая сторона          |                                |\n|                 | **RIGHT** - Правая сторона        |                                |","variable::get_index_of_subtext":"```justcode\nvariable::get_index_of_subtext\n```\n\n**Имя:** Получить индекс подтекста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает индекс подтекста из текста и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_index_of_subtext(\"text\", \"subtext\", 1, \"FIRST\");\n\n//Или от объекта\n\n`variable` = \"text\".get_index_of_subtext(\"subtext\", 1, \"FIRST\");\n\n//Или в сухую позиционно\n\nvariable::get_index_of_subtext(`variable`, \"text\", \"subtext\", 1, \"FIRST\");\n\n//Или в сухую по ключам\n\nvariable::get_index_of_subtext(variable=`variable`, text=\"text\", subtext=\"subtext\", start_index=1, search_mode=\"FIRST\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                             | **Описание**                     |\n| :------------ | :--------------------------------------------- | :-------------------------- |\n| `variable`         | Переменная                                          | Переменная для присвоения        |\n| `text`             | Текст                                               | Текст для получения индекса      |\n| `subtext`          | Текст                                               | Подтекст                         |\n| `start_index`      | Число                                               | Начальный индекс                 |\n| `search_mode`      | Маркер                                              | Режим поиска                     |\n|                    | **FIRST** - С начала (получить первый индекс)       |                                  |\n|                    | **LAST** - С конца (получить последний индекс)      |                                  |",".get_index_of_subtext":"```justcode\nvariable::get_index_of_subtext\n```\n\n**Имя:** Получить индекс подтекста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает индекс подтекста из текста и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_index_of_subtext(\"text\", \"subtext\", 1, \"FIRST\");\n\n//Или от объекта\n\n`variable` = \"text\".get_index_of_subtext(\"subtext\", 1, \"FIRST\");\n\n//Или в сухую позиционно\n\nvariable::get_index_of_subtext(`variable`, \"text\", \"subtext\", 1, \"FIRST\");\n\n//Или в сухую по ключам\n\nvariable::get_index_of_subtext(variable=`variable`, text=\"text\", subtext=\"subtext\", start_index=1, search_mode=\"FIRST\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                             | **Описание**                     |\n| :------------ | :--------------------------------------------- | :-------------------------- |\n| `variable`         | Переменная                                          | Переменная для присвоения        |\n| `text`             | Текст                                               | Текст для получения индекса      |\n| `subtext`          | Текст                                               | Подтекст                         |\n| `start_index`      | Число                                               | Начальный индекс                 |\n| `search_mode`      | Маркер                                              | Режим поиска                     |\n|                    | **FIRST** - С начала (получить первый индекс)       |                                  |\n|                    | **LAST** - С конца (получить последний индекс)      |                                  |","variable::get_item_amount":"```justcode\nvariable::get_item_amount\n```\n\n**Имя:** Получить количество предметов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной количество предметов в стаке.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_amount(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_amount();\n\n//Или в сухую позиционно\n\nvariable::get_item_amount(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_amount(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_amount":"```justcode\nvariable::get_item_amount\n```\n\n**Имя:** Получить количество предметов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной количество предметов в стаке.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_amount(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_amount();\n\n//Или в сухую позиционно\n\nvariable::get_item_amount(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_amount(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_attribute":"```justcode\nvariable::get_item_attribute\n```\n\n**Имя:** Получить атрибут предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённый атрибут с предмета в виде словаря \\\"UUID - Значение\\\" и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_attribute(item(\"stick\"), \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_attribute(\"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или в сухую позиционно\n\nvariable::get_item_attribute(`variable`, item(\"stick\"), \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или в сухую по ключам\n\nvariable::get_item_attribute(variable=`variable`, item=item(\"stick\"), name=\"name\", attribute=\"ARMOR\", slot=\"ALL\", operation=\"ADD_NUMBER\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                                                                                           | **Описание**                   |\n| :---------- | :------------------------------------------------------------------------------------------- | :------------------------ |\n| `variable`       | Переменная                                                                                        | Переменная для присвоения      |\n| `item`           | Предмет                                                                                           | Предмет                        |\n| `name`           | Текст                                                                                             | Имя атрибута                   |\n| `attribute`      | Маркер                                                                                            | Тип атрибута                   |\n|                  | **ARMOR** - Броня                                                                                 |                                |\n|                  | **ARMOR_TOUGHNESS** - Плотность защиты                                                            |                                |\n|                  | **ATTACK_DAMAGE** - Урон атаки                                                                    |                                |\n|                  | **ATTACK_KNOCKBACK** - Отталкивание от атаки                                                      |                                |\n|                  | **ATTACK_SPEED** - Скорость атаки                                                                 |                                |\n|                  | **FLYING_SPEED** - Скорость полёта                                                                |                                |\n|                  | **FOLLOW_RANGE** - Расстояние следования                                                          |                                |\n|                  | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                                |\n|                  | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                                |\n|                  | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                                |\n|                  | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                                |\n|                  | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                                |\n|                  | **GENERIC_BURNING_TIME** - Время горения                                                          |                                |\n|                  | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                                |\n|                  | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                                |\n|                  | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                                |\n|                  | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                                |\n|                  | **GENERIC_GRAVITY** - Гравитация                                                                  |                                |\n|                  | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                                |\n|                  | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                                |\n|                  | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                                |\n|                  | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                                |\n|                  | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                                |\n|                  | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                                |\n|                  | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                                |\n|                  | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                                |\n|                  | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                                |\n|                  | **GENERIC_SCALE** - Масштаб                                                                       |                                |\n|                  | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                                |\n|                  | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                                |\n|                  | **HORSE_JUMP_STRENGTH** - Сила прыжка лошади (horse.jump_strength)                                |                                |\n|                  | **KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию                                             |                                |\n|                  | **LUCK** - Удача                                                                                  |                                |\n|                  | **MAX_ABSORPTION** - Максимальное поглощение                                                      |                                |\n|                  | **MAX_HEALTH** - Максимальное здоровье                                                            |                                |\n|                  | **MOVEMENT_SPEED** - Скорость передвижения                                                        |                                |\n|                  | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                                |\n|                  | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                                |\n|                  | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                                |\n|                  | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                                |\n|                  | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                                |\n|                  | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                                |\n|                  | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                                |\n|                  | **ZOMBIE_SPAWN_REINFORCEMENTS** - Шанс подкрепления зомби (zombie.spawn_reinforcements)           |                                |\n| `slot`           | Маркер                                                                                            | Слот атрибута                  |\n|                  | **ALL** - Все                                                                                     |                                |\n|                  | **ARMOR** - Любая броня                                                                           |                                |\n|                  | **BODY** - Тело (работает не со всеми сущностями)                                                 |                                |\n|                  | **BOOTS** - Ботинки                                                                               |                                |\n|                  | **CHEST** - Нагрудник                                                                             |                                |\n|                  | **HAND** - Любая рука                                                                             |                                |\n|                  | **HEAD** - Шлем                                                                                   |                                |\n|                  | **LEGGINGS** - Поножи                                                                             |                                |\n|                  | **MAIN_HAND** - Основная рука                                                                     |                                |\n|                  | **OFF_HAND** - Второстепенная рука                                                                |                                |\n| `operation`      | Маркер                                                                                            | Операция атрибута              |\n|                  | **ADD_NUMBER** - Количество (amount)                                                              |                                |\n|                  | **ADD_SCALAR** - Процент (percentage)                                                             |                                |\n|                  | **MULTIPLY_SCALAR_1** - Произведение (multiplicative)                                             |                                |",".get_item_attribute":"```justcode\nvariable::get_item_attribute\n```\n\n**Имя:** Получить атрибут предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённый атрибут с предмета в виде словаря \\\"UUID - Значение\\\" и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_attribute(item(\"stick\"), \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_attribute(\"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или в сухую позиционно\n\nvariable::get_item_attribute(`variable`, item(\"stick\"), \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или в сухую по ключам\n\nvariable::get_item_attribute(variable=`variable`, item=item(\"stick\"), name=\"name\", attribute=\"ARMOR\", slot=\"ALL\", operation=\"ADD_NUMBER\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                                                                                           | **Описание**                   |\n| :---------- | :------------------------------------------------------------------------------------------- | :------------------------ |\n| `variable`       | Переменная                                                                                        | Переменная для присвоения      |\n| `item`           | Предмет                                                                                           | Предмет                        |\n| `name`           | Текст                                                                                             | Имя атрибута                   |\n| `attribute`      | Маркер                                                                                            | Тип атрибута                   |\n|                  | **ARMOR** - Броня                                                                                 |                                |\n|                  | **ARMOR_TOUGHNESS** - Плотность защиты                                                            |                                |\n|                  | **ATTACK_DAMAGE** - Урон атаки                                                                    |                                |\n|                  | **ATTACK_KNOCKBACK** - Отталкивание от атаки                                                      |                                |\n|                  | **ATTACK_SPEED** - Скорость атаки                                                                 |                                |\n|                  | **FLYING_SPEED** - Скорость полёта                                                                |                                |\n|                  | **FOLLOW_RANGE** - Расстояние следования                                                          |                                |\n|                  | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                                |\n|                  | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                                |\n|                  | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                                |\n|                  | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                                |\n|                  | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                                |\n|                  | **GENERIC_BURNING_TIME** - Время горения                                                          |                                |\n|                  | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                                |\n|                  | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                                |\n|                  | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                                |\n|                  | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                                |\n|                  | **GENERIC_GRAVITY** - Гравитация                                                                  |                                |\n|                  | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                                |\n|                  | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                                |\n|                  | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                                |\n|                  | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                                |\n|                  | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                                |\n|                  | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                                |\n|                  | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                                |\n|                  | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                                |\n|                  | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                                |\n|                  | **GENERIC_SCALE** - Масштаб                                                                       |                                |\n|                  | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                                |\n|                  | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                                |\n|                  | **HORSE_JUMP_STRENGTH** - Сила прыжка лошади (horse.jump_strength)                                |                                |\n|                  | **KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию                                             |                                |\n|                  | **LUCK** - Удача                                                                                  |                                |\n|                  | **MAX_ABSORPTION** - Максимальное поглощение                                                      |                                |\n|                  | **MAX_HEALTH** - Максимальное здоровье                                                            |                                |\n|                  | **MOVEMENT_SPEED** - Скорость передвижения                                                        |                                |\n|                  | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                                |\n|                  | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                                |\n|                  | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                                |\n|                  | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                                |\n|                  | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                                |\n|                  | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                                |\n|                  | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                                |\n|                  | **ZOMBIE_SPAWN_REINFORCEMENTS** - Шанс подкрепления зомби (zombie.spawn_reinforcements)           |                                |\n| `slot`           | Маркер                                                                                            | Слот атрибута                  |\n|                  | **ALL** - Все                                                                                     |                                |\n|                  | **ARMOR** - Любая броня                                                                           |                                |\n|                  | **BODY** - Тело (работает не со всеми сущностями)                                                 |                                |\n|                  | **BOOTS** - Ботинки                                                                               |                                |\n|                  | **CHEST** - Нагрудник                                                                             |                                |\n|                  | **HAND** - Любая рука                                                                             |                                |\n|                  | **HEAD** - Шлем                                                                                   |                                |\n|                  | **LEGGINGS** - Поножи                                                                             |                                |\n|                  | **MAIN_HAND** - Основная рука                                                                     |                                |\n|                  | **OFF_HAND** - Второстепенная рука                                                                |                                |\n| `operation`      | Маркер                                                                                            | Операция атрибута              |\n|                  | **ADD_NUMBER** - Количество (amount)                                                              |                                |\n|                  | **ADD_SCALAR** - Процент (percentage)                                                             |                                |\n|                  | **MULTIPLY_SCALAR_1** - Произведение (multiplicative)                                             |                                |","variable::get_item_break_sound":"```justcode\nvariable::get_item_break_sound\n```\n\n**Имя:** Получить звук ломания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает звук, воспроизводимый при поломке указанного предмета, и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_break_sound(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_break_sound();\n\n//Или в сухую позиционно\n\nvariable::get_item_break_sound(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_break_sound(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_break_sound":"```justcode\nvariable::get_item_break_sound\n```\n\n**Имя:** Получить звук ломания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает звук, воспроизводимый при поломке указанного предмета, и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_break_sound(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_break_sound();\n\n//Или в сухую позиционно\n\nvariable::get_item_break_sound(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_break_sound(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_color":"```justcode\nvariable::get_item_color\n```\n\n**Имя:** Получить цвет предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение цвета предмета.\n**Работает с:**\\\n&nbsp;&nbsp;Кожаной бронёй\\\n&nbsp;&nbsp;Зельями\\\n&nbsp;&nbsp;Стрелами с эффектом\\\n&nbsp;&nbsp;Заполненными картами\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_color(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_color();\n\n//Или в сухую позиционно\n\nvariable::get_item_color(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_color(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_color":"```justcode\nvariable::get_item_color\n```\n\n**Имя:** Получить цвет предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение цвета предмета.\n**Работает с:**\\\n&nbsp;&nbsp;Кожаной бронёй\\\n&nbsp;&nbsp;Зельями\\\n&nbsp;&nbsp;Стрелами с эффектом\\\n&nbsp;&nbsp;Заполненными картами\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_color(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_color();\n\n//Или в сухую позиционно\n\nvariable::get_item_color(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_color(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_component":"```justcode\nvariable::get_item_component\n```\n\n**Имя:** Получить компонент предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение компонента предмета и присваисвает значение к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_component(item(\"stick\"), \"component\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_component(\"component\");\n\n//Или в сухую позиционно\n\nvariable::get_item_component(`variable`, item(\"stick\"), \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_item_component(variable=`variable`, item=item(\"stick\"), component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `item`           | Предмет         | Предмет                        |\n| `component`      | Текст           | Ключ компонента                |",".get_item_component":"```justcode\nvariable::get_item_component\n```\n\n**Имя:** Получить компонент предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение компонента предмета и присваисвает значение к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_component(item(\"stick\"), \"component\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_component(\"component\");\n\n//Или в сухую позиционно\n\nvariable::get_item_component(`variable`, item(\"stick\"), \"component\");\n\n//Или в сухую по ключам\n\nvariable::get_item_component(variable=`variable`, item=item(\"stick\"), component=\"component\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `item`           | Предмет         | Предмет                        |\n| `component`      | Текст           | Ключ компонента                |","variable::get_item_custom_model_data":"```justcode\nvariable::get_item_custom_model_data\n```\n\n**Имя:** Получить данные модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает данные модели предмета (CustomModelData) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_custom_model_data(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_custom_model_data();\n\n//Или в сухую позиционно\n\nvariable::get_item_custom_model_data(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_custom_model_data(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_custom_model_data":"```justcode\nvariable::get_item_custom_model_data\n```\n\n**Имя:** Получить данные модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает данные модели предмета (CustomModelData) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_custom_model_data(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_custom_model_data();\n\n//Или в сухую позиционно\n\nvariable::get_item_custom_model_data(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_custom_model_data(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_custom_tag":"```justcode\nvariable::get_item_custom_tag\n```\n\n**Имя:** Получить кастомный тег предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение кастомного тега предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_custom_tag(item(\"stick\"), \"tag_name\", \"any value\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_custom_tag(\"tag_name\", \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_item_custom_tag(`variable`, item(\"stick\"), \"tag_name\", \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_item_custom_tag(variable=`variable`, item=item(\"stick\"), tag_name=\"tag_name\", default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                   |\n| :-------------- | :------------- | :------------------------ |\n| `variable`           | Переменная          | Переменная для присвоения      |\n| `item`               | Предмет             | Предмет                        |\n| `tag_name`           | Текст               | Имя тега                       |\n| `default_value`      | Любое значение      | Значение по умолчанию          |",".get_item_custom_tag":"```justcode\nvariable::get_item_custom_tag\n```\n\n**Имя:** Получить кастомный тег предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение кастомного тега предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_custom_tag(item(\"stick\"), \"tag_name\", \"any value\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_custom_tag(\"tag_name\", \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_item_custom_tag(`variable`, item(\"stick\"), \"tag_name\", \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_item_custom_tag(variable=`variable`, item=item(\"stick\"), tag_name=\"tag_name\", default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                   |\n| :-------------- | :------------- | :------------------------ |\n| `variable`           | Переменная          | Переменная для присвоения      |\n| `item`               | Предмет             | Предмет                        |\n| `tag_name`           | Текст               | Имя тега                       |\n| `default_value`      | Любое значение      | Значение по умолчанию          |","variable::get_item_custom_tags":"```justcode\nvariable::get_item_custom_tags\n```\n\n**Имя:** Получить кастомные теги предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной словарь кастомных тегов предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_custom_tags(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_custom_tags();\n\n//Или в сухую позиционно\n\nvariable::get_item_custom_tags(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_custom_tags(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_custom_tags":"```justcode\nvariable::get_item_custom_tags\n```\n\n**Имя:** Получить кастомные теги предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной словарь кастомных тегов предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_custom_tags(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_custom_tags();\n\n//Или в сухую позиционно\n\nvariable::get_item_custom_tags(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_custom_tags(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_destroyable_blocks":"```justcode\nvariable::get_item_destroyable_blocks\n```\n\n**Имя:** Получить блоки для ломания предметом\\\n**Тип:** Действие без значения\\\n**Описание:** Получает блоки, которые может ломать предмет и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::get_item_destroyable_blocks(`variable`, item(\"stick\"));\n\n//Или от объекта\n\nitem(\"stick\").get_item_destroyable_blocks(`variable`);\n\n//Или в сухую по ключам\n\nvariable::get_item_destroyable_blocks(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_destroyable_blocks":"```justcode\nvariable::get_item_destroyable_blocks\n```\n\n**Имя:** Получить блоки для ломания предметом\\\n**Тип:** Действие без значения\\\n**Описание:** Получает блоки, которые может ломать предмет и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::get_item_destroyable_blocks(`variable`, item(\"stick\"));\n\n//Или от объекта\n\nitem(\"stick\").get_item_destroyable_blocks(`variable`);\n\n//Или в сухую по ключам\n\nvariable::get_item_destroyable_blocks(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_durability":"```justcode\nvariable::get_item_durability\n```\n\n**Имя:** Получить прочность предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной прочность указанного предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_durability(item(\"stick\"), \"DAMAGE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_durability(\"DAMAGE\");\n\n//Или в сухую позиционно\n\nvariable::get_item_durability(`variable`, item(\"stick\"), \"DAMAGE\");\n\n//Или в сухую по ключам\n\nvariable::get_item_durability(variable=`variable`, item=item(\"stick\"), durability_type=\"DAMAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                      | **Описание**                   |\n| :---------------- | :------------------------------------------------------ | :------------------------ |\n| `variable`             | Переменная                                                   | Переменная для присвоения      |\n| `item`                 | Предмет                                                      | Предмет                        |\n| `durability_type`      | Маркер                                                       | Тип прочности                  |\n|                        | **DAMAGE** - Текущая прочность                               |                                |\n|                        | **DAMAGE_PERCENTAGE** - Текущий процент прочности            |                                |\n|                        | **MAXIMUM** - Максимальная прочность                         |                                |\n|                        | **REMAINING** - Остаточная прочность                         |                                |\n|                        | **REMAINING_PERCENTAGE** - Остаточный процент прочности      |                                |",".get_item_durability":"```justcode\nvariable::get_item_durability\n```\n\n**Имя:** Получить прочность предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной прочность указанного предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_durability(item(\"stick\"), \"DAMAGE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_durability(\"DAMAGE\");\n\n//Или в сухую позиционно\n\nvariable::get_item_durability(`variable`, item(\"stick\"), \"DAMAGE\");\n\n//Или в сухую по ключам\n\nvariable::get_item_durability(variable=`variable`, item=item(\"stick\"), durability_type=\"DAMAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                      | **Описание**                   |\n| :---------------- | :------------------------------------------------------ | :------------------------ |\n| `variable`             | Переменная                                                   | Переменная для присвоения      |\n| `item`                 | Предмет                                                      | Предмет                        |\n| `durability_type`      | Маркер                                                       | Тип прочности                  |\n|                        | **DAMAGE** - Текущая прочность                               |                                |\n|                        | **DAMAGE_PERCENTAGE** - Текущий процент прочности            |                                |\n|                        | **MAXIMUM** - Максимальная прочность                         |                                |\n|                        | **REMAINING** - Остаточная прочность                         |                                |\n|                        | **REMAINING_PERCENTAGE** - Остаточный процент прочности      |                                |","variable::get_item_effective_name":"```justcode\nvariable::get_item_effective_name\n```\n\n**Имя:** Получить отображаемое в инвентаре имя предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает имя предмета, в том виде, в котором оно отображается в инвентаре, и присваивает его к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Возвращаемый текст создается из нескольких частей, которые влияют на отображаемое имя, в том числе из редкости и переводимого имени предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_effective_name(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_effective_name();\n\n//Или в сухую позиционно\n\nvariable::get_item_effective_name(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_effective_name(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_effective_name":"```justcode\nvariable::get_item_effective_name\n```\n\n**Имя:** Получить отображаемое в инвентаре имя предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает имя предмета, в том виде, в котором оно отображается в инвентаре, и присваивает его к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Возвращаемый текст создается из нескольких частей, которые влияют на отображаемое имя, в том числе из редкости и переводимого имени предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_effective_name(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_effective_name();\n\n//Или в сухую позиционно\n\nvariable::get_item_effective_name(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_effective_name(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_enchantments":"```justcode\nvariable::get_item_enchantments\n```\n\n**Имя:** Получить зачарования предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной словарь зачарований и их уровней предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_enchantments(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_enchantments();\n\n//Или в сухую позиционно\n\nvariable::get_item_enchantments(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_enchantments(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_enchantments":"```justcode\nvariable::get_item_enchantments\n```\n\n**Имя:** Получить зачарования предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной словарь зачарований и их уровней предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_enchantments(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_enchantments();\n\n//Или в сухую позиционно\n\nvariable::get_item_enchantments(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_enchantments(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_food_properties":"```justcode\nvariable::get_item_food_properties\n```\n\n**Имя:** Получить значение компонента еды предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение компонента еды предмета и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_food_properties(item(\"stick\"), \"\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_food_properties(\"\");\n\n//Или в сухую позиционно\n\nvariable::get_item_food_properties(`variable`, item(\"stick\"), \"\");\n\n//Или в сухую по ключам\n\nvariable::get_item_food_properties(variable=`variable`, item=item(\"stick\"), property=\"\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**          | **Описание**                   |\n| :--------- | :---------- | :------------------------ |\n| `variable`      | Переменная       | Переменная для присвоения      |\n| `item`          | Предмет          | Предмет                        |\n| `property`      | Маркер           | Значение                       |\n|                 | **** - None      |                                |",".get_item_food_properties":"```justcode\nvariable::get_item_food_properties\n```\n\n**Имя:** Получить значение компонента еды предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение компонента еды предмета и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_food_properties(item(\"stick\"), \"\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_food_properties(\"\");\n\n//Или в сухую позиционно\n\nvariable::get_item_food_properties(`variable`, item(\"stick\"), \"\");\n\n//Или в сухую по ключам\n\nvariable::get_item_food_properties(variable=`variable`, item=item(\"stick\"), property=\"\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**          | **Описание**                   |\n| :--------- | :---------- | :------------------------ |\n| `variable`      | Переменная       | Переменная для присвоения      |\n| `item`          | Предмет          | Предмет                        |\n| `property`      | Маркер           | Значение                       |\n|                 | **** - None      |                                |","variable::get_item_lore":"```justcode\nvariable::get_item_lore\n```\n\n**Имя:** Получить описание предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной текст описания предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_lore(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_lore();\n\n//Или в сухую позиционно\n\nvariable::get_item_lore(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_lore(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_lore":"```justcode\nvariable::get_item_lore\n```\n\n**Имя:** Получить описание предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной текст описания предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_lore(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_lore();\n\n//Или в сухую позиционно\n\nvariable::get_item_lore(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_lore(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_lore_line":"```justcode\nvariable::get_item_lore_line\n```\n\n**Имя:** Получить строку описания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной строку описания предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_lore_line(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_lore_line(1);\n\n//Или в сухую позиционно\n\nvariable::get_item_lore_line(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::get_item_lore_line(variable=`variable`, item=item(\"stick\"), line=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `line`          | Число           | Номер строки                   |",".get_item_lore_line":"```justcode\nvariable::get_item_lore_line\n```\n\n**Имя:** Получить строку описания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной строку описания предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_lore_line(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_lore_line(1);\n\n//Или в сухую позиционно\n\nvariable::get_item_lore_line(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::get_item_lore_line(variable=`variable`, item=item(\"stick\"), line=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `line`          | Число           | Номер строки                   |","variable::get_item_max_stack_size":"```justcode\nvariable::get_item_max_stack_size\n```\n\n**Имя:** Получить максимальное количество предметов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной максимально возможное количество предметов в стаке.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_max_stack_size(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_max_stack_size();\n\n//Или в сухую позиционно\n\nvariable::get_item_max_stack_size(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_max_stack_size(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_max_stack_size":"```justcode\nvariable::get_item_max_stack_size\n```\n\n**Имя:** Получить максимальное количество предметов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной максимально возможное количество предметов в стаке.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_max_stack_size(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_max_stack_size();\n\n//Или в сухую позиционно\n\nvariable::get_item_max_stack_size(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_max_stack_size(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_model_data":"```justcode\nvariable::get_item_model_data\n```\n\n**Имя:** Получить модель предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает модель указанного предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_model_data(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_model_data();\n\n//Или в сухую позиционно\n\nvariable::get_item_model_data(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_model_data(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_model_data":"```justcode\nvariable::get_item_model_data\n```\n\n**Имя:** Получить модель предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает модель указанного предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_model_data(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_model_data();\n\n//Или в сухую позиционно\n\nvariable::get_item_model_data(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_model_data(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_name":"```justcode\nvariable::get_item_name\n```\n\n**Имя:** Получить имя предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной отображаемое имя предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_name(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_name();\n\n//Или в сухую позиционно\n\nvariable::get_item_name(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_name(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_name":"```justcode\nvariable::get_item_name\n```\n\n**Имя:** Получить имя предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной отображаемое имя предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_name(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_name();\n\n//Или в сухую позиционно\n\nvariable::get_item_name(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_name(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_nbt_tags":"```justcode\nvariable::get_item_nbt_tags\n```\n\n**Имя:** Получить данные о предмете\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной данные об указанном предмете.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_nbt_tags(item(\"stick\"), \"ALL\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_nbt_tags(\"ALL\");\n\n//Или в сухую позиционно\n\nvariable::get_item_nbt_tags(`variable`, item(\"stick\"), \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::get_item_nbt_tags(variable=`variable`, item=item(\"stick\"), fetch_mode=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                               | **Описание**                   |\n| :----------- | :------------------------------- | :------------------------ |\n| `variable`        | Переменная                            | Переменная для присвоения      |\n| `item`            | Предмет                               | Предмет                        |\n| `fetch_mode`      | Маркер                                | Тип данных                     |\n|                   | **ALL** - Все                         |                                |\n|                   | **CUSTOM_DATA** - Кастомные теги      |                                |",".get_item_nbt_tags":"```justcode\nvariable::get_item_nbt_tags\n```\n\n**Имя:** Получить данные о предмете\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной данные об указанном предмете.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_nbt_tags(item(\"stick\"), \"ALL\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_nbt_tags(\"ALL\");\n\n//Или в сухую позиционно\n\nvariable::get_item_nbt_tags(`variable`, item(\"stick\"), \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::get_item_nbt_tags(variable=`variable`, item=item(\"stick\"), fetch_mode=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                               | **Описание**                   |\n| :----------- | :------------------------------- | :------------------------ |\n| `variable`        | Переменная                            | Переменная для присвоения      |\n| `item`            | Предмет                               | Предмет                        |\n| `fetch_mode`      | Маркер                                | Тип данных                     |\n|                   | **ALL** - Все                         |                                |\n|                   | **CUSTOM_DATA** - Кастомные теги      |                                |","variable::get_item_placeable_blocks":"```justcode\nvariable::get_item_placeable_blocks\n```\n\n**Имя:** Получить блоки для установки предмета\\\n**Тип:** Действие без значения\\\n**Описание:** Получает блоки, на которые может быть установлен предмет и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::get_item_placeable_blocks(`variable`, item(\"stick\"));\n\n//Или от объекта\n\nitem(\"stick\").get_item_placeable_blocks(`variable`);\n\n//Или в сухую по ключам\n\nvariable::get_item_placeable_blocks(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_placeable_blocks":"```justcode\nvariable::get_item_placeable_blocks\n```\n\n**Имя:** Получить блоки для установки предмета\\\n**Тип:** Действие без значения\\\n**Описание:** Получает блоки, на которые может быть установлен предмет и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::get_item_placeable_blocks(`variable`, item(\"stick\"));\n\n//Или от объекта\n\nitem(\"stick\").get_item_placeable_blocks(`variable`);\n\n//Или в сухую по ключам\n\nvariable::get_item_placeable_blocks(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_potion_effects":"```justcode\nvariable::get_item_potion_effects\n```\n\n**Имя:** Получить эффекты зелий из предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает эффекты зелий из предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_potion_effects(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_potion_effects();\n\n//Или в сухую позиционно\n\nvariable::get_item_potion_effects(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_potion_effects(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_potion_effects":"```justcode\nvariable::get_item_potion_effects\n```\n\n**Имя:** Получить эффекты зелий из предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает эффекты зелий из предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_potion_effects(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_potion_effects();\n\n//Или в сухую позиционно\n\nvariable::get_item_potion_effects(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_potion_effects(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_rarity":"```justcode\nvariable::get_item_rarity\n```\n\n**Имя:** Получить редкость предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает редкость предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_rarity(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_rarity();\n\n//Или в сухую позиционно\n\nvariable::get_item_rarity(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_rarity(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_rarity":"```justcode\nvariable::get_item_rarity\n```\n\n**Имя:** Получить редкость предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает редкость предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_rarity(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_rarity();\n\n//Или в сухую позиционно\n\nvariable::get_item_rarity(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_rarity(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_tooltip_style":"```justcode\nvariable::get_item_tooltip_style\n```\n\n**Имя:** Получить стиль всплывающей подсказки предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает стиль всплывающей подсказки предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_tooltip_style(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_tooltip_style();\n\n//Или в сухую позиционно\n\nvariable::get_item_tooltip_style(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_tooltip_style(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_tooltip_style":"```justcode\nvariable::get_item_tooltip_style\n```\n\n**Имя:** Получить стиль всплывающей подсказки предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает стиль всплывающей подсказки предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_tooltip_style(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_tooltip_style();\n\n//Или в сухую позиционно\n\nvariable::get_item_tooltip_style(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_tooltip_style(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_type":"```justcode\nvariable::get_item_type\n```\n\n**Имя:** Получить тип предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной тип предмета, представленный в виде текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_type(item(\"stick\"), \"ID\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_type(\"ID\");\n\n//Или в сухую позиционно\n\nvariable::get_item_type(`variable`, item(\"stick\"), \"ID\");\n\n//Или в сухую по ключам\n\nvariable::get_item_type(variable=`variable`, type=item(\"stick\"), value=\"ID\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                      | **Описание**                   |\n| :--------- | :---------------------- | :------------------------ |\n| `variable`      | Переменная                   | Переменная для присвоения      |\n| `type`          | Предмет                      | Предмет                        |\n| `value`         | Маркер                       | Текстовое представление        |\n|                 | **ID** - ID предмета         |                                |\n|                 | **ITEM** - Предмет           |                                |\n|                 | **NAME** - Имя предмета      |                                |",".get_item_type":"```justcode\nvariable::get_item_type\n```\n\n**Имя:** Получить тип предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной тип предмета, представленный в виде текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_type(item(\"stick\"), \"ID\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_type(\"ID\");\n\n//Или в сухую позиционно\n\nvariable::get_item_type(`variable`, item(\"stick\"), \"ID\");\n\n//Или в сухую по ключам\n\nvariable::get_item_type(variable=`variable`, type=item(\"stick\"), value=\"ID\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                      | **Описание**                   |\n| :--------- | :---------------------- | :------------------------ |\n| `variable`      | Переменная                   | Переменная для присвоения      |\n| `type`          | Предмет                      | Предмет                        |\n| `value`         | Маркер                       | Текстовое представление        |\n|                 | **ID** - ID предмета         |                                |\n|                 | **ITEM** - Предмет           |                                |\n|                 | **NAME** - Имя предмета      |                                |","variable::get_item_use_remainder":"```justcode\nvariable::get_item_use_remainder\n```\n\n**Имя:** Получить превращение предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает предмет, в который превратится указанный предмет после использования и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_use_remainder(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_use_remainder();\n\n//Или в сухую позиционно\n\nvariable::get_item_use_remainder(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_use_remainder(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".get_item_use_remainder":"```justcode\nvariable::get_item_use_remainder\n```\n\n**Имя:** Получить превращение предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает предмет, в который превратится указанный предмет после использования и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_use_remainder(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_use_remainder();\n\n//Или в сухую позиционно\n\nvariable::get_item_use_remainder(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::get_item_use_remainder(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::get_item_weapon":"```justcode\nvariable::get_item_weapon\n```\n\n**Имя:** Получить значение компонента оружия предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение компонента оружия предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_weapon(item(\"stick\"), \"ITEM_DAMAGE_PER_ATTACK\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_weapon(\"ITEM_DAMAGE_PER_ATTACK\");\n\n//Или в сухую позиционно\n\nvariable::get_item_weapon(`variable`, item(\"stick\"), \"ITEM_DAMAGE_PER_ATTACK\");\n\n//Или в сухую по ключам\n\nvariable::get_item_weapon(variable=`variable`, item=item(\"stick\"), property=\"ITEM_DAMAGE_PER_ATTACK\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                               | **Описание**                   |\n| :--------- | :----------------------------------------------- | :------------------------ |\n| `variable`      | Переменная                                            | Переменная для присвоения      |\n| `item`          | Предмет                                               | Предмет                        |\n| `property`      | Маркер                                                | Значение                       |\n|                 | **ITEM_DAMAGE_PER_ATTACK** - Урон от атаки            |                                |\n|                 | **DISABLE_BLOCKING** - Задержка щита после удара      |                                |",".get_item_weapon":"```justcode\nvariable::get_item_weapon\n```\n\n**Имя:** Получить значение компонента оружия предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение компонента оружия предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_item_weapon(item(\"stick\"), \"ITEM_DAMAGE_PER_ATTACK\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_item_weapon(\"ITEM_DAMAGE_PER_ATTACK\");\n\n//Или в сухую позиционно\n\nvariable::get_item_weapon(`variable`, item(\"stick\"), \"ITEM_DAMAGE_PER_ATTACK\");\n\n//Или в сухую по ключам\n\nvariable::get_item_weapon(variable=`variable`, item=item(\"stick\"), property=\"ITEM_DAMAGE_PER_ATTACK\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                               | **Описание**                   |\n| :--------- | :----------------------------------------------- | :------------------------ |\n| `variable`      | Переменная                                            | Переменная для присвоения      |\n| `item`          | Предмет                                               | Предмет                        |\n| `property`      | Маркер                                                | Значение                       |\n|                 | **ITEM_DAMAGE_PER_ATTACK** - Урон от атаки            |                                |\n|                 | **DISABLE_BLOCKING** - Задержка щита после удара      |                                |","variable::get_lectern_book":"```justcode\nvariable::get_lectern_book\n```\n\n**Имя:** Получить книгу с кафедры\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной книгу с кафедры на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_lectern_book(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_lectern_book();\n\n//Или в сухую позиционно\n\nvariable::get_lectern_book(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_lectern_book(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |",".get_lectern_book":"```justcode\nvariable::get_lectern_book\n```\n\n**Имя:** Получить книгу с кафедры\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной книгу с кафедры на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_lectern_book(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_lectern_book();\n\n//Или в сухую позиционно\n\nvariable::get_lectern_book(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_lectern_book(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |","variable::get_lectern_page":"```justcode\nvariable::get_lectern_page\n```\n\n**Имя:** Получить страницу книги с кафедры\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной номер текущей страницы книги с кафедры на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_lectern_page(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_lectern_page();\n\n//Или в сухую позиционно\n\nvariable::get_lectern_page(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_lectern_page(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |",".get_lectern_page":"```justcode\nvariable::get_lectern_page\n```\n\n**Имя:** Получить страницу книги с кафедры\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной номер текущей страницы книги с кафедры на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_lectern_page(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_lectern_page();\n\n//Или в сухую позиционно\n\nvariable::get_lectern_page(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_lectern_page(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение блока           |","variable::get_light_level":"```justcode\nvariable::get_light_level\n```\n\n**Имя:** Получить уровень освещения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение уровня освещения на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_light_level(location(0,0,0,0,0), \"BLOCKS\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_light_level(\"BLOCKS\");\n\n//Или в сухую позиционно\n\nvariable::get_light_level(`variable`, location(0,0,0,0,0), \"BLOCKS\");\n\n//Или в сухую по ключам\n\nvariable::get_light_level(variable=`variable`, location=location(0,0,0,0,0), value_type=\"BLOCKS\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                           | **Описание**                           |\n| :----------- | :--------------------------- | :-------------------------------- |\n| `variable`        | Переменная                        | Переменная для присвоения              |\n| `location`        | Местоположение                    | Местоположение получения значения      |\n| `value_type`      | Маркер                            | Тип освещения                          |\n|                   | **BLOCKS** - Свет от блоков       |                                        |\n|                   | **SKY** - Свет от неба            |                                        |\n|                   | **TOTAL** - Полное освещение      |                                        |",".get_light_level":"```justcode\nvariable::get_light_level\n```\n\n**Имя:** Получить уровень освещения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение уровня освещения на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_light_level(location(0,0,0,0,0), \"BLOCKS\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_light_level(\"BLOCKS\");\n\n//Или в сухую позиционно\n\nvariable::get_light_level(`variable`, location(0,0,0,0,0), \"BLOCKS\");\n\n//Или в сухую по ключам\n\nvariable::get_light_level(variable=`variable`, location=location(0,0,0,0,0), value_type=\"BLOCKS\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                           | **Описание**                           |\n| :----------- | :--------------------------- | :-------------------------------- |\n| `variable`        | Переменная                        | Переменная для присвоения              |\n| `location`        | Местоположение                    | Местоположение получения значения      |\n| `value_type`      | Маркер                            | Тип освещения                          |\n|                   | **BLOCKS** - Свет от блоков       |                                        |\n|                   | **SKY** - Свет от неба            |                                        |\n|                   | **TOTAL** - Полное освещение      |                                        |","variable::get_list_index_of_value":"```justcode\nvariable::get_list_index_of_value\n```\n\n**Имя:** Получить индекс значения списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Выполняет поиск значения в списке и получает его индекс, если он найден. В случае неудачи возвращает -1.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_list_index_of_value(`list`, \"any value\", \"FIRST\");\n\n//Или от объекта\n\n`variable` = `list`.get_list_index_of_value(\"any value\", \"FIRST\");\n\n//Или в сухую позиционно\n\nvariable::get_list_index_of_value(`variable`, `list`, \"any value\", \"FIRST\");\n\n//Или в сухую по ключам\n\nvariable::get_list_index_of_value(variable=`variable`, list=`list`, value=\"any value\", search_mode=\"FIRST\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                             | **Описание**                   |\n| :------------ | :--------------------------------------------- | :------------------------ |\n| `variable`         | Переменная                                          | Переменная для присвоения      |\n| `list`             | Список                                              | Список                         |\n| `value`            | Любое значение                                      | Значение                       |\n| `search_mode`      | Маркер                                              | Режим поиска                   |\n|                    | **FIRST** - С начала (получить первый индекс)       |                                |\n|                    | **LAST** - С конца (получить последний индекс)      |                                |",".get_list_index_of_value":"```justcode\nvariable::get_list_index_of_value\n```\n\n**Имя:** Получить индекс значения списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Выполняет поиск значения в списке и получает его индекс, если он найден. В случае неудачи возвращает -1.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_list_index_of_value(`list`, \"any value\", \"FIRST\");\n\n//Или от объекта\n\n`variable` = `list`.get_list_index_of_value(\"any value\", \"FIRST\");\n\n//Или в сухую позиционно\n\nvariable::get_list_index_of_value(`variable`, `list`, \"any value\", \"FIRST\");\n\n//Или в сухую по ключам\n\nvariable::get_list_index_of_value(variable=`variable`, list=`list`, value=\"any value\", search_mode=\"FIRST\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                             | **Описание**                   |\n| :------------ | :--------------------------------------------- | :------------------------ |\n| `variable`         | Переменная                                          | Переменная для присвоения      |\n| `list`             | Список                                              | Список                         |\n| `value`            | Любое значение                                      | Значение                       |\n| `search_mode`      | Маркер                                              | Режим поиска                   |\n|                    | **FIRST** - С начала (получить первый индекс)       |                                |\n|                    | **LAST** - С конца (получить последний индекс)      |                                |","variable::get_list_length":"```justcode\nvariable::get_list_length\n```\n\n**Имя:** Получить размер списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает количество элементов, содержащихся в указанном списке.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_list_length(`list`);\n\n//Или от объекта\n\n`variable` = `list`.get_list_length();\n\n//Или в сухую позиционно\n\nvariable::get_list_length(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::get_list_length(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |",".get_list_length":"```justcode\nvariable::get_list_length\n```\n\n**Имя:** Получить размер списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает количество элементов, содержащихся в указанном списке.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_list_length(`list`);\n\n//Или от объекта\n\n`variable` = `list`.get_list_length();\n\n//Или в сухую позиционно\n\nvariable::get_list_length(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::get_list_length(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |","variable::get_list_random_value":"```justcode\nvariable::get_list_random_value\n```\n\n**Имя:** Получить случайное значение списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает случайное значение из списка.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_list_random_value(`list`);\n\n//Или от объекта\n\n`variable` = `list`.get_list_random_value();\n\n//Или в сухую позиционно\n\nvariable::get_list_random_value(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::get_list_random_value(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |",".get_list_random_value":"```justcode\nvariable::get_list_random_value\n```\n\n**Имя:** Получить случайное значение списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает случайное значение из списка.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_list_random_value(`list`);\n\n//Или от объекта\n\n`variable` = `list`.get_list_random_value();\n\n//Или в сухую позиционно\n\nvariable::get_list_random_value(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::get_list_random_value(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |","variable::get_list_value":"```justcode\nvariable::get_list_value\n```\n\n**Имя:** Получить значение из списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение из списка по указанному индексу.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_list_value(`list`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `list`.get_list_value(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_list_value(`variable`, `list`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_list_value(variable=`variable`, list=`list`, number=1, default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                   |\n| :-------------- | :------------- | :------------------------ |\n| `variable`           | Переменная          | Переменная для присвоения      |\n| `list`               | Список              | Список                         |\n| `number`             | Число               | Индекс                         |\n| `default_value`      | Любое значение      | Значение по умолчанию          |",".get_list_value":"```justcode\nvariable::get_list_value\n```\n\n**Имя:** Получить значение из списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение из списка по указанному индексу.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_list_value(`list`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `list`.get_list_value(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_list_value(`variable`, `list`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_list_value(variable=`variable`, list=`list`, number=1, default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                   |\n| :-------------- | :------------- | :------------------------ |\n| `variable`           | Переменная          | Переменная для присвоения      |\n| `list`               | Список              | Список                         |\n| `number`             | Число               | Индекс                         |\n| `default_value`      | Любое значение      | Значение по умолчанию          |","variable::get_list_variables":"```justcode\nvariable::get_list_variables\n```\n\n**Имя:** Получить имена переменных\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает список имён всех переменных и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_list_variables(\"GAME\");\n\n//Или в сухую позиционно\n\nvariable::get_list_variables(`variable`, \"GAME\");\n\n//Или в сухую по ключам\n\nvariable::get_list_variables(variable=`variable`, scope=\"GAME\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**                   |\n| :--------- | :--------------------- | :------------------------ |\n| `variable`      | Переменная                  | Переменная для присвоения      |\n| `scope`         | Маркер                      | Тип переменных                 |\n|                 | **GAME** - Игровые          |                                |\n|                 | **LOCAL** - Локальные       |                                |\n|                 | **SAVE** - Сохранённые      |                                |","variable::get_location_direction":"```justcode\nvariable::get_location_direction\n```\n\n**Имя:** Получить направление местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной направления местоположения.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_location_direction(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_location_direction();\n\n//Или в сухую позиционно\n\nvariable::get_location_direction(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_location_direction(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения         |\n| `location`      | Местоположение      | Местоположение для получения      |",".get_location_direction":"```justcode\nvariable::get_location_direction\n```\n\n**Имя:** Получить направление местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной направления местоположения.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_location_direction(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_location_direction();\n\n//Или в сухую позиционно\n\nvariable::get_location_direction(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_location_direction(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения         |\n| `location`      | Местоположение      | Местоположение для получения      |","variable::get_map_key_by_index":"```justcode\nvariable::get_map_key_by_index\n```\n\n**Имя:** Получить ключ словаря по индексу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает ключ по индексу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_key_by_index(`map`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `map`.get_map_key_by_index(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_map_key_by_index(`variable`, `map`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_map_key_by_index(variable=`variable`, map=`map`, index=1, default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                     |\n| :-------------- | :------------- | :-------------------------- |\n| `variable`           | Переменная          | Переменная для присвоения        |\n| `map`                | Словарь             | Словарь для получения ключа      |\n| `index`              | Число               | Индекс ключа                     |\n| `default_value`      | Любое значение      | Значение по умолчанию            |",".get_map_key_by_index":"```justcode\nvariable::get_map_key_by_index\n```\n\n**Имя:** Получить ключ словаря по индексу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает ключ по индексу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_key_by_index(`map`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `map`.get_map_key_by_index(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_map_key_by_index(`variable`, `map`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_map_key_by_index(variable=`variable`, map=`map`, index=1, default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                     |\n| :-------------- | :------------- | :-------------------------- |\n| `variable`           | Переменная          | Переменная для присвоения        |\n| `map`                | Словарь             | Словарь для получения ключа      |\n| `index`              | Число               | Индекс ключа                     |\n| `default_value`      | Любое значение      | Значение по умолчанию            |","variable::get_map_keys":"```justcode\nvariable::get_map_keys\n```\n\n**Имя:** Получить список ключей словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной список ключей словаря.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_keys(`map`);\n\n//Или от объекта\n\n`variable` = `map`.get_map_keys();\n\n//Или в сухую позиционно\n\nvariable::get_map_keys(`variable`, `map`);\n\n//Или в сухую по ключам\n\nvariable::get_map_keys(variable=`variable`, map=`map`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                        |\n| :--------- | :--------- | :----------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения           |\n| `map`           | Словарь         | Словарь для получения значения      |",".get_map_keys":"```justcode\nvariable::get_map_keys\n```\n\n**Имя:** Получить список ключей словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной список ключей словаря.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_keys(`map`);\n\n//Или от объекта\n\n`variable` = `map`.get_map_keys();\n\n//Или в сухую позиционно\n\nvariable::get_map_keys(`variable`, `map`);\n\n//Или в сухую по ключам\n\nvariable::get_map_keys(variable=`variable`, map=`map`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                        |\n| :--------- | :--------- | :----------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения           |\n| `map`           | Словарь         | Словарь для получения значения      |","variable::get_map_keys_by_value":"```justcode\nvariable::get_map_keys_by_value\n```\n\n**Имя:** Получить ключи словаря по значению\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает ключ либо список ключей словаря по значению и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_keys_by_value(`map`, \"any value\", \"any value\", \"ALL\");\n\n//Или от объекта\n\n`variable` = `map`.get_map_keys_by_value(\"any value\", \"any value\", \"ALL\");\n\n//Или в сухую позиционно\n\nvariable::get_map_keys_by_value(`variable`, `map`, \"any value\", \"any value\", \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::get_map_keys_by_value(variable=`variable`, map=`map`, value=\"any value\", default_value=\"any value\", find_mode=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                                           | **Описание**                   |\n| :-------------- | :------------------------------------------- | :------------------------ |\n| `variable`           | Переменная                                        | Переменная для присвоения      |\n| `map`                | Словарь                                           | Словарь                        |\n| `value`              | Любое значение                                    | Значение для получения         |\n| `default_value`      | Любое значение                                    | Значение по умолчанию          |\n| `find_mode`          | Маркер                                            | Режим поиска                   |\n|                      | **ALL** - Все (получает все ключи)                |                                |\n|                      | **FIRST** - С начала (получает первый ключ)       |                                |\n|                      | **LAST** - С конца (получает последний ключ)      |                                |",".get_map_keys_by_value":"```justcode\nvariable::get_map_keys_by_value\n```\n\n**Имя:** Получить ключи словаря по значению\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает ключ либо список ключей словаря по значению и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_keys_by_value(`map`, \"any value\", \"any value\", \"ALL\");\n\n//Или от объекта\n\n`variable` = `map`.get_map_keys_by_value(\"any value\", \"any value\", \"ALL\");\n\n//Или в сухую позиционно\n\nvariable::get_map_keys_by_value(`variable`, `map`, \"any value\", \"any value\", \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::get_map_keys_by_value(variable=`variable`, map=`map`, value=\"any value\", default_value=\"any value\", find_mode=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                                           | **Описание**                   |\n| :-------------- | :------------------------------------------- | :------------------------ |\n| `variable`           | Переменная                                        | Переменная для присвоения      |\n| `map`                | Словарь                                           | Словарь                        |\n| `value`              | Любое значение                                    | Значение для получения         |\n| `default_value`      | Любое значение                                    | Значение по умолчанию          |\n| `find_mode`          | Маркер                                            | Режим поиска                   |\n|                      | **ALL** - Все (получает все ключи)                |                                |\n|                      | **FIRST** - С начала (получает первый ключ)       |                                |\n|                      | **LAST** - С конца (получает последний ключ)      |                                |","variable::get_map_size":"```justcode\nvariable::get_map_size\n```\n\n**Имя:** Получить размер словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение размера словаря.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_size(`map`);\n\n//Или от объекта\n\n`variable` = `map`.get_map_size();\n\n//Или в сухую позиционно\n\nvariable::get_map_size(`variable`, `map`);\n\n//Или в сухую по ключам\n\nvariable::get_map_size(variable=`variable`, map=`map`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `map`           | Словарь         | Словарь                        |",".get_map_size":"```justcode\nvariable::get_map_size\n```\n\n**Имя:** Получить размер словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение размера словаря.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_size(`map`);\n\n//Или от объекта\n\n`variable` = `map`.get_map_size();\n\n//Или в сухую позиционно\n\nvariable::get_map_size(`variable`, `map`);\n\n//Или в сухую по ключам\n\nvariable::get_map_size(variable=`variable`, map=`map`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `map`           | Словарь         | Словарь                        |","variable::get_map_value":"```justcode\nvariable::get_map_value\n```\n\n**Имя:** Получить значение словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённое значение словаря по ключу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_value(`map`, \"any value\", \"any value\");\n\n//Или от объекта\n\n`variable` = `map`.get_map_value(\"any value\", \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_map_value(`variable`, `map`, \"any value\", \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_map_value(variable=`variable`, map=`map`, key=\"any value\", default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                   |\n| :-------------- | :------------- | :------------------------ |\n| `variable`           | Переменная          | Переменная для присвоения      |\n| `map`                | Словарь             | Словарь для изменения          |\n| `key`                | Любое значение      | Ключ                           |\n| `default_value`      | Любое значение      | Значение по умолчанию          |",".get_map_value":"```justcode\nvariable::get_map_value\n```\n\n**Имя:** Получить значение словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённое значение словаря по ключу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_value(`map`, \"any value\", \"any value\");\n\n//Или от объекта\n\n`variable` = `map`.get_map_value(\"any value\", \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_map_value(`variable`, `map`, \"any value\", \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_map_value(variable=`variable`, map=`map`, key=\"any value\", default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                   |\n| :-------------- | :------------- | :------------------------ |\n| `variable`           | Переменная          | Переменная для присвоения      |\n| `map`                | Словарь             | Словарь для изменения          |\n| `key`                | Любое значение      | Ключ                           |\n| `default_value`      | Любое значение      | Значение по умолчанию          |","variable::get_map_value_by_index":"```justcode\nvariable::get_map_value_by_index\n```\n\n**Имя:** Получить значение словаря по индексу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение по индексу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_value_by_index(`map`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `map`.get_map_value_by_index(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_map_value_by_index(`variable`, `map`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_map_value_by_index(variable=`variable`, map=`map`, index=1, default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                        |\n| :-------------- | :------------- | :----------------------------- |\n| `variable`           | Переменная          | Переменная для присвоения           |\n| `map`                | Словарь             | Словарь для получения значения      |\n| `index`              | Число               | Индекс значения                     |\n| `default_value`      | Любое значение      | Значение по умолчанию               |",".get_map_value_by_index":"```justcode\nvariable::get_map_value_by_index\n```\n\n**Имя:** Получить значение словаря по индексу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает значение по индексу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_value_by_index(`map`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `map`.get_map_value_by_index(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::get_map_value_by_index(`variable`, `map`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::get_map_value_by_index(variable=`variable`, map=`map`, index=1, default_value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                        |\n| :-------------- | :------------- | :----------------------------- |\n| `variable`           | Переменная          | Переменная для присвоения           |\n| `map`                | Словарь             | Словарь для получения значения      |\n| `index`              | Число               | Индекс значения                     |\n| `default_value`      | Любое значение      | Значение по умолчанию               |","variable::get_map_values":"```justcode\nvariable::get_map_values\n```\n\n**Имя:** Получить список значений словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной список значений словаря.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_values(`map`);\n\n//Или от объекта\n\n`variable` = `map`.get_map_values();\n\n//Или в сухую позиционно\n\nvariable::get_map_values(`variable`, `map`);\n\n//Или в сухую по ключам\n\nvariable::get_map_values(variable=`variable`, map=`map`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                        |\n| :--------- | :--------- | :----------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения           |\n| `map`           | Словарь         | Словарь для получения значения      |",".get_map_values":"```justcode\nvariable::get_map_values\n```\n\n**Имя:** Получить список значений словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной список значений словаря.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_map_values(`map`);\n\n//Или от объекта\n\n`variable` = `map`.get_map_values();\n\n//Или в сухую позиционно\n\nvariable::get_map_values(`variable`, `map`);\n\n//Или в сухую по ключам\n\nvariable::get_map_values(variable=`variable`, map=`map`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                        |\n| :--------- | :--------- | :----------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения           |\n| `map`           | Словарь         | Словарь для получения значения      |","variable::get_midpoint_between_vectors":"```justcode\nvariable::get_midpoint_between_vectors\n```\n\n**Имя:** Получить центральное значение между векторами\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной центральное значение между двумя векторами.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_midpoint_between_vectors(vector(0,0,0), vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::get_midpoint_between_vectors(`variable`, vector(0,0,0), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_midpoint_between_vectors(variable=`variable`, vector_1=vector(0,0,0), vector_2=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector_1`      | Вектор          | Первый вектор                  |\n| `vector_2`      | Вектор          | Второй вектор                  |","variable::get_particle_amount":"```justcode\nvariable::get_particle_amount\n```\n\n**Имя:** Получить количество частиц\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение количества частиц.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_amount(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_amount();\n\n//Или в сухую позиционно\n\nvariable::get_particle_amount(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_amount(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |",".get_particle_amount":"```justcode\nvariable::get_particle_amount\n```\n\n**Имя:** Получить количество частиц\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение количества частиц.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_amount(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_amount();\n\n//Или в сухую позиционно\n\nvariable::get_particle_amount(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_amount(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |","variable::get_particle_color":"```justcode\nvariable::get_particle_color\n```\n\n**Имя:** Получить цвет частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение цвета частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_color(particle(\"fire\"), \"COLOR\");\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_color(\"COLOR\");\n\n//Или в сухую позиционно\n\nvariable::get_particle_color(`variable`, particle(\"fire\"), \"COLOR\");\n\n//Или в сухую по ключам\n\nvariable::get_particle_color(variable=`variable`, particle=particle(\"fire\"), color_type=\"COLOR\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                           | **Описание**                        |\n| :----------- | :--------------------------- | :----------------------------- |\n| `variable`        | Переменная                        | Переменная для присвоения           |\n| `particle`        | Эффект частиц                     | Частица для получения значения      |\n| `color_type`      | Маркер                            | Тип цвета                           |\n|                   | **COLOR** - Обычный цвет          |                                     |\n|                   | **TO_COLOR** - Цвет перехода      |                                     |",".get_particle_color":"```justcode\nvariable::get_particle_color\n```\n\n**Имя:** Получить цвет частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение цвета частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_color(particle(\"fire\"), \"COLOR\");\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_color(\"COLOR\");\n\n//Или в сухую позиционно\n\nvariable::get_particle_color(`variable`, particle(\"fire\"), \"COLOR\");\n\n//Или в сухую по ключам\n\nvariable::get_particle_color(variable=`variable`, particle=particle(\"fire\"), color_type=\"COLOR\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                           | **Описание**                        |\n| :----------- | :--------------------------- | :----------------------------- |\n| `variable`        | Переменная                        | Переменная для присвоения           |\n| `particle`        | Эффект частиц                     | Частица для получения значения      |\n| `color_type`      | Маркер                            | Тип цвета                           |\n|                   | **COLOR** - Обычный цвет          |                                     |\n|                   | **TO_COLOR** - Цвет перехода      |                                     |","variable::get_particle_material":"```justcode\nvariable::get_particle_material\n```\n\n**Имя:** Получить материал частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение материала частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_material(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_material();\n\n//Или в сухую позиционно\n\nvariable::get_particle_material(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_material(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |",".get_particle_material":"```justcode\nvariable::get_particle_material\n```\n\n**Имя:** Получить материал частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение материала частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_material(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_material();\n\n//Или в сухую позиционно\n\nvariable::get_particle_material(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_material(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |","variable::get_particle_offset":"```justcode\nvariable::get_particle_offset\n```\n\n**Имя:** Получить движение частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение движения частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_offset(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_offset();\n\n//Или в сухую позиционно\n\nvariable::get_particle_offset(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_offset(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |",".get_particle_offset":"```justcode\nvariable::get_particle_offset\n```\n\n**Имя:** Получить движение частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение движения частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_offset(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_offset();\n\n//Или в сухую позиционно\n\nvariable::get_particle_offset(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_offset(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |","variable::get_particle_size":"```justcode\nvariable::get_particle_size\n```\n\n**Имя:** Получить размер частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение размера частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_size(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_size();\n\n//Или в сухую позиционно\n\nvariable::get_particle_size(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_size(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |",".get_particle_size":"```justcode\nvariable::get_particle_size\n```\n\n**Имя:** Получить размер частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение размера частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_size(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_size();\n\n//Или в сухую позиционно\n\nvariable::get_particle_size(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_size(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |","variable::get_particle_spread":"```justcode\nvariable::get_particle_spread\n```\n\n**Имя:** Получить разброс частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение разброса частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_spread(particle(\"fire\"), \"HORIZONTAL\");\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_spread(\"HORIZONTAL\");\n\n//Или в сухую позиционно\n\nvariable::get_particle_spread(`variable`, particle(\"fire\"), \"HORIZONTAL\");\n\n//Или в сухую по ключам\n\nvariable::get_particle_spread(variable=`variable`, particle=particle(\"fire\"), type=\"HORIZONTAL\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                              | **Описание**                        |\n| :--------- | :------------------------------ | :----------------------------- |\n| `variable`      | Переменная                           | Переменная для присвоения           |\n| `particle`      | Эффект частиц                        | Частица для получения значения      |\n| `type`          | Маркер                               | Плоскость разброса                  |\n|                 | **HORIZONTAL** - Горизонтальная      |                                     |\n|                 | **VERTICAL** - Вертикальная          |                                     |",".get_particle_spread":"```justcode\nvariable::get_particle_spread\n```\n\n**Имя:** Получить разброс частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение разброса частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_spread(particle(\"fire\"), \"HORIZONTAL\");\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_spread(\"HORIZONTAL\");\n\n//Или в сухую позиционно\n\nvariable::get_particle_spread(`variable`, particle(\"fire\"), \"HORIZONTAL\");\n\n//Или в сухую по ключам\n\nvariable::get_particle_spread(variable=`variable`, particle=particle(\"fire\"), type=\"HORIZONTAL\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                              | **Описание**                        |\n| :--------- | :------------------------------ | :----------------------------- |\n| `variable`      | Переменная                           | Переменная для присвоения           |\n| `particle`      | Эффект частиц                        | Частица для получения значения      |\n| `type`          | Маркер                               | Плоскость разброса                  |\n|                 | **HORIZONTAL** - Горизонтальная      |                                     |\n|                 | **VERTICAL** - Вертикальная          |                                     |","variable::get_particle_type":"```justcode\nvariable::get_particle_type\n```\n\n**Имя:** Получить тип частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение типа частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_type(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_type();\n\n//Или в сухую позиционно\n\nvariable::get_particle_type(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_type(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |",".get_particle_type":"```justcode\nvariable::get_particle_type\n```\n\n**Имя:** Получить тип частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение типа частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_particle_type(particle(\"fire\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").get_particle_type();\n\n//Или в сухую позиционно\n\nvariable::get_particle_type(`variable`, particle(\"fire\"));\n\n//Или в сухую по ключам\n\nvariable::get_particle_type(variable=`variable`, particle=particle(\"fire\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                        |\n| :--------- | :------------ | :----------------------------- |\n| `variable`      | Переменная         | Переменная для присвоения           |\n| `particle`      | Эффект частиц      | Частица для получения значения      |","variable::get_player_head":"```justcode\nvariable::get_player_head\n```\n\n**Имя:** Получить голову игрока\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает голову игрока в виде предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_player_head(\"name_or_uuid\", \"NAME_OR_UUID\");\n\n//Или в сухую позиционно\n\nvariable::get_player_head(`variable`, \"name_or_uuid\", \"NAME_OR_UUID\");\n\n//Или в сухую по ключам\n\nvariable::get_player_head(variable=`variable`, name_or_uuid=\"name_or_uuid\", receive_type=\"NAME_OR_UUID\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                     | **Описание**                   |\n| :------------- | :------------------------------------- | :------------------------ |\n| `variable`          | Переменная                                  | Переменная для присвоения      |\n| `name_or_uuid`      | Текст                                       | Значение                       |\n| `receive_type`      | Маркер                                      | Тип значения                   |\n|                     | **NAME_OR_UUID** - Имя или UUID игрока      |                                |\n|                     | **VALUE** - Параметр value скина            |                                |","variable::get_player_head_owner":"```justcode\nvariable::get_player_head_owner\n```\n\n**Имя:** Получить владельца головы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает имя или UUID владельца головы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_player_head_owner(item(\"stick\"), \"NAME\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_player_head_owner(\"NAME\");\n\n//Или в сухую позиционно\n\nvariable::get_player_head_owner(`variable`, item(\"stick\"), \"NAME\");\n\n//Или в сухую по ключам\n\nvariable::get_player_head_owner(variable=`variable`, head=item(\"stick\"), return_value=\"NAME\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                               | **Описание**                   |\n| :------------- | :------------------------------- | :------------------------ |\n| `variable`          | Переменная                            | Переменная для присвоения      |\n| `head`              | Предмет                               | Голова игрока                  |\n| `return_value`      | Маркер                                | Возвращаемое значение          |\n|                     | **NAME** - Имя владельца              |                                |\n|                     | **UUID** - UUID владельца             |                                |\n|                     | **VALUE** - Параметр value скина      |                                |",".get_player_head_owner":"```justcode\nvariable::get_player_head_owner\n```\n\n**Имя:** Получить владельца головы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает имя или UUID владельца головы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_player_head_owner(item(\"stick\"), \"NAME\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_player_head_owner(\"NAME\");\n\n//Или в сухую позиционно\n\nvariable::get_player_head_owner(`variable`, item(\"stick\"), \"NAME\");\n\n//Или в сухую по ключам\n\nvariable::get_player_head_owner(variable=`variable`, head=item(\"stick\"), return_value=\"NAME\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                               | **Описание**                   |\n| :------------- | :------------------------------- | :------------------------ |\n| `variable`          | Переменная                            | Переменная для присвоения      |\n| `head`              | Предмет                               | Голова игрока                  |\n| `return_value`      | Маркер                                | Возвращаемое значение          |\n|                     | **NAME** - Имя владельца              |                                |\n|                     | **UUID** - UUID владельца             |                                |\n|                     | **VALUE** - Параметр value скина      |                                |","variable::get_player_head_value":"```justcode\nvariable::get_player_head_value\n```\n\n**Имя:** Получить владельца головы на местоположении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает имя или UUID владельца головы на местоположении и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_player_head_value(location(0,0,0,0,0), \"NAME\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_player_head_value(\"NAME\");\n\n//Или в сухую позиционно\n\nvariable::get_player_head_value(`variable`, location(0,0,0,0,0), \"NAME\");\n\n//Или в сухую по ключам\n\nvariable::get_player_head_value(variable=`variable`, location=location(0,0,0,0,0), return_value=\"NAME\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                               | **Описание**                   |\n| :------------- | :------------------------------- | :------------------------ |\n| `variable`          | Переменная                            | Переменная для присвоения      |\n| `location`          | Местоположение                        | Местоположение головы          |\n| `return_value`      | Маркер                                | Возвращаемое значение          |\n|                     | **NAME** - Имя владельца              |                                |\n|                     | **UUID** - UUID владельца             |                                |\n|                     | **VALUE** - Параметр value скина      |                                |",".get_player_head_value":"```justcode\nvariable::get_player_head_value\n```\n\n**Имя:** Получить владельца головы на местоположении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает имя или UUID владельца головы на местоположении и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_player_head_value(location(0,0,0,0,0), \"NAME\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_player_head_value(\"NAME\");\n\n//Или в сухую позиционно\n\nvariable::get_player_head_value(`variable`, location(0,0,0,0,0), \"NAME\");\n\n//Или в сухую по ключам\n\nvariable::get_player_head_value(variable=`variable`, location=location(0,0,0,0,0), return_value=\"NAME\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                               | **Описание**                   |\n| :------------- | :------------------------------- | :------------------------ |\n| `variable`          | Переменная                            | Переменная для присвоения      |\n| `location`          | Местоположение                        | Местоположение головы          |\n| `return_value`      | Маркер                                | Возвращаемое значение          |\n|                     | **NAME** - Имя владельца              |                                |\n|                     | **UUID** - UUID владельца             |                                |\n|                     | **VALUE** - Параметр value скина      |                                |","variable::get_potion_effect_amplifier":"```justcode\nvariable::get_potion_effect_amplifier\n```\n\n**Имя:** Получить силу зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение силы зелья.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_potion_effect_amplifier(potion(\"slow_falling\"));\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").get_potion_effect_amplifier();\n\n//Или в сухую позиционно\n\nvariable::get_potion_effect_amplifier(`variable`, potion(\"slow_falling\"));\n\n//Или в сухую по ключам\n\nvariable::get_potion_effect_amplifier(variable=`variable`, potion=potion(\"slow_falling\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `potion`        | Зелье           | Зелье                          |",".get_potion_effect_amplifier":"```justcode\nvariable::get_potion_effect_amplifier\n```\n\n**Имя:** Получить силу зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение силы зелья.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_potion_effect_amplifier(potion(\"slow_falling\"));\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").get_potion_effect_amplifier();\n\n//Или в сухую позиционно\n\nvariable::get_potion_effect_amplifier(`variable`, potion(\"slow_falling\"));\n\n//Или в сухую по ключам\n\nvariable::get_potion_effect_amplifier(variable=`variable`, potion=potion(\"slow_falling\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `potion`        | Зелье           | Зелье                          |","variable::get_potion_effect_duration":"```justcode\nvariable::get_potion_effect_duration\n```\n\n**Имя:** Получить длительность зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение длительности зелья.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_potion_effect_duration(potion(\"slow_falling\"));\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").get_potion_effect_duration();\n\n//Или в сухую позиционно\n\nvariable::get_potion_effect_duration(`variable`, potion(\"slow_falling\"));\n\n//Или в сухую по ключам\n\nvariable::get_potion_effect_duration(variable=`variable`, potion=potion(\"slow_falling\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `potion`        | Зелье           | Зелье                          |",".get_potion_effect_duration":"```justcode\nvariable::get_potion_effect_duration\n```\n\n**Имя:** Получить длительность зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение длительности зелья.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_potion_effect_duration(potion(\"slow_falling\"));\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").get_potion_effect_duration();\n\n//Или в сухую позиционно\n\nvariable::get_potion_effect_duration(`variable`, potion(\"slow_falling\"));\n\n//Или в сухую по ключам\n\nvariable::get_potion_effect_duration(variable=`variable`, potion=potion(\"slow_falling\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `potion`        | Зелье           | Зелье                          |","variable::get_potion_effect_type":"```justcode\nvariable::get_potion_effect_type\n```\n\n**Имя:** Получить тип зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение типа зелья.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_potion_effect_type(potion(\"slow_falling\"));\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").get_potion_effect_type();\n\n//Или в сухую позиционно\n\nvariable::get_potion_effect_type(`variable`, potion(\"slow_falling\"));\n\n//Или в сухую по ключам\n\nvariable::get_potion_effect_type(variable=`variable`, potion=potion(\"slow_falling\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `potion`        | Зелье           | Зелье                          |",".get_potion_effect_type":"```justcode\nvariable::get_potion_effect_type\n```\n\n**Имя:** Получить тип зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение типа зелья.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_potion_effect_type(potion(\"slow_falling\"));\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").get_potion_effect_type();\n\n//Или в сухую позиционно\n\nvariable::get_potion_effect_type(`variable`, potion(\"slow_falling\"));\n\n//Или в сухую по ключам\n\nvariable::get_potion_effect_type(variable=`variable`, potion=potion(\"slow_falling\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `potion`        | Зелье           | Зелье                          |","variable::get_sculk_shrieker_warning_level":"```justcode\nvariable::get_sculk_shrieker_warning_level\n```\n\n**Имя:** Получить уровень опасности скалк-крикуна\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной уровень опасности скалк-крикуна на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sculk_shrieker_warning_level(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_sculk_shrieker_warning_level();\n\n//Или в сухую позиционно\n\nvariable::get_sculk_shrieker_warning_level(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_sculk_shrieker_warning_level(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения         |\n| `location`      | Местоположение      | Местоположение скалк-крикуна      |",".get_sculk_shrieker_warning_level":"```justcode\nvariable::get_sculk_shrieker_warning_level\n```\n\n**Имя:** Получить уровень опасности скалк-крикуна\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной уровень опасности скалк-крикуна на указанном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sculk_shrieker_warning_level(location(0,0,0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_sculk_shrieker_warning_level();\n\n//Или в сухую позиционно\n\nvariable::get_sculk_shrieker_warning_level(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_sculk_shrieker_warning_level(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения         |\n| `location`      | Местоположение      | Местоположение скалк-крикуна      |","variable::get_sign_text":"```justcode\nvariable::get_sign_text\n```\n\n**Имя:** Получить текст строки таблички\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение текста строки таблички на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sign_text(location(0,0,0,0,0), \"ALL\", \"ALL\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_sign_text(\"ALL\", \"ALL\");\n\n//Или в сухую позиционно\n\nvariable::get_sign_text(`variable`, location(0,0,0,0,0), \"ALL\", \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::get_sign_text(variable=`variable`, location=location(0,0,0,0,0), check_side=\"ALL\", sign_line=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                            | **Описание**                   |\n| :----------- | :---------------------------- | :------------------------ |\n| `variable`        | Переменная                         | Переменная для присвоения      |\n| `location`        | Местоположение                     | Местоположение таблички        |\n| `check_side`      | Маркер                             | Сторона таблички               |\n|                   | **ALL** - Все                      |                                |\n|                   | **BACK** - Задняя                  |                                |\n|                   | **FRONT** - Передняя               |                                |\n| `sign_line`       | Маркер                             | Номер строки                   |\n|                   | **ALL** - Все строки               |                                |\n|                   | **FIRST** - Первая строка          |                                |\n|                   | **FOURTH** - Четвёртая строка      |                                |\n|                   | **SECOND** - Вторая строка         |                                |\n|                   | **THIRD** - Третья строка          |                                |",".get_sign_text":"```justcode\nvariable::get_sign_text\n```\n\n**Имя:** Получить текст строки таблички\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение текста строки таблички на выбранном местоположении.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sign_text(location(0,0,0,0,0), \"ALL\", \"ALL\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).get_sign_text(\"ALL\", \"ALL\");\n\n//Или в сухую позиционно\n\nvariable::get_sign_text(`variable`, location(0,0,0,0,0), \"ALL\", \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::get_sign_text(variable=`variable`, location=location(0,0,0,0,0), check_side=\"ALL\", sign_line=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                            | **Описание**                   |\n| :----------- | :---------------------------- | :------------------------ |\n| `variable`        | Переменная                         | Переменная для присвоения      |\n| `location`        | Местоположение                     | Местоположение таблички        |\n| `check_side`      | Маркер                             | Сторона таблички               |\n|                   | **ALL** - Все                      |                                |\n|                   | **BACK** - Задняя                  |                                |\n|                   | **FRONT** - Передняя               |                                |\n| `sign_line`       | Маркер                             | Номер строки                   |\n|                   | **ALL** - Все строки               |                                |\n|                   | **FIRST** - Первая строка          |                                |\n|                   | **FOURTH** - Четвёртая строка      |                                |\n|                   | **SECOND** - Вторая строка         |                                |\n|                   | **THIRD** - Третья строка          |                                |","variable::get_sound_pitch":"```justcode\nvariable::get_sound_pitch\n```\n\n**Имя:** Получить высоту звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение высоты звука.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_pitch(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_pitch();\n\n//Или в сухую позиционно\n\nvariable::get_sound_pitch(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_pitch(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |",".get_sound_pitch":"```justcode\nvariable::get_sound_pitch\n```\n\n**Имя:** Получить высоту звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение высоты звука.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_pitch(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_pitch();\n\n//Или в сухую позиционно\n\nvariable::get_sound_pitch(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_pitch(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |","variable::get_sound_source":"```justcode\nvariable::get_sound_source\n```\n\n**Имя:** Получить источник звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает источник звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_source(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_source();\n\n//Или в сухую позиционно\n\nvariable::get_sound_source(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_source(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |",".get_sound_source":"```justcode\nvariable::get_sound_source\n```\n\n**Имя:** Получить источник звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает источник звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_source(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_source();\n\n//Или в сухую позиционно\n\nvariable::get_sound_source(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_source(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |","variable::get_sound_type":"```justcode\nvariable::get_sound_type\n```\n\n**Имя:** Получить тип звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение типа звука.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_type(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_type();\n\n//Или в сухую позиционно\n\nvariable::get_sound_type(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_type(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |",".get_sound_type":"```justcode\nvariable::get_sound_type\n```\n\n**Имя:** Получить тип звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение типа звука.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_type(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_type();\n\n//Или в сухую позиционно\n\nvariable::get_sound_type(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_type(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |","variable::get_sound_variation":"```justcode\nvariable::get_sound_variation\n```\n\n**Имя:** Получить вариацию звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает вариацию звука и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Возвращает пустой текст, если используется случайный сид.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_variation(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_variation();\n\n//Или в сухую позиционно\n\nvariable::get_sound_variation(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_variation(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |",".get_sound_variation":"```justcode\nvariable::get_sound_variation\n```\n\n**Имя:** Получить вариацию звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает вариацию звука и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Возвращает пустой текст, если используется случайный сид.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_variation(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_variation();\n\n//Или в сухую позиционно\n\nvariable::get_sound_variation(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_variation(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |","variable::get_sound_variations":"```justcode\nvariable::get_sound_variations\n```\n\n**Имя:** Получить вариации звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает список всех вариаций звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_variations(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_variations();\n\n//Или в сухую позиционно\n\nvariable::get_sound_variations(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_variations(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значений      |",".get_sound_variations":"```justcode\nvariable::get_sound_variations\n```\n\n**Имя:** Получить вариации звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает список всех вариаций звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_variations(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_variations();\n\n//Или в сухую позиционно\n\nvariable::get_sound_variations(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_variations(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значений      |","variable::get_sound_volume_action":"```justcode\nvariable::get_sound_volume_action\n```\n\n**Имя:** Получить громкость звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение громкости звука.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_volume_action(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_volume_action();\n\n//Или в сухую позиционно\n\nvariable::get_sound_volume_action(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_volume_action(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |",".get_sound_volume_action":"```justcode\nvariable::get_sound_volume_action\n```\n\n**Имя:** Получить громкость звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение громкости звука.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_sound_volume_action(sound(\"entity.zombie.hurt\"));\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").get_sound_volume_action();\n\n//Или в сухую позиционно\n\nvariable::get_sound_volume_action(`variable`, sound(\"entity.zombie.hurt\"));\n\n//Или в сухую по ключам\n\nvariable::get_sound_volume_action(variable=`variable`, sound=sound(\"entity.zombie.hurt\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `sound`         | Звук            | Звук для получения значения      |","variable::get_template_code":"```justcode\nvariable::get_template_code\n```\n\n**Имя:** Получить код из шаблона\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной код из шаблона.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_template_code(item(\"stick\"), \"MAP\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_template_code(\"MAP\");\n\n//Или в сухую позиционно\n\nvariable::get_template_code(`variable`, item(\"stick\"), \"MAP\");\n\n//Или в сухую по ключам\n\nvariable::get_template_code(variable=`variable`, template=item(\"stick\"), return_type=\"MAP\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                     | **Описание**                   |\n| :------------ | :--------------------- | :------------------------ |\n| `variable`         | Переменная                  | Переменная для присвоения      |\n| `template`         | Предмет                     | Шаблон                         |\n| `return_type`      | Маркер                      | Возвращаемое значение          |\n|                    | **MAP** - Словарь JSON      |                                |\n|                    | **TEXT** - Текст JSON       |                                |",".get_template_code":"```justcode\nvariable::get_template_code\n```\n\n**Имя:** Получить код из шаблона\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной код из шаблона.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_template_code(item(\"stick\"), \"MAP\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").get_template_code(\"MAP\");\n\n//Или в сухую позиционно\n\nvariable::get_template_code(`variable`, item(\"stick\"), \"MAP\");\n\n//Или в сухую по ключам\n\nvariable::get_template_code(variable=`variable`, template=item(\"stick\"), return_type=\"MAP\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                     | **Описание**                   |\n| :------------ | :--------------------- | :------------------------ |\n| `variable`         | Переменная                  | Переменная для присвоения      |\n| `template`         | Предмет                     | Шаблон                         |\n| `return_type`      | Маркер                      | Возвращаемое значение          |\n|                    | **MAP** - Словарь JSON      |                                |\n|                    | **TEXT** - Текст JSON       |                                |","variable::get_text_width":"```justcode\nvariable::get_text_width\n```\n\n**Имя:** Получить ширину текста в пикселях\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает размер каждого символа в тексте, суммирует их и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Значения могут быть не актуальными, если используется ресурспак со своими символами.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_text_width(\"text\");\n\n//Или от объекта\n\n`variable` = \"text\".get_text_width();\n\n//Или в сухую позиционно\n\nvariable::get_text_width(`variable`, \"text\");\n\n//Или в сухую по ключам\n\nvariable::get_text_width(variable=`variable`, text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Исходный текст                 |",".get_text_width":"```justcode\nvariable::get_text_width\n```\n\n**Имя:** Получить ширину текста в пикселях\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает размер каждого символа в тексте, суммирует их и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Значения могут быть не актуальными, если используется ресурспак со своими символами.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_text_width(\"text\");\n\n//Или от объекта\n\n`variable` = \"text\".get_text_width();\n\n//Или в сухую позиционно\n\nvariable::get_text_width(`variable`, \"text\");\n\n//Или в сухую по ключам\n\nvariable::get_text_width(variable=`variable`, text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Исходный текст                 |","variable::get_vault_displayed_item":"```justcode\nvariable::get_vault_displayed_item\n```\n\n**Имя:** Получить отображаемый предмет сокровищницы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает отображаемый предмет сокровищницы и присваивает его к переменной.\n**Работает с:**\\\n&nbsp;&nbsp;Сокровищницами\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_vault_displayed_item(location(0,0,0,0,0));\n\n//Или в сухую позиционно\n\nvariable::get_vault_displayed_item(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_vault_displayed_item(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                     |\n| :--------- | :------------- | :-------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения        |\n| `location`      | Местоположение      | Местоположение сокровищницы      |","variable::get_vault_next_state_update_time":"```justcode\nvariable::get_vault_next_state_update_time\n```\n\n**Имя:** Получить время следующего обновления состояния сокровищницы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает время следующего обновления состояния сокровищницы и присваивает его к переменной.\n**Работает с:**\\\n&nbsp;&nbsp;Сокровищницами\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_vault_next_state_update_time(location(0,0,0,0,0));\n\n//Или в сухую позиционно\n\nvariable::get_vault_next_state_update_time(`variable`, location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_vault_next_state_update_time(variable=`variable`, location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                     |\n| :--------- | :------------- | :-------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения        |\n| `location`      | Местоположение      | Местоположение сокровищницы      |","variable::get_vector_all_components":"```justcode\nvariable::get_vector_all_components\n```\n\n**Имя:** Получить все координаты вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает все координаты вектора и присваивает результат к переменным.\n\n**Пример использования:** \n```justcode\n`x`, `y`, `z` = variable::get_vector_all_components(vector(0,0,0));\n\n//Или от объекта\n\n`x`, `y`, `z` = vector(0,0,0).get_vector_all_components();\n\n//Или в сухую позиционно\n\nvariable::get_vector_all_components(`x`, `y`, `z`, vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_vector_all_components(x=`x`, y=`y`, z=`z`, vector=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**         | **Описание**                       |\n| :------- | :--------- | :---------------------------- |\n| `x`           | Переменная      | Координата X                       |\n| `y`           | Переменная      | Координата Y                       |\n| `z`           | Переменная      | Координата Z                       |\n| `vector`      | Вектор          | Вектор для получения значений      |",".get_vector_all_components":"```justcode\nvariable::get_vector_all_components\n```\n\n**Имя:** Получить все координаты вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает все координаты вектора и присваивает результат к переменным.\n\n**Пример использования:** \n```justcode\n`x`, `y`, `z` = variable::get_vector_all_components(vector(0,0,0));\n\n//Или от объекта\n\n`x`, `y`, `z` = vector(0,0,0).get_vector_all_components();\n\n//Или в сухую позиционно\n\nvariable::get_vector_all_components(`x`, `y`, `z`, vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_vector_all_components(x=`x`, y=`y`, z=`z`, vector=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**       | **Тип**         | **Описание**                       |\n| :------- | :--------- | :---------------------------- |\n| `x`           | Переменная      | Координата X                       |\n| `y`           | Переменная      | Координата Y                       |\n| `z`           | Переменная      | Координата Z                       |\n| `vector`      | Вектор          | Вектор для получения значений      |","variable::get_vector_between_locations":"```justcode\nvariable::get_vector_between_locations\n```\n\n**Имя:** Создать вектор между местоположениями\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт вектор между начальным и конечным местоположениями и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_vector_between_locations(location(0,0,0,0,0), location(0,0,0,0,0));\n\n//Или в сухую позиционно\n\nvariable::get_vector_between_locations(`variable`, location(0,0,0,0,0), location(0,0,0,0,0));\n\n//Или в сухую по ключам\n\nvariable::get_vector_between_locations(variable=`variable`, end_location=location(0,0,0,0,0), start_location=location(0,0,0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**             | **Описание**                   |\n| :--------------- | :------------- | :------------------------ |\n| `variable`            | Переменная          | Переменная для присвоения      |\n| `end_location`        | Местоположение      | Начальное местоположение       |\n| `start_location`      | Местоположение      | Конечное местоположение        |","variable::get_vector_component":"```justcode\nvariable::get_vector_component\n```\n\n**Имя:** Получить координату вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённую координату вектора и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_vector_component(vector(0,0,0), \"X\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).get_vector_component(\"X\");\n\n//Или в сухую позиционно\n\nvariable::get_vector_component(`variable`, vector(0,0,0), \"X\");\n\n//Или в сухую по ключам\n\nvariable::get_vector_component(variable=`variable`, vector=vector(0,0,0), vector_component=\"X\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                   | **Описание**                       |\n| :----------------- | :------------------- | :---------------------------- |\n| `variable`              | Переменная                | Переменная для присвоения          |\n| `vector`                | Вектор                    | Вектор для получения значения      |\n| `vector_component`      | Маркер                    | Тип координаты                     |\n|                         | **X** - Координата X      |                                    |\n|                         | **Y** - Координата Y      |                                    |\n|                         | **Z** - Координата Z      |                                    |",".get_vector_component":"```justcode\nvariable::get_vector_component\n```\n\n**Имя:** Получить координату вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённую координату вектора и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_vector_component(vector(0,0,0), \"X\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).get_vector_component(\"X\");\n\n//Или в сухую позиционно\n\nvariable::get_vector_component(`variable`, vector(0,0,0), \"X\");\n\n//Или в сухую по ключам\n\nvariable::get_vector_component(variable=`variable`, vector=vector(0,0,0), vector_component=\"X\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                   | **Описание**                       |\n| :----------------- | :------------------- | :---------------------------- |\n| `variable`              | Переменная                | Переменная для присвоения          |\n| `vector`                | Вектор                    | Вектор для получения значения      |\n| `vector_component`      | Маркер                    | Тип координаты                     |\n|                         | **X** - Координата X      |                                    |\n|                         | **Y** - Координата Y      |                                    |\n|                         | **Z** - Координата Z      |                                    |","variable::get_vector_from_block_face":"```justcode\nvariable::get_vector_from_block_face\n```\n\n**Имя:** Создать вектор из кардинального направления\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт нормализированный вектор в зависимости от указанного кардинального направления (\\\"south\\\", \\\"north\\\", \\\"east\\\", \\\"west\\\", \\\"up\\\", \\\"down\\\").\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_vector_from_block_face(\"block_face\");\n\n//Или в сухую позиционно\n\nvariable::get_vector_from_block_face(`variable`, \"block_face\");\n\n//Или в сухую по ключам\n\nvariable::get_vector_from_block_face(variable=`variable`, block_face=\"block_face\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**         | **Описание**                   |\n| :----------- | :--------- | :------------------------ |\n| `variable`        | Переменная      | Переменная для присвоения      |\n| `block_face`      | Текст           | Кардинальное направление       |","variable::get_vector_length":"```justcode\nvariable::get_vector_length\n```\n\n**Имя:** Получить длину вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение длины вектора.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_vector_length(vector(0,0,0), \"LENGTH\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).get_vector_length(\"LENGTH\");\n\n//Или в сухую позиционно\n\nvariable::get_vector_length(`variable`, vector(0,0,0), \"LENGTH\");\n\n//Или в сухую по ключам\n\nvariable::get_vector_length(variable=`variable`, vector=vector(0,0,0), length_type=\"LENGTH\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                    | **Описание**                    |\n| :------------ | :------------------------------------ | :------------------------- |\n| `variable`         | Переменная                                 | Переменная для присвоения       |\n| `vector`           | Вектор                                     | Вектор для получения длины      |\n| `length_type`      | Маркер                                     | Тип значения                    |\n|                    | **LENGTH** - Реальная длина                |                                 |\n|                    | **LENGTH_SQUARED** - Длина в квадрате      |                                 |",".get_vector_length":"```justcode\nvariable::get_vector_length\n```\n\n**Имя:** Получить длину вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение длины вектора.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_vector_length(vector(0,0,0), \"LENGTH\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).get_vector_length(\"LENGTH\");\n\n//Или в сухую позиционно\n\nvariable::get_vector_length(`variable`, vector(0,0,0), \"LENGTH\");\n\n//Или в сухую по ключам\n\nvariable::get_vector_length(variable=`variable`, vector=vector(0,0,0), length_type=\"LENGTH\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                    | **Описание**                    |\n| :------------ | :------------------------------------ | :------------------------- |\n| `variable`         | Переменная                                 | Переменная для присвоения       |\n| `vector`           | Вектор                                     | Вектор для получения длины      |\n| `length_type`      | Маркер                                     | Тип значения                    |\n|                    | **LENGTH** - Реальная длина                |                                 |\n|                    | **LENGTH_SQUARED** - Длина в квадрате      |                                 |","variable::hadamard_vector_product":"```justcode\nvariable::hadamard_vector_product\n```\n\n**Имя:** Адамарово произведение векторов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной адамарово произведение двух векторов.\n\n**Пример использования:** \n```justcode\n`variable` = variable::hadamard_vector_product(vector(0,0,0), vector(0,0,0));\n\n//Или от объекта\n\n`variable` = vector(0,0,0).hadamard_vector_product(vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::hadamard_vector_product(`variable`, vector(0,0,0), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::hadamard_vector_product(variable=`variable`, vector_1=vector(0,0,0), vector_2=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector_1`      | Вектор          | Первый вектор                  |\n| `vector_2`      | Вектор          | Второй вектор                  |",".hadamard_vector_product":"```justcode\nvariable::hadamard_vector_product\n```\n\n**Имя:** Адамарово произведение векторов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной адамарово произведение двух векторов.\n\n**Пример использования:** \n```justcode\n`variable` = variable::hadamard_vector_product(vector(0,0,0), vector(0,0,0));\n\n//Или от объекта\n\n`variable` = vector(0,0,0).hadamard_vector_product(vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::hadamard_vector_product(`variable`, vector(0,0,0), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::hadamard_vector_product(variable=`variable`, vector_1=vector(0,0,0), vector_2=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector_1`      | Вектор          | Первый вектор                  |\n| `vector_2`      | Вектор          | Второй вектор                  |","variable::get_text_hash":"```justcode\nvariable::get_text_hash\n```\n\n**Имя:** Получить хеш текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение хеша текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_text_hash(\"text\", \"MD5\");\n\n//Или от объекта\n\n`variable` = \"text\".get_text_hash(\"MD5\");\n\n//Или в сухую позиционно\n\nvariable::get_text_hash(`variable`, \"text\", \"MD5\");\n\n//Или в сухую по ключам\n\nvariable::get_text_hash(variable=`variable`, text=\"text\", algorithm=\"MD5\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                   | **Описание**                   |\n| :---------- | :------------------- | :------------------------ |\n| `variable`       | Переменная                | Переменная для присвоения      |\n| `text`           | Текст                     | Исходный текст                 |\n| `algorithm`      | Маркер                    | Aлгоритм                       |\n|                  | **MD5** - MD5             |                                |\n|                  | **SHA1** - SHA-1          |                                |\n|                  | **SHA256** - SHA-256      |                                |",".get_text_hash":"```justcode\nvariable::get_text_hash\n```\n\n**Имя:** Получить хеш текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение хеша текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_text_hash(\"text\", \"MD5\");\n\n//Или от объекта\n\n`variable` = \"text\".get_text_hash(\"MD5\");\n\n//Или в сухую позиционно\n\nvariable::get_text_hash(`variable`, \"text\", \"MD5\");\n\n//Или в сухую по ключам\n\nvariable::get_text_hash(variable=`variable`, text=\"text\", algorithm=\"MD5\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                   | **Описание**                   |\n| :---------- | :------------------- | :------------------------ |\n| `variable`       | Переменная                | Переменная для присвоения      |\n| `text`           | Текст                     | Исходный текст                 |\n| `algorithm`      | Маркер                    | Aлгоритм                       |\n|                  | **MD5** - MD5             |                                |\n|                  | **SHA1** - SHA-1          |                                |\n|                  | **SHA256** - SHA-256      |                                |","variable::hide_item_components":"```justcode\nvariable::hide_item_components\n```\n\n**Имя:** Скрыть компоненты предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Скрывает указанные компоненты предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::hide_item_components(item(\"stick\"), [\"components\", \"components\"], \"SET\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").hide_item_components([\"components\", \"components\"], \"SET\");\n\n//Или в сухую позиционно\n\nvariable::hide_item_components(`variable`, item(\"stick\"), [\"components\", \"components\"], \"SET\");\n\n//Или в сухую по ключам\n\nvariable::hide_item_components(variable=`variable`, item=item(\"stick\"), components=[\"components\", \"components\"], mode=\"SET\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**                   |\n| :----------- | :-------------------- | :------------------------ |\n| `variable`        | Переменная                 | Переменная для присвоения      |\n| `item`            | Предмет                    | Предмет                        |\n| `components`      | список[Текст]              | Ключи компонентов              |\n| `mode`            | Маркер                     | Режим установки                |\n|                   | **SET** - Установка        |                                |\n|                   | **ADD** - Добавление       |                                |\n|                   | **REMOVE** - Удаление      |                                |",".hide_item_components":"```justcode\nvariable::hide_item_components\n```\n\n**Имя:** Скрыть компоненты предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Скрывает указанные компоненты предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::hide_item_components(item(\"stick\"), [\"components\", \"components\"], \"SET\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").hide_item_components([\"components\", \"components\"], \"SET\");\n\n//Или в сухую позиционно\n\nvariable::hide_item_components(`variable`, item(\"stick\"), [\"components\", \"components\"], \"SET\");\n\n//Или в сухую по ключам\n\nvariable::hide_item_components(variable=`variable`, item=item(\"stick\"), components=[\"components\", \"components\"], mode=\"SET\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**                   |\n| :----------- | :-------------------- | :------------------------ |\n| `variable`        | Переменная                 | Переменная для присвоения      |\n| `item`            | Предмет                    | Предмет                        |\n| `components`      | список[Текст]              | Ключи компонентов              |\n| `mode`            | Маркер                     | Режим установки                |\n|                   | **SET** - Установка        |                                |\n|                   | **ADD** - Добавление       |                                |\n|                   | **REMOVE** - Удаление      |                                |","variable::increment":"```justcode\nvariable::increment\n```\n\n**Имя:** Прибавление (+=)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Прибавляет к переменной выбранное число.\n\n**Пример использования:** \n```justcode\n`variable` = variable::increment(1);\n\n//Или от объекта\n\n`variable`.increment(1);\n\n//Или в сухую позиционно\n\nvariable::increment(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::increment(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число для прибавления          |",".increment":"```justcode\nvariable::increment\n```\n\n**Имя:** Прибавление (+=)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Прибавляет к переменной выбранное число.\n\n**Пример использования:** \n```justcode\n`variable` = variable::increment(1);\n\n//Или от объекта\n\n`variable`.increment(1);\n\n//Или в сухую позиционно\n\nvariable::increment(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::increment(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число для прибавления          |","variable::insert_list_value":"```justcode\nvariable::insert_list_value\n```\n\n**Имя:** Вставить значение в список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Вставляет значение в список по указанному индексу, сдвигая все значения в нём после него вправо.\n\n**Пример использования:** \n```justcode\n`variable` = variable::insert_list_value(`list`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `list`.insert_list_value(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::insert_list_value(`variable`, `list`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::insert_list_value(variable=`variable`, list=`list`, number=1, value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `list`          | Список              | Список                         |\n| `number`        | Число               | Индекс                         |\n| `value`         | Любое значение      | Значение                       |",".insert_list_value":"```justcode\nvariable::insert_list_value\n```\n\n**Имя:** Вставить значение в список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Вставляет значение в список по указанному индексу, сдвигая все значения в нём после него вправо.\n\n**Пример использования:** \n```justcode\n`variable` = variable::insert_list_value(`list`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `list`.insert_list_value(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::insert_list_value(`variable`, `list`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::insert_list_value(variable=`variable`, list=`list`, number=1, value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `list`          | Список              | Список                         |\n| `number`        | Число               | Индекс                         |\n| `value`         | Любое значение      | Значение                       |","variable::join_text":"```justcode\nvariable::join_text\n```\n\n**Имя:** Объединить список в текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Объединяет элементы списка в единый текст и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::join_text(`list`, \"separator\", \"prefix\", \"postfix\", 1, \"truncated\");\n\n//Или от объекта\n\n`variable` = `list`.join_text(\"separator\", \"prefix\", \"postfix\", 1, \"truncated\");\n\n//Или в сухую позиционно\n\nvariable::join_text(`variable`, `list`, \"separator\", \"prefix\", \"postfix\", 1, \"truncated\");\n\n//Или в сухую по ключам\n\nvariable::join_text(variable=`variable`, list=`list`, separator=\"separator\", prefix=\"prefix\", postfix=\"postfix\", limit=1, truncated=\"truncated\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                                       |\n| :---------- | :--------- | :-------------------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                          |\n| `list`           | Список          | Список для объединения                             |\n| `separator`      | Текст           | Разделитель                                        |\n| `prefix`         | Текст           | Префикс                                            |\n| `postfix`        | Текст           | Постфикс                                           |\n| `limit`          | Число           | Лимит элементов (если пусто, то все элементы)      |\n| `truncated`      | Текст           | Текст после лимита (по умолчанию - \"...\")          |",".join_text":"```justcode\nvariable::join_text\n```\n\n**Имя:** Объединить список в текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Объединяет элементы списка в единый текст и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::join_text(`list`, \"separator\", \"prefix\", \"postfix\", 1, \"truncated\");\n\n//Или от объекта\n\n`variable` = `list`.join_text(\"separator\", \"prefix\", \"postfix\", 1, \"truncated\");\n\n//Или в сухую позиционно\n\nvariable::join_text(`variable`, `list`, \"separator\", \"prefix\", \"postfix\", 1, \"truncated\");\n\n//Или в сухую по ключам\n\nvariable::join_text(variable=`variable`, list=`list`, separator=\"separator\", prefix=\"prefix\", postfix=\"postfix\", limit=1, truncated=\"truncated\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                                       |\n| :---------- | :--------- | :-------------------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                          |\n| `list`           | Список          | Список для объединения                             |\n| `separator`      | Текст           | Разделитель                                        |\n| `prefix`         | Текст           | Префикс                                            |\n| `postfix`        | Текст           | Постфикс                                           |\n| `limit`          | Число           | Лимит элементов (если пусто, то все элементы)      |\n| `truncated`      | Текст           | Текст после лимита (по умолчанию - \"...\")          |","variable::lerp_number":"```justcode\nvariable::lerp_number\n```\n\n**Имя:** Интерполировать число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Вычисляет число между двумя числами с определённым коэффициентом и присваивает результат к переменной. При коэффициенте 0 будет возвращено первое число, при 1 - второе, при 0.5 - среднее значение.\n\n**Пример использования:** \n```justcode\n`variable` = variable::lerp_number(1, 2, 3);\n\n//Или от объекта\n\n`variable` = (3).lerp_number(1, 2);\n\n//Или в сухую позиционно\n\nvariable::lerp_number(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::lerp_number(variable=`variable`, start=1, stop=2, amount=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `start`         | Число           | Первое число                   |\n| `stop`          | Число           | Второе число                   |\n| `amount`        | Число           | Коэффициент (от 0 до 1)        |",".lerp_number":"```justcode\nvariable::lerp_number\n```\n\n**Имя:** Интерполировать число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Вычисляет число между двумя числами с определённым коэффициентом и присваивает результат к переменной. При коэффициенте 0 будет возвращено первое число, при 1 - второе, при 0.5 - среднее значение.\n\n**Пример использования:** \n```justcode\n`variable` = variable::lerp_number(1, 2, 3);\n\n//Или от объекта\n\n`variable` = (3).lerp_number(1, 2);\n\n//Или в сухую позиционно\n\nvariable::lerp_number(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::lerp_number(variable=`variable`, start=1, stop=2, amount=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `start`         | Число           | Первое число                   |\n| `stop`          | Число           | Второе число                   |\n| `amount`        | Число           | Коэффициент (от 0 до 1)        |","variable::location_relative":"```justcode\nvariable::location_relative\n```\n\n**Имя:** Установить относительное местоположение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает местоположение относительно стороны блока на определённом расстоянии, присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::location_relative(location(0,0,0,0,0), 1, \"DOWN\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).location_relative(1, \"DOWN\");\n\n//Или в сухую позиционно\n\nvariable::location_relative(`variable`, location(0,0,0,0,0), 1, \"DOWN\");\n\n//Или в сухую по ключам\n\nvariable::location_relative(variable=`variable`, location=location(0,0,0,0,0), distance=1, block_face=\"DOWN\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                                           | **Описание**                      |\n| :----------- | :----------------------------------------------------------- | :--------------------------- |\n| `variable`        | Переменная                                                        | Переменная для присвоения         |\n| `location`        | Местоположение                                                    | Относительное местоположение      |\n| `distance`        | Число                                                             | Расстояние                        |\n| `block_face`      | Маркер                                                            | Сторона блока                     |\n|                   | **DOWN** - Низ                                                    |                                   |\n|                   | **EAST** - Восток                                                 |                                   |\n|                   | **EAST_NORTH_EAST** - Восток-север-восток (east_north_east)       |                                   |\n|                   | **EAST_SOUTH_EAST** - Восток-юг-восток (east_south_east)          |                                   |\n|                   | **NORTH** - Север                                                 |                                   |\n|                   | **NORTH_EAST** - Северо-восток                                    |                                   |\n|                   | **NORTH_NORTH_EAST** - Север-север-восток (north_north_east)      |                                   |\n|                   | **NORTH_NORTH_WEST** - Север-север-запад (north_north_west)       |                                   |\n|                   | **NORTH_WEST** - Северо-запад                                     |                                   |\n|                   | **SELF** - Собственная (self)                                     |                                   |\n|                   | **SOUTH** - Юг                                                    |                                   |\n|                   | **SOUTH_EAST** - Юго-восток                                       |                                   |\n|                   | **SOUTH_SOUTH_EAST** - Юг-юг-восток (south_south_east)            |                                   |\n|                   | **SOUTH_SOUTH_WEST** - Юг-юг-запад (south_south_west)             |                                   |\n|                   | **SOUTH_WEST** - Юго-запад                                        |                                   |\n|                   | **UP** - Верх                                                     |                                   |\n|                   | **WEST** - Запад                                                  |                                   |\n|                   | **WEST_NORTH_WEST** - Запад-север-запад (west_north_west)         |                                   |\n|                   | **WEST_SOUTH_WEST** - Запад-юг-запад (west_south_west)            |                                   |",".location_relative":"```justcode\nvariable::location_relative\n```\n\n**Имя:** Установить относительное местоположение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает местоположение относительно стороны блока на определённом расстоянии, присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::location_relative(location(0,0,0,0,0), 1, \"DOWN\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).location_relative(1, \"DOWN\");\n\n//Или в сухую позиционно\n\nvariable::location_relative(`variable`, location(0,0,0,0,0), 1, \"DOWN\");\n\n//Или в сухую по ключам\n\nvariable::location_relative(variable=`variable`, location=location(0,0,0,0,0), distance=1, block_face=\"DOWN\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                                           | **Описание**                      |\n| :----------- | :----------------------------------------------------------- | :--------------------------- |\n| `variable`        | Переменная                                                        | Переменная для присвоения         |\n| `location`        | Местоположение                                                    | Относительное местоположение      |\n| `distance`        | Число                                                             | Расстояние                        |\n| `block_face`      | Маркер                                                            | Сторона блока                     |\n|                   | **DOWN** - Низ                                                    |                                   |\n|                   | **EAST** - Восток                                                 |                                   |\n|                   | **EAST_NORTH_EAST** - Восток-север-восток (east_north_east)       |                                   |\n|                   | **EAST_SOUTH_EAST** - Восток-юг-восток (east_south_east)          |                                   |\n|                   | **NORTH** - Север                                                 |                                   |\n|                   | **NORTH_EAST** - Северо-восток                                    |                                   |\n|                   | **NORTH_NORTH_EAST** - Север-север-восток (north_north_east)      |                                   |\n|                   | **NORTH_NORTH_WEST** - Север-север-запад (north_north_west)       |                                   |\n|                   | **NORTH_WEST** - Северо-запад                                     |                                   |\n|                   | **SELF** - Собственная (self)                                     |                                   |\n|                   | **SOUTH** - Юг                                                    |                                   |\n|                   | **SOUTH_EAST** - Юго-восток                                       |                                   |\n|                   | **SOUTH_SOUTH_EAST** - Юг-юг-восток (south_south_east)            |                                   |\n|                   | **SOUTH_SOUTH_WEST** - Юг-юг-запад (south_south_west)             |                                   |\n|                   | **SOUTH_WEST** - Юго-запад                                        |                                   |\n|                   | **UP** - Верх                                                     |                                   |\n|                   | **WEST** - Запад                                                  |                                   |\n|                   | **WEST_NORTH_WEST** - Запад-север-запад (west_north_west)         |                                   |\n|                   | **WEST_SOUTH_WEST** - Запад-юг-запад (west_south_west)            |                                   |","variable::locations_distance":"```justcode\nvariable::locations_distance\n```\n\n**Имя:** Получить расстояние между местоположениями\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает расстояние между местоположениями и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::locations_distance(location(0,0,0,0,0), location(0,0,0,0,0), \"ALTITUDE\");\n\n//Или в сухую позиционно\n\nvariable::locations_distance(`variable`, location(0,0,0,0,0), location(0,0,0,0,0), \"ALTITUDE\");\n\n//Или в сухую по ключам\n\nvariable::locations_distance(variable=`variable`, location_1=location(0,0,0,0,0), location_2=location(0,0,0,0,0), type=\"ALTITUDE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                       | **Описание**                   |\n| :----------- | :----------------------- | :------------------------ |\n| `variable`        | Переменная                    | Переменная для присвоения      |\n| `location_1`      | Местоположение                | Первое местоположение          |\n| `location_2`      | Местоположение                | Второе местоположение          |\n| `type`            | Маркер                        | Тип расстояния                 |\n|                   | **ALTITUDE** - По высоте      |                                |\n|                   | **THREE_D** - В объёме        |                                |\n|                   | **TWO_D** - В плоскости       |                                |","variable::log":"```justcode\nvariable::log\n```\n\n**Имя:** Логарифм числа (log)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение логарифма с выбранным аргументом и основанием.\n\n**Пример использования:** \n```justcode\n`variable` = variable::log(1, 2);\n\n//Или от объекта\n\n`variable` = (1).log(2);\n\n//Или в сухую позиционно\n\nvariable::log(`variable`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::log(variable=`variable`, number=1, base=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Аргумент логарифма             |\n| `base`          | Число           | Основание логарифма            |",".log":"```justcode\nvariable::log\n```\n\n**Имя:** Логарифм числа (log)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение логарифма с выбранным аргументом и основанием.\n\n**Пример использования:** \n```justcode\n`variable` = variable::log(1, 2);\n\n//Или от объекта\n\n`variable` = (1).log(2);\n\n//Или в сухую позиционно\n\nvariable::log(`variable`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::log(variable=`variable`, number=1, base=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Аргумент логарифма             |\n| `base`          | Число           | Основание логарифма            |","variable::map_range":"```justcode\nvariable::map_range\n```\n\n**Имя:** Перевести число в другой диапазон\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Переводит число с одного диапазона в другой и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::map_range(1, 2, 3, 4, 5);\n\n//Или от объекта\n\n`variable` = (1).map_range(2, 3, 4, 5);\n\n//Или в сухую позиционно\n\nvariable::map_range(`variable`, 1, 2, 3, 4, 5);\n\n//Или в сухую по ключам\n\nvariable::map_range(variable=`variable`, number=1, from_start=2, from_stop=3, to_start=4, to_stop=5);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**         | **Описание**                               |\n| :----------- | :--------- | :------------------------------------ |\n| `variable`        | Переменная      | Переменная для присвоения                  |\n| `number`          | Число           | Число для изменения                        |\n| `from_start`      | Число           | Нижний предел изначального диапазона       |\n| `from_stop`       | Число           | Верхний предел изначального диапазона      |\n| `to_start`        | Число           | Нижний предел нового диапазона             |\n| `to_stop`         | Число           | Верхний предел нового диапазона            |",".map_range":"```justcode\nvariable::map_range\n```\n\n**Имя:** Перевести число в другой диапазон\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Переводит число с одного диапазона в другой и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::map_range(1, 2, 3, 4, 5);\n\n//Или от объекта\n\n`variable` = (1).map_range(2, 3, 4, 5);\n\n//Или в сухую позиционно\n\nvariable::map_range(`variable`, 1, 2, 3, 4, 5);\n\n//Или в сухую по ключам\n\nvariable::map_range(variable=`variable`, number=1, from_start=2, from_stop=3, to_start=4, to_stop=5);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**         | **Описание**                               |\n| :----------- | :--------- | :------------------------------------ |\n| `variable`        | Переменная      | Переменная для присвоения                  |\n| `number`          | Число           | Число для изменения                        |\n| `from_start`      | Число           | Нижний предел изначального диапазона       |\n| `from_stop`       | Число           | Верхний предел изначального диапазона      |\n| `to_start`        | Число           | Нижний предел нового диапазона             |\n| `to_stop`         | Число           | Верхний предел нового диапазона            |","variable::max":"```justcode\nvariable::max\n```\n\n**Имя:** Максимальное значение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной наибольшее число из выбранных.\n\n**Пример использования:** \n```justcode\n`variable` = variable::max([1, 2]);\n\n//Или в сухую позиционно\n\nvariable::max(`variable`, [1, 2]);\n\n//Или в сухую по ключам\n\nvariable::max(variable=`variable`, value=[1, 2]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `value`         | список[Число]      | Числа для выбора               |","variable::min":"```justcode\nvariable::min\n```\n\n**Имя:** Минимальное значение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной наименьшее число из выбранных.\n\n**Пример использования:** \n```justcode\n`variable` = variable::min([1, 2]);\n\n//Или в сухую позиционно\n\nvariable::min(`variable`, [1, 2]);\n\n//Или в сухую по ключам\n\nvariable::min(variable=`variable`, value=[1, 2]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `value`         | список[Число]      | Числа для выбора               |","variable::set_values":"```justcode\nvariable::set_values\n```\n\n**Имя:** Установить значения нескольких переменных (=)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает указанные значения к указанным переменным.\n\n**Пример использования:** \n```justcode\n[`variables`, `variables`] = variable::set_values([\"any value\", \"any value\"]);\n\n//Или в сухую позиционно\n\nvariable::set_values([`variables`, `variables`], [\"any value\", \"any value\"]);\n\n//Или в сухую по ключам\n\nvariable::set_values(variables=[`variables`, `variables`], values=[\"any value\", \"any value\"]);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                     | **Описание**                   |\n| :---------- | :--------------------- | :------------------------ |\n| `variables`      | список[Переменная]          | Переменные для присвоения      |\n| `values`         | список[Любое значение]      | Значения для присвоения        |","variable::multiply":"```justcode\nvariable::multiply\n```\n\n**Имя:** Умножение чисел (×)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной произведение чисел.\n\n**Пример использования:** \n```justcode\n`variable` = variable::multiply([1, 2]);\n\n//Или в сухую позиционно\n\nvariable::multiply(`variable`, [1, 2]);\n\n//Или в сухую по ключам\n\nvariable::multiply(variable=`variable`, value=[1, 2]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `value`         | список[Число]      | Числа для умножения            |","variable::multiply_vector":"```justcode\nvariable::multiply_vector\n```\n\n**Имя:** Умножить вектор на число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной результат умножения вектора на число.\n\n**Пример использования:** \n```justcode\n`variable` = variable::multiply_vector(vector(0,0,0), 1);\n\n//Или в сухую позиционно\n\nvariable::multiply_vector(`variable`, vector(0,0,0), 1);\n\n//Или в сухую по ключам\n\nvariable::multiply_vector(variable=`variable`, vector=vector(0,0,0), multiplier=1);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**         | **Описание**                   |\n| :----------- | :--------- | :------------------------ |\n| `variable`        | Переменная      | Переменная для присвоения      |\n| `vector`          | Вектор          | Вектор для изменения           |\n| `multiplier`      | Число           | Число для умножения            |","variable::obtain_item_custom_model_data":"```justcode\nvariable::obtain_item_custom_model_data\n```\n\n**Имя:** Получить данные о модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает список данных о модели предмета (CustomModelData) и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::obtain_item_custom_model_data(item(\"stick\"), \"FLOATS\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").obtain_item_custom_model_data(\"FLOATS\");\n\n//Или в сухую позиционно\n\nvariable::obtain_item_custom_model_data(`variable`, item(\"stick\"), \"FLOATS\");\n\n//Или в сухую по ключам\n\nvariable::obtain_item_custom_model_data(variable=`variable`, item=item(\"stick\"), value_type=\"FLOATS\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                         | **Описание**                   |\n| :----------- | :----------------------------------------- | :------------------------ |\n| `variable`        | Переменная                                      | Переменная для присвоения      |\n| `item`            | Предмет                                         | Предмет                        |\n| `value_type`      | Маркер                                          | Тип данных                     |\n|                   | **FLOATS** - Плавающие значения (floats)        |                                |\n|                   | **BOOLEANS** - Булевые значения (booleans)      |                                |\n|                   | **STRINGS** - Строчные значения (strings)       |                                |\n|                   | **COLORS** - Список цветов (colors)             |                                |",".obtain_item_custom_model_data":"```justcode\nvariable::obtain_item_custom_model_data\n```\n\n**Имя:** Получить данные о модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает список данных о модели предмета (CustomModelData) и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::obtain_item_custom_model_data(item(\"stick\"), \"FLOATS\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").obtain_item_custom_model_data(\"FLOATS\");\n\n//Или в сухую позиционно\n\nvariable::obtain_item_custom_model_data(`variable`, item(\"stick\"), \"FLOATS\");\n\n//Или в сухую по ключам\n\nvariable::obtain_item_custom_model_data(variable=`variable`, item=item(\"stick\"), value_type=\"FLOATS\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                         | **Описание**                   |\n| :----------- | :----------------------------------------- | :------------------------ |\n| `variable`        | Переменная                                      | Переменная для присвоения      |\n| `item`            | Предмет                                         | Предмет                        |\n| `value_type`      | Маркер                                          | Тип данных                     |\n|                   | **FLOATS** - Плавающие значения (floats)        |                                |\n|                   | **BOOLEANS** - Булевые значения (booleans)      |                                |\n|                   | **STRINGS** - Строчные значения (strings)       |                                |\n|                   | **COLORS** - Список цветов (colors)             |                                |","variable::parse_json":"```justcode\nvariable::parse_json\n```\n\n**Имя:** Разобрать JSON\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Разбирает текст JSON на элементы\\: словари (если текст заключен в фигурные скобки) и списки (если текст заключен в квадратные скобки), с которыми можно работать, чтобы получить нужные значения.\n\n**Пример использования:** \n```justcode\n`variable` = variable::parse_json(\"json\");\n\n//Или в сухую позиционно\n\nvariable::parse_json(`variable`, \"json\");\n\n//Или в сухую по ключам\n\nvariable::parse_json(variable=`variable`, json=\"json\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**               |\n| :--------- | :--------- | :-------------------- |\n| `variable`      | Переменная      | Для записи результата      |\n| `json`          | Текст           | JSON текст                 |","variable::parse_to_component":"```justcode\nvariable::parse_to_component\n```\n\n**Имя:** Преобразовать в стилизуемый текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Преобразует обычный текст в стилизуемый текст.\n\n**Пример использования:** \n```justcode\n`variable` = variable::parse_to_component(\"text\", \"JSON\");\n\n//Или от объекта\n\n`variable` = \"text\".parse_to_component(\"JSON\");\n\n//Или в сухую позиционно\n\nvariable::parse_to_component(`variable`, \"text\", \"JSON\");\n\n//Или в сухую по ключам\n\nvariable::parse_to_component(variable=`variable`, text=\"text\", parsing=\"JSON\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                            | **Описание**                   |\n| :--------- | :---------------------------- | :------------------------ |\n| `variable`      | Переменная                         | Переменная для присвоения      |\n| `text`          | Текст                              | Текст для преобразования       |\n| `parsing`       | Маркер                             | Тип преобразования             |\n|                 | **JSON** - JSON                    |                                |\n|                 | **LEGACY** - Цветной (&)           |                                |\n|                 | **MINIMESSAGE** - Стилизуемый      |                                |\n|                 | **PLAIN** - Обычный                |                                |",".parse_to_component":"```justcode\nvariable::parse_to_component\n```\n\n**Имя:** Преобразовать в стилизуемый текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Преобразует обычный текст в стилизуемый текст.\n\n**Пример использования:** \n```justcode\n`variable` = variable::parse_to_component(\"text\", \"JSON\");\n\n//Или от объекта\n\n`variable` = \"text\".parse_to_component(\"JSON\");\n\n//Или в сухую позиционно\n\nvariable::parse_to_component(`variable`, \"text\", \"JSON\");\n\n//Или в сухую по ключам\n\nvariable::parse_to_component(variable=`variable`, text=\"text\", parsing=\"JSON\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                            | **Описание**                   |\n| :--------- | :---------------------------- | :------------------------ |\n| `variable`      | Переменная                         | Переменная для присвоения      |\n| `text`          | Текст                              | Текст для преобразования       |\n| `parsing`       | Маркер                             | Тип преобразования             |\n|                 | **JSON** - JSON                    |                                |\n|                 | **LEGACY** - Цветной (&)           |                                |\n|                 | **MINIMESSAGE** - Стилизуемый      |                                |\n|                 | **PLAIN** - Обычный                |                                |","variable::perlin_noise_3d":"```justcode\nvariable::perlin_noise_3d\n```\n\n**Имя:** Шум Перлина\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение шума Перлина в определённом местоположении. Возвращает число, со значением от -1 до 1.\n\n**Пример использования:** \n```justcode\n`variable` = variable::perlin_noise_3d(location(0,0,0,0,0), 1, 2, 3, 4, 5, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::perlin_noise_3d(`variable`, location(0,0,0,0,0), 1, 2, 3, 4, 5, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::perlin_noise_3d(variable=`variable`, location=location(0,0,0,0,0), seed=1, loc_frequency=2, octaves=3, frequency=4, amplitude=5, range_mode=\"FULL_RANGE\", normalized=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                                                       | **Описание**                           |\n| :-------------- | :------------------------------------------------------- | :-------------------------------- |\n| `variable`           | Переменная                                                    | Переменная для присвоения              |\n| `location`           | Местоположение                                                | Местоположение для установки шума      |\n| `seed`               | Число                                                         | Ключ шума                              |\n| `loc_frequency`      | Число                                                         | Частота шума                           |\n| `octaves`            | Число                                                         | Количество октав шума                  |\n| `frequency`          | Число                                                         | Частота октав шума                     |\n| `amplitude`          | Число                                                         | Амплитуда октав шума                   |\n| `range_mode`         | Маркер                                                        | Диапазон значений                      |\n|                      | **FULL_RANGE** - Полный диапазон (от -1 до 1 или больше)      |                                        |\n|                      | **ZERO_TO_ONE** - От 0 до 1                                   |                                        |\n| `normalized`         | Маркер                                                        | Нормализация значений                  |\n|                      | **FALSE** - Не нормализировать                                |                                        |\n|                      | **TRUE** - Нормализировать                                    |                                        |","variable::pow":"```justcode\nvariable::pow\n```\n\n**Имя:** Степень числа (^)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение степени с выбранным основанием и показателем.\n\n**Пример использования:** \n```justcode\n`variable` = variable::pow(1, 2);\n\n//Или от объекта\n\n`variable` = (1).pow(2);\n\n//Или в сухую позиционно\n\nvariable::pow(`variable`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::pow(variable=`variable`, base=1, power=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `base`          | Число           | Основание степени              |\n| `power`         | Число           | Показатель степени             |",".pow":"```justcode\nvariable::pow\n```\n\n**Имя:** Степень числа (^)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение степени с выбранным основанием и показателем.\n\n**Пример использования:** \n```justcode\n`variable` = variable::pow(1, 2);\n\n//Или от объекта\n\n`variable` = (1).pow(2);\n\n//Или в сухую позиционно\n\nvariable::pow(`variable`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::pow(variable=`variable`, base=1, power=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `base`          | Число           | Основание степени              |\n| `power`         | Число           | Показатель степени             |","variable::purge":"```justcode\nvariable::purge\n```\n\n**Имя:** Очистить переменные\\\n**Тип:** Действие без значения\\\n**Описание:** Очищает все переменные, подходящие под выбранные имена.\n\n**Пример использования:** \n```justcode\nvariable::purge([\"names\", \"names\"], \"GAME\", \"ENDS_WITH\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::purge(names=[\"names\", \"names\"], scope=\"GAME\", match=\"ENDS_WITH\", ignore_case=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                     | **Описание**                |\n| :------------ | :------------------------------------- | :--------------------- |\n| `names`            | список[Текст]                               | Имена для сравнения         |\n| `scope`            | Маркер                                      | Тип переменной              |\n|                    | **GAME** - Игровая                          |                             |\n|                    | **LOCAL** - Локальная                       |                             |\n|                    | **SAVE** - Сохранённая                      |                             |\n| `match`            | Маркер                                      | Режим сравнения             |\n|                    | **ENDS_WITH** - Имя заканчивается на        |                             |\n|                    | **EQUALS** - Полное соответствие            |                             |\n|                    | **NAME_CONTAINS** - Имя содержит текст      |                             |\n|                    | **PART_CONTAINS** - Текст содержит имя      |                             |\n|                    | **STARTS_WITH** - Имя начинается с          |                             |\n| `ignore_case`      | Маркер                                      | Игнорирование регистра      |\n|                    | **FALSE** - Выключено                       |                             |\n|                    | **TRUE** - Включено                         |                             |","variable::random":"```justcode\nvariable::random\n```\n\n**Имя:** Установить случайное значение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает случайное значение к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::random([\"any value\", \"any value\"]);\n\n//Или в сухую позиционно\n\nvariable::random(`variable`, [\"any value\", \"any value\"]);\n\n//Или в сухую по ключам\n\nvariable::random(variable=`variable`, values=[\"any value\", \"any value\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                     | **Описание**                   |\n| :--------- | :--------------------- | :------------------------ |\n| `variable`      | Переменная                  | Переменная для присвоения      |\n| `values`        | список[Любое значение]      | Значения для выбора            |","variable::random_location":"```justcode\nvariable::random_location\n```\n\n**Имя:** Создать случайное местоположение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт случайное местоположение в регионе между двумя углами и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::random_location(location(0,0,0,0,0), location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::random_location(`variable`, location(0,0,0,0,0), location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::random_location(variable=`variable`, location_1=location(0,0,0,0,0), location_2=location(0,0,0,0,0), integer=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                    | **Описание**                       |\n| :----------- | :-------------------- | :---------------------------- |\n| `variable`        | Переменная                 | Переменная для присвоения          |\n| `location_1`      | Местоположение             | Первый угол региона                |\n| `location_2`      | Местоположение             | Второй угол региона                |\n| `integer`         | Маркер                     | Округление до целых координат      |\n|                   | **FALSE** - Выключить      |                                    |\n|                   | **TRUE** - Включить        |                                    |","variable::random_number":"```justcode\nvariable::random_number\n```\n\n**Имя:** Случайное число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной случайное число в выбранном диапазоне.\n\n**Пример использования:** \n```justcode\n`variable` = variable::random_number(1, 2, \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::random_number(`variable`, 1, 2, \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::random_number(variable=`variable`, min=1, max=2, integer=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                  | **Описание**                   |\n| :--------- | :------------------ | :------------------------ |\n| `variable`      | Переменная               | Переменная для присвоения      |\n| `min`           | Число                    | Минимальное значение           |\n| `max`           | Число                    | Максимальное значение          |\n| `integer`       | Маркер                   | Тип числа                      |\n|                 | **FALSE** - Дробное      |                                |\n|                 | **TRUE** - Целое         |                                |","variable::randomize_list_order":"```justcode\nvariable::randomize_list_order\n```\n\n**Имя:** Рандомизировать список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает порядок элементов случайным образом.\n\n**Пример использования:** \n```justcode\n`variable` = variable::randomize_list_order(`list`);\n\n//Или от объекта\n\n`variable` = `list`.randomize_list_order();\n\n//Или в сухую позиционно\n\nvariable::randomize_list_order(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::randomize_list_order(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |",".randomize_list_order":"```justcode\nvariable::randomize_list_order\n```\n\n**Имя:** Рандомизировать список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает порядок элементов случайным образом.\n\n**Пример использования:** \n```justcode\n`variable` = variable::randomize_list_order(`list`);\n\n//Или от объекта\n\n`variable` = `list`.randomize_list_order();\n\n//Или в сухую позиционно\n\nvariable::randomize_list_order(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::randomize_list_order(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |","variable::ray_trace_result":"```justcode\nvariable::ray_trace_result\n```\n\n**Имя:** Получить результат рейкаста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Запускает луч с заданными параметрами. При столкновении луча с указанными объектами (с сущностью или блоком) можно получить местоположение падения луча, местоположение и сторону блока, UUID сущности и сторону хитбокса. Ширина луча работает только на сущностей (увеличивает или уменьшает хитбоксы существ).\n\n**Пример использования:** \n```justcode\n`variable_for_hit_location`, `variable_for_hit_block_location`, `variable_for_hit_block_face`, `variable_for_hit_entity_uuid` = variable::ray_trace_result(location(0,0,0,0,0), 1, 2, `entities`, \"BLOCKS_AND_ENTITIES\", \"FALSE\", \"ALWAYS\");\n\n//Или в сухую позиционно\n\nvariable::ray_trace_result(`variable_for_hit_location`, `variable_for_hit_block_location`, `variable_for_hit_block_face`, `variable_for_hit_entity_uuid`, location(0,0,0,0,0), 1, 2, `entities`, \"BLOCKS_AND_ENTITIES\", \"FALSE\", \"ALWAYS\");\n\n//Или в сухую по ключам\n\nvariable::ray_trace_result(variable_for_hit_location=`variable_for_hit_location`, variable_for_hit_block_location=`variable_for_hit_block_location`, variable_for_hit_block_face=`variable_for_hit_block_face`, variable_for_hit_entity_uuid=`variable_for_hit_entity_uuid`, start=location(0,0,0,0,0), ray_size=1, max_distance=2, entities=`entities`, ray_collision_mode=\"BLOCKS_AND_ENTITIES\", ignore_passable_blocks=\"FALSE\", fluid_collision_mode=\"ALWAYS\");\n```\n\n**Аргументы:**\n\n| **Имя**                                | **Тип**                                                   | **Описание**                                                                          |\n| :-------------------------------- | :--------------------------------------------------- | :------------------------------------------------------------------------------- |\n| `variable_for_hit_location`            | Переменная                                                | Точка падения луча                                                                    |\n| `variable_for_hit_block_location`      | Переменная                                                | Местоположение блока                                                                  |\n| `variable_for_hit_block_face`          | Переменная                                                | Сторона блока/хитбокса                                                                |\n| `variable_for_hit_entity_uuid`         | Переменная                                                | UUID сущности                                                                         |\n| `start`                                | Местоположение                                            | Начало луча                                                                           |\n| `ray_size`                             | Число                                                     | Ширина луча                                                                           |\n| `max_distance`                         | Число                                                     | Длина луча                                                                            |\n| `entities`                             | Список                                                    | Имена или UUID сущностей для столкновения (по умолчанию - все игроки и сущности)      |\n| `ray_collision_mode`                   | Маркер                                                    | Столкновение с объектами                                                              |\n|                                        | **BLOCKS_AND_ENTITIES** - С блоками и сущностями          |                                                                                       |\n|                                        | **ONLY_BLOCKS** - Только с блоками                        |                                                                                       |\n|                                        | **ONLY_ENTITIES** - Только с сущностями                   |                                                                                       |\n| `ignore_passable_blocks`               | Маркер                                                    | Игнорировать проходимые блоки                                                         |\n|                                        | **FALSE** - Не игнорировать                               |                                                                                       |\n|                                        | **TRUE** - Игнорировать                                   |                                                                                       |\n| `fluid_collision_mode`                 | Маркер                                                    | Игнорировать жидкость                                                                 |\n|                                        | **ALWAYS** - Не игнорировать                              |                                                                                       |\n|                                        | **NEVER** - Полностью игнорировать                        |                                                                                       |\n|                                        | **SOURCE_ONLY** - Учитывать только источник жидкости      |                                                                                       |","variable::reflect_vector_product":"```justcode\nvariable::reflect_vector_product\n```\n\n**Имя:** Отразить вектор относительно второго вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Отражает вектор относительно другого вектора и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::reflect_vector_product(vector(0,0,0), vector(0,0,0), 1);\n\n//Или в сухую позиционно\n\nvariable::reflect_vector_product(`variable`, vector(0,0,0), vector(0,0,0), 1);\n\n//Или в сухую по ключам\n\nvariable::reflect_vector_product(variable=`variable`, vector_1=vector(0,0,0), vector_2=vector(0,0,0), bounce=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                                                      |\n| :--------- | :--------- | :----------------------------------------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения                                         |\n| `vector_1`      | Вектор          | Исходный вектор                                                   |\n| `vector_2`      | Вектор          | Вектор поверхности отражения                                      |\n| `bounce`        | Число           | Домножение итогового вектора на это число (по умолчанию 1.0)      |","variable::regex_replace_text":"```justcode\nvariable::regex_replace_text\n```\n\n**Имя:** Заменить совпадение с регулярным выражением\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Заменяет текст, соответствующий указанному регулярному выражению, и присваивает результат к переменной. Аргумент \"Замена\" может содержать $\\<название группы\\> для ссылки на группу. Включайте только те флаги, которые вам нужны!\n\n**Пример использования:** \n```justcode\n`variable` = variable::regex_replace_text(\"text\", \"regex\", \"replacement\", \"ANY\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = \"text\".regex_replace_text(\"regex\", \"replacement\", \"ANY\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::regex_replace_text(`variable`, \"text\", \"regex\", \"replacement\", \"ANY\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::regex_replace_text(variable=`variable`, text=\"text\", regex=\"regex\", replacement=\"replacement\", first=\"ANY\", ignore_case=\"FALSE\", multiline=\"FALSE\", literal=\"FALSE\", unix_lines=\"FALSE\", comments=\"FALSE\", dot_matches_all=\"FALSE\", cannon_eq=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                            | **Описание**                                                        |\n| :---------------- | :-------------------------------------------- | :------------------------------------------------------------- |\n| `variable`             | Переменная                                         | Переменная для присвоения                                           |\n| `text`                 | Текст                                              | Исходный текст                                                      |\n| `regex`                | Текст                                              | Регулярное выражение                                                |\n| `replacement`          | Текст                                              | Замена                                                              |\n| `first`                | Маркер                                             | Количество замен                                                    |\n|                        | **ANY** - Заменить все совпадения                  |                                                                     |\n|                        | **FIRST** - Заменить только первое совпадение      |                                                                     |\n| `ignore_case`          | Маркер                                             | Игнорировать регистр (флаг ignore_case)                             |\n|                        | **FALSE** - Выключено                              |                                                                     |\n|                        | **TRUE** - Включено                                |                                                                     |\n| `multiline`            | Маркер                                             | Многострочный режим (флаг multiline)                                |\n|                        | **FALSE** - Выключен                               |                                                                     |\n|                        | **TRUE** - Включён                                 |                                                                     |\n| `literal`              | Маркер                                             | Воспринимать шаблон дословно (флаг literal)                         |\n|                        | **FALSE** - Выключено                              |                                                                     |\n|                        | **TRUE** - Включено                                |                                                                     |\n| `unix_lines`           | Маркер                                             | Режим UNIX строк (флаг unix_lines)                                  |\n|                        | **FALSE** - Выключен                               |                                                                     |\n|                        | **TRUE** - Включён                                 |                                                                     |\n| `comments`             | Маркер                                             | Разрешить комментарии и игнорирование пробелов (флаг comments)      |\n|                        | **FALSE** - Выключено                              |                                                                     |\n|                        | **TRUE** - Включено                                |                                                                     |\n| `dot_matches_all`      | Маркер                                             | Режим dotall (флаг dotall)                                          |\n|                        | **FALSE** - Выключен                               |                                                                     |\n|                        | **TRUE** - Включён                                 |                                                                     |\n| `cannon_eq`            | Маркер                                             | Каноническая эквивалентность (флаг cannon_eq)                       |\n|                        | **FALSE** - Выключено                              |                                                                     |\n|                        | **TRUE** - Включено                                |                                                                     |",".regex_replace_text":"```justcode\nvariable::regex_replace_text\n```\n\n**Имя:** Заменить совпадение с регулярным выражением\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Заменяет текст, соответствующий указанному регулярному выражению, и присваивает результат к переменной. Аргумент \"Замена\" может содержать $\\<название группы\\> для ссылки на группу. Включайте только те флаги, которые вам нужны!\n\n**Пример использования:** \n```justcode\n`variable` = variable::regex_replace_text(\"text\", \"regex\", \"replacement\", \"ANY\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = \"text\".regex_replace_text(\"regex\", \"replacement\", \"ANY\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::regex_replace_text(`variable`, \"text\", \"regex\", \"replacement\", \"ANY\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::regex_replace_text(variable=`variable`, text=\"text\", regex=\"regex\", replacement=\"replacement\", first=\"ANY\", ignore_case=\"FALSE\", multiline=\"FALSE\", literal=\"FALSE\", unix_lines=\"FALSE\", comments=\"FALSE\", dot_matches_all=\"FALSE\", cannon_eq=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                            | **Описание**                                                        |\n| :---------------- | :-------------------------------------------- | :------------------------------------------------------------- |\n| `variable`             | Переменная                                         | Переменная для присвоения                                           |\n| `text`                 | Текст                                              | Исходный текст                                                      |\n| `regex`                | Текст                                              | Регулярное выражение                                                |\n| `replacement`          | Текст                                              | Замена                                                              |\n| `first`                | Маркер                                             | Количество замен                                                    |\n|                        | **ANY** - Заменить все совпадения                  |                                                                     |\n|                        | **FIRST** - Заменить только первое совпадение      |                                                                     |\n| `ignore_case`          | Маркер                                             | Игнорировать регистр (флаг ignore_case)                             |\n|                        | **FALSE** - Выключено                              |                                                                     |\n|                        | **TRUE** - Включено                                |                                                                     |\n| `multiline`            | Маркер                                             | Многострочный режим (флаг multiline)                                |\n|                        | **FALSE** - Выключен                               |                                                                     |\n|                        | **TRUE** - Включён                                 |                                                                     |\n| `literal`              | Маркер                                             | Воспринимать шаблон дословно (флаг literal)                         |\n|                        | **FALSE** - Выключено                              |                                                                     |\n|                        | **TRUE** - Включено                                |                                                                     |\n| `unix_lines`           | Маркер                                             | Режим UNIX строк (флаг unix_lines)                                  |\n|                        | **FALSE** - Выключен                               |                                                                     |\n|                        | **TRUE** - Включён                                 |                                                                     |\n| `comments`             | Маркер                                             | Разрешить комментарии и игнорирование пробелов (флаг comments)      |\n|                        | **FALSE** - Выключено                              |                                                                     |\n|                        | **TRUE** - Включено                                |                                                                     |\n| `dot_matches_all`      | Маркер                                             | Режим dotall (флаг dotall)                                          |\n|                        | **FALSE** - Выключен                               |                                                                     |\n|                        | **TRUE** - Включён                                 |                                                                     |\n| `cannon_eq`            | Маркер                                             | Каноническая эквивалентность (флаг cannon_eq)                       |\n|                        | **FALSE** - Выключено                              |                                                                     |\n|                        | **TRUE** - Включено                                |                                                                     |","variable::remainder":"```justcode\nvariable::remainder\n```\n\n**Имя:** Остаток от деления (%)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной остаток от деления двух чисел.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remainder(1, 2, \"MODULO\");\n\n//Или от объекта\n\n`variable` = (1).remainder(2, \"MODULO\");\n\n//Или в сухую позиционно\n\nvariable::remainder(`variable`, 1, 2, \"MODULO\");\n\n//Или в сухую по ключам\n\nvariable::remainder(variable=`variable`, dividend=1, divisor=2, remainder_mode=\"MODULO\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                                           | **Описание**                   |\n| :--------------- | :----------------------------------------------------------- | :------------------------ |\n| `variable`            | Переменная                                                        | Переменная для присвоения      |\n| `dividend`            | Число                                                             | Делимое                        |\n| `divisor`             | Число                                                             | Делитель                       |\n| `remainder_mode`      | Маркер                                                            | Режим работы                   |\n|                       | **MODULO** - Остаток по модулю (оставляет знак делителя)          |                                |\n|                       | **REMAINDER** - Остаток от деления (оставляет знак делимого)      |                                |",".remainder":"```justcode\nvariable::remainder\n```\n\n**Имя:** Остаток от деления (%)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной остаток от деления двух чисел.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remainder(1, 2, \"MODULO\");\n\n//Или от объекта\n\n`variable` = (1).remainder(2, \"MODULO\");\n\n//Или в сухую позиционно\n\nvariable::remainder(`variable`, 1, 2, \"MODULO\");\n\n//Или в сухую по ключам\n\nvariable::remainder(variable=`variable`, dividend=1, divisor=2, remainder_mode=\"MODULO\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**                                                           | **Описание**                   |\n| :--------------- | :----------------------------------------------------------- | :------------------------ |\n| `variable`            | Переменная                                                        | Переменная для присвоения      |\n| `dividend`            | Число                                                             | Делимое                        |\n| `divisor`             | Число                                                             | Делитель                       |\n| `remainder_mode`      | Маркер                                                            | Режим работы                   |\n|                       | **MODULO** - Остаток по модулю (оставляет знак делителя)          |                                |\n|                       | **REMAINDER** - Остаток от деления (оставляет знак делимого)      |                                |","variable::remove_compass_lodestone":"```justcode\nvariable::remove_compass_lodestone\n```\n\n**Имя:** Удалить местоположение магнетита\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет с намагниченного компаса местоположение магнетита и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_compass_lodestone(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_compass_lodestone();\n\n//Или в сухую позиционно\n\nvariable::remove_compass_lodestone(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::remove_compass_lodestone(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Намагниченный компас           |",".remove_compass_lodestone":"```justcode\nvariable::remove_compass_lodestone\n```\n\n**Имя:** Удалить местоположение магнетита\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет с намагниченного компаса местоположение магнетита и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_compass_lodestone(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_compass_lodestone();\n\n//Или в сухую позиционно\n\nvariable::remove_compass_lodestone(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::remove_compass_lodestone(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Намагниченный компас           |","variable::remove_enchantment":"```justcode\nvariable::remove_enchantment\n```\n\n**Имя:** Удалить зачарование предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет зачарование с предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_enchantment(item(\"stick\"), \"enchantment\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_enchantment(\"enchantment\");\n\n//Или в сухую позиционно\n\nvariable::remove_enchantment(`variable`, item(\"stick\"), \"enchantment\");\n\n//Или в сухую по ключам\n\nvariable::remove_enchantment(variable=`variable`, item=item(\"stick\"), enchantment=\"enchantment\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**         | **Описание**                   |\n| :------------ | :--------- | :------------------------ |\n| `variable`         | Переменная      | Переменная для присвоения      |\n| `item`             | Предмет         | Предмет                        |\n| `enchantment`      | Текст           | ID зачарования                 |",".remove_enchantment":"```justcode\nvariable::remove_enchantment\n```\n\n**Имя:** Удалить зачарование предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет зачарование с предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_enchantment(item(\"stick\"), \"enchantment\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_enchantment(\"enchantment\");\n\n//Или в сухую позиционно\n\nvariable::remove_enchantment(`variable`, item(\"stick\"), \"enchantment\");\n\n//Или в сухую по ключам\n\nvariable::remove_enchantment(variable=`variable`, item=item(\"stick\"), enchantment=\"enchantment\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**         | **Описание**                   |\n| :------------ | :--------- | :------------------------ |\n| `variable`         | Переменная      | Переменная для присвоения      |\n| `item`             | Предмет         | Предмет                        |\n| `enchantment`      | Текст           | ID зачарования                 |","variable::remove_item_attribute":"```justcode\nvariable::remove_item_attribute\n```\n\n**Имя:** Удалить атрибут у предмета\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет атрибут у предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::remove_item_attribute(`variable`, item(\"stick\"), \"name_or_uuid\", \"ARMOR\");\n\n//Или от объекта\n\nitem(\"stick\").remove_item_attribute(`variable`, \"name_or_uuid\", \"ARMOR\");\n\n//Или в сухую по ключам\n\nvariable::remove_item_attribute(variable=`variable`, item=item(\"stick\"), name_or_uuid=\"name_or_uuid\", attribute=\"ARMOR\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                                                                           | **Описание**                   |\n| :------------- | :------------------------------------------------------------------------------------------- | :------------------------ |\n| `variable`          | Переменная                                                                                        | Переменная для присвоения      |\n| `item`              | Предмет                                                                                           | Предмет                        |\n| `name_or_uuid`      | Текст                                                                                             | Имя или UUID атрибута          |\n| `attribute`         | Маркер                                                                                            | Тип атрибута                   |\n|                     | **ARMOR** - Броня                                                                                 |                                |\n|                     | **ARMOR_TOUGHNESS** - Плотность защиты                                                            |                                |\n|                     | **ATTACK_DAMAGE** - Урон атаки                                                                    |                                |\n|                     | **ATTACK_KNOCKBACK** - Отталкивание от атаки                                                      |                                |\n|                     | **ATTACK_SPEED** - Скорость атаки                                                                 |                                |\n|                     | **FLYING_SPEED** - Скорость полёта                                                                |                                |\n|                     | **FOLLOW_RANGE** - Расстояние следования                                                          |                                |\n|                     | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                                |\n|                     | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                                |\n|                     | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                                |\n|                     | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                                |\n|                     | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                                |\n|                     | **GENERIC_BURNING_TIME** - Время горения                                                          |                                |\n|                     | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                                |\n|                     | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                                |\n|                     | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                                |\n|                     | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                                |\n|                     | **GENERIC_GRAVITY** - Гравитация                                                                  |                                |\n|                     | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                                |\n|                     | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                                |\n|                     | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                                |\n|                     | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                                |\n|                     | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                                |\n|                     | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                                |\n|                     | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                                |\n|                     | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                                |\n|                     | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                                |\n|                     | **GENERIC_SCALE** - Масштаб                                                                       |                                |\n|                     | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                                |\n|                     | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                                |\n|                     | **HORSE_JUMP_STRENGTH** - Сила прыжка лошади (horse.jump_strength)                                |                                |\n|                     | **KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию                                             |                                |\n|                     | **LUCK** - Удача                                                                                  |                                |\n|                     | **MAX_ABSORPTION** - Максимальное поглощение                                                      |                                |\n|                     | **MAX_HEALTH** - Максимальное здоровье                                                            |                                |\n|                     | **MOVEMENT_SPEED** - Скорость передвижения                                                        |                                |\n|                     | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                                |\n|                     | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                                |\n|                     | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                                |\n|                     | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                                |\n|                     | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                                |\n|                     | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                                |\n|                     | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                                |\n|                     | **ZOMBIE_SPAWN_REINFORCEMENTS** - Шанс подкрепления зомби (zombie.spawn_reinforcements)           |                                |",".remove_item_attribute":"```justcode\nvariable::remove_item_attribute\n```\n\n**Имя:** Удалить атрибут у предмета\\\n**Тип:** Действие без значения\\\n**Описание:** Удаляет атрибут у предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::remove_item_attribute(`variable`, item(\"stick\"), \"name_or_uuid\", \"ARMOR\");\n\n//Или от объекта\n\nitem(\"stick\").remove_item_attribute(`variable`, \"name_or_uuid\", \"ARMOR\");\n\n//Или в сухую по ключам\n\nvariable::remove_item_attribute(variable=`variable`, item=item(\"stick\"), name_or_uuid=\"name_or_uuid\", attribute=\"ARMOR\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                                                                           | **Описание**                   |\n| :------------- | :------------------------------------------------------------------------------------------- | :------------------------ |\n| `variable`          | Переменная                                                                                        | Переменная для присвоения      |\n| `item`              | Предмет                                                                                           | Предмет                        |\n| `name_or_uuid`      | Текст                                                                                             | Имя или UUID атрибута          |\n| `attribute`         | Маркер                                                                                            | Тип атрибута                   |\n|                     | **ARMOR** - Броня                                                                                 |                                |\n|                     | **ARMOR_TOUGHNESS** - Плотность защиты                                                            |                                |\n|                     | **ATTACK_DAMAGE** - Урон атаки                                                                    |                                |\n|                     | **ATTACK_KNOCKBACK** - Отталкивание от атаки                                                      |                                |\n|                     | **ATTACK_SPEED** - Скорость атаки                                                                 |                                |\n|                     | **FLYING_SPEED** - Скорость полёта                                                                |                                |\n|                     | **FOLLOW_RANGE** - Расстояние следования                                                          |                                |\n|                     | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                                |\n|                     | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                                |\n|                     | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                                |\n|                     | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                                |\n|                     | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                                |\n|                     | **GENERIC_BURNING_TIME** - Время горения                                                          |                                |\n|                     | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                                |\n|                     | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                                |\n|                     | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                                |\n|                     | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                                |\n|                     | **GENERIC_GRAVITY** - Гравитация                                                                  |                                |\n|                     | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                                |\n|                     | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                                |\n|                     | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                                |\n|                     | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                                |\n|                     | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                                |\n|                     | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                                |\n|                     | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                                |\n|                     | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                                |\n|                     | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                                |\n|                     | **GENERIC_SCALE** - Масштаб                                                                       |                                |\n|                     | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                                |\n|                     | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                                |\n|                     | **HORSE_JUMP_STRENGTH** - Сила прыжка лошади (horse.jump_strength)                                |                                |\n|                     | **KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию                                             |                                |\n|                     | **LUCK** - Удача                                                                                  |                                |\n|                     | **MAX_ABSORPTION** - Максимальное поглощение                                                      |                                |\n|                     | **MAX_HEALTH** - Максимальное здоровье                                                            |                                |\n|                     | **MOVEMENT_SPEED** - Скорость передвижения                                                        |                                |\n|                     | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                                |\n|                     | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                                |\n|                     | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                                |\n|                     | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                                |\n|                     | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                                |\n|                     | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                                |\n|                     | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                                |\n|                     | **ZOMBIE_SPAWN_REINFORCEMENTS** - Шанс подкрепления зомби (zombie.spawn_reinforcements)           |                                |","variable::remove_item_custom_model_data":"```justcode\nvariable::remove_item_custom_model_data\n```\n\n**Имя:** Удалить данные модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет данные модели предмета (CustomModelData) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_item_custom_model_data(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_item_custom_model_data();\n\n//Или в сухую позиционно\n\nvariable::remove_item_custom_model_data(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::remove_item_custom_model_data(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |",".remove_item_custom_model_data":"```justcode\nvariable::remove_item_custom_model_data\n```\n\n**Имя:** Удалить данные модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет данные модели предмета (CustomModelData) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_item_custom_model_data(item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_item_custom_model_data();\n\n//Или в сухую позиционно\n\nvariable::remove_item_custom_model_data(`variable`, item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::remove_item_custom_model_data(variable=`variable`, item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |","variable::remove_item_custom_tag":"```justcode\nvariable::remove_item_custom_tag\n```\n\n**Имя:** Удалить кастомный тег предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет кастомный тег предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_item_custom_tag(item(\"stick\"), \"tag_name\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_item_custom_tag(\"tag_name\");\n\n//Или в сухую позиционно\n\nvariable::remove_item_custom_tag(`variable`, item(\"stick\"), \"tag_name\");\n\n//Или в сухую по ключам\n\nvariable::remove_item_custom_tag(variable=`variable`, item=item(\"stick\"), tag_name=\"tag_name\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `tag_name`      | Текст           | Имя тега                       |",".remove_item_custom_tag":"```justcode\nvariable::remove_item_custom_tag\n```\n\n**Имя:** Удалить кастомный тег предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет кастомный тег предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_item_custom_tag(item(\"stick\"), \"tag_name\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_item_custom_tag(\"tag_name\");\n\n//Или в сухую позиционно\n\nvariable::remove_item_custom_tag(`variable`, item(\"stick\"), \"tag_name\");\n\n//Или в сухую по ключам\n\nvariable::remove_item_custom_tag(variable=`variable`, item=item(\"stick\"), tag_name=\"tag_name\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `tag_name`      | Текст           | Имя тега                       |","variable::remove_item_lore_line":"```justcode\nvariable::remove_item_lore_line\n```\n\n**Имя:** Удалить строку описания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет строку описания предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_item_lore_line(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_item_lore_line(1);\n\n//Или в сухую позиционно\n\nvariable::remove_item_lore_line(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::remove_item_lore_line(variable=`variable`, item=item(\"stick\"), line=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `line`          | Число           | Номер строки                   |",".remove_item_lore_line":"```justcode\nvariable::remove_item_lore_line\n```\n\n**Имя:** Удалить строку описания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет строку описания предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_item_lore_line(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_item_lore_line(1);\n\n//Или в сухую позиционно\n\nvariable::remove_item_lore_line(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::remove_item_lore_line(variable=`variable`, item=item(\"stick\"), line=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `line`          | Число           | Номер строки                   |","variable::remove_item_potion_effects":"```justcode\nvariable::remove_item_potion_effects\n```\n\n**Имя:** Удалить эффекты зелий из предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет эффекты зелий из предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_item_potion_effects([potion(\"slow_falling\"), potion(\"slow_falling\")], item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_item_potion_effects([potion(\"slow_falling\"), potion(\"slow_falling\")]);\n\n//Или в сухую позиционно\n\nvariable::remove_item_potion_effects(`variable`, [potion(\"slow_falling\"), potion(\"slow_falling\")], item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::remove_item_potion_effects(variable=`variable`, effects=[potion(\"slow_falling\"), potion(\"slow_falling\")], item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `effects`       | список[Зелье]      | Эффекты зелий                  |\n| `item`          | Предмет            | Предмет                        |",".remove_item_potion_effects":"```justcode\nvariable::remove_item_potion_effects\n```\n\n**Имя:** Удалить эффекты зелий из предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет эффекты зелий из предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_item_potion_effects([potion(\"slow_falling\"), potion(\"slow_falling\")], item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").remove_item_potion_effects([potion(\"slow_falling\"), potion(\"slow_falling\")]);\n\n//Или в сухую позиционно\n\nvariable::remove_item_potion_effects(`variable`, [potion(\"slow_falling\"), potion(\"slow_falling\")], item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::remove_item_potion_effects(variable=`variable`, effects=[potion(\"slow_falling\"), potion(\"slow_falling\")], item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `effects`       | список[Зелье]      | Эффекты зелий                  |\n| `item`          | Предмет            | Предмет                        |","variable::remove_list_duplicates":"```justcode\nvariable::remove_list_duplicates\n```\n\n**Имя:** Удалить повторяющиеся значения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет все значения, которые попадаются в списке больше одного раза.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_list_duplicates(`list`);\n\n//Или от объекта\n\n`variable` = `list`.remove_list_duplicates();\n\n//Или в сухую позиционно\n\nvariable::remove_list_duplicates(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::remove_list_duplicates(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |",".remove_list_duplicates":"```justcode\nvariable::remove_list_duplicates\n```\n\n**Имя:** Удалить повторяющиеся значения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет все значения, которые попадаются в списке больше одного раза.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_list_duplicates(`list`);\n\n//Или от объекта\n\n`variable` = `list`.remove_list_duplicates();\n\n//Или в сухую позиционно\n\nvariable::remove_list_duplicates(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::remove_list_duplicates(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |","variable::remove_list_value":"```justcode\nvariable::remove_list_value\n```\n\n**Имя:** Удалить значение из списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет указанное значение из списка.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_list_value(`list`, \"any value\", \"ALL\");\n\n//Или от объекта\n\n`variable` = `list`.remove_list_value(\"any value\", \"ALL\");\n\n//Или в сухую позиционно\n\nvariable::remove_list_value(`variable`, `list`, \"any value\", \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::remove_list_value(variable=`variable`, list=`list`, value=\"any value\", remove_mode=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                              | **Описание**                   |\n| :------------ | :------------------------------ | :------------------------ |\n| `variable`         | Переменная                           | Переменная для присвоения      |\n| `list`             | Список                               | Список                         |\n| `value`            | Любое значение                       | Значение                       |\n| `remove_mode`      | Маркер                               | Режим удаления                 |\n|                    | **ALL** - Все совпадения             |                                |\n|                    | **FIRST** - Первое совпадение        |                                |\n|                    | **LAST** - Последнее совпадение      |                                |",".remove_list_value":"```justcode\nvariable::remove_list_value\n```\n\n**Имя:** Удалить значение из списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет указанное значение из списка.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_list_value(`list`, \"any value\", \"ALL\");\n\n//Или от объекта\n\n`variable` = `list`.remove_list_value(\"any value\", \"ALL\");\n\n//Или в сухую позиционно\n\nvariable::remove_list_value(`variable`, `list`, \"any value\", \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::remove_list_value(variable=`variable`, list=`list`, value=\"any value\", remove_mode=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                              | **Описание**                   |\n| :------------ | :------------------------------ | :------------------------ |\n| `variable`         | Переменная                           | Переменная для присвоения      |\n| `list`             | Список                               | Список                         |\n| `value`            | Любое значение                       | Значение                       |\n| `remove_mode`      | Маркер                               | Режим удаления                 |\n|                    | **ALL** - Все совпадения             |                                |\n|                    | **FIRST** - Первое совпадение        |                                |\n|                    | **LAST** - Последнее совпадение      |                                |","variable::remove_list_value_at_index":"```justcode\nvariable::remove_list_value_at_index\n```\n\n**Имя:** Удалить значение из списка по индексу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет значение из списка, которое находится по указанному индексу.\n\n**Пример использования:** \n```justcode\n`variable`, `removed_value` = variable::remove_list_value_at_index(`list`, 1);\n\n//Или от объекта\n\n`variable`, `removed_value` = `list`.remove_list_value_at_index(1);\n\n//Или в сухую позиционно\n\nvariable::remove_list_value_at_index(`removed_value`, `variable`, `list`, 1);\n\n//Или в сухую по ключам\n\nvariable::remove_list_value_at_index(removed_value=`removed_value`, variable=`variable`, list=`list`, index=1);\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**         | **Описание**                   |\n| :-------------- | :--------- | :------------------------ |\n| `removed_value`      | Переменная      | Удалённое значение             |\n| `variable`           | Переменная      | Переменная для присвоения      |\n| `list`               | Список          | Список                         |\n| `index`              | Число           | Индекс                         |",".remove_list_value_at_index":"```justcode\nvariable::remove_list_value_at_index\n```\n\n**Имя:** Удалить значение из списка по индексу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет значение из списка, которое находится по указанному индексу.\n\n**Пример использования:** \n```justcode\n`variable`, `removed_value` = variable::remove_list_value_at_index(`list`, 1);\n\n//Или от объекта\n\n`variable`, `removed_value` = `list`.remove_list_value_at_index(1);\n\n//Или в сухую позиционно\n\nvariable::remove_list_value_at_index(`removed_value`, `variable`, `list`, 1);\n\n//Или в сухую по ключам\n\nvariable::remove_list_value_at_index(removed_value=`removed_value`, variable=`variable`, list=`list`, index=1);\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**         | **Описание**                   |\n| :-------------- | :--------- | :------------------------ |\n| `removed_value`      | Переменная      | Удалённое значение             |\n| `variable`           | Переменная      | Переменная для присвоения      |\n| `list`               | Список          | Список                         |\n| `index`              | Число           | Индекс                         |","variable::remove_map_entry":"```justcode\nvariable::remove_map_entry\n```\n\n**Имя:** Удалить элемент словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет элемент словаря и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable`, `removed_value` = variable::remove_map_entry(`map`, \"any value\", [\"any value\", \"any value\"]);\n\n//Или от объекта\n\n`variable`, `removed_value` = `map`.remove_map_entry(\"any value\", [\"any value\", \"any value\"]);\n\n//Или в сухую позиционно\n\nvariable::remove_map_entry(`removed_value`, `variable`, `map`, \"any value\", [\"any value\", \"any value\"]);\n\n//Или в сухую по ключам\n\nvariable::remove_map_entry(removed_value=`removed_value`, variable=`variable`, map=`map`, key=\"any value\", values=[\"any value\", \"any value\"]);\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                     | **Описание**                   |\n| :-------------- | :--------------------- | :------------------------ |\n| `removed_value`      | Переменная                  | Удалённое значение             |\n| `variable`           | Переменная                  | Переменная для присвоения      |\n| `map`                | Словарь                     | Словарь для изменения          |\n| `key`                | Любое значение              | Ключ                           |\n| `values`             | список[Любое значение]      | Значения                       |",".remove_map_entry":"```justcode\nvariable::remove_map_entry\n```\n\n**Имя:** Удалить элемент словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет элемент словаря и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable`, `removed_value` = variable::remove_map_entry(`map`, \"any value\", [\"any value\", \"any value\"]);\n\n//Или от объекта\n\n`variable`, `removed_value` = `map`.remove_map_entry(\"any value\", [\"any value\", \"any value\"]);\n\n//Или в сухую позиционно\n\nvariable::remove_map_entry(`removed_value`, `variable`, `map`, \"any value\", [\"any value\", \"any value\"]);\n\n//Или в сухую по ключам\n\nvariable::remove_map_entry(removed_value=`removed_value`, variable=`variable`, map=`map`, key=\"any value\", values=[\"any value\", \"any value\"]);\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                     | **Описание**                   |\n| :-------------- | :--------------------- | :------------------------ |\n| `removed_value`      | Переменная                  | Удалённое значение             |\n| `variable`           | Переменная                  | Переменная для присвоения      |\n| `map`                | Словарь                     | Словарь для изменения          |\n| `key`                | Любое значение              | Ключ                           |\n| `values`             | список[Любое значение]      | Значения                       |","variable::remove_text":"```justcode\nvariable::remove_text\n```\n\n**Имя:** Удалить текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет весь текст или его часть и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_text([\"remove\", \"remove\"], \"text\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = \"text\".remove_text([\"remove\", \"remove\"], \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::remove_text(`variable`, [\"remove\", \"remove\"], \"text\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::remove_text(variable=`variable`, remove=[\"remove\", \"remove\"], text=\"text\", regex=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                    | **Описание**                   |\n| :--------- | :-------------------- | :------------------------ |\n| `variable`      | Переменная                 | Переменная для присвоения      |\n| `remove`        | список[Текст]              | Текст для удаления             |\n| `text`          | Текст                      | Исходный текст                 |\n| `regex`         | Маркер                     | Регулярные выражения           |\n|                 | **FALSE** - Выключить      |                                |\n|                 | **TRUE** - Включить        |                                |",".remove_text":"```justcode\nvariable::remove_text\n```\n\n**Имя:** Удалить текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет весь текст или его часть и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::remove_text([\"remove\", \"remove\"], \"text\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = \"text\".remove_text([\"remove\", \"remove\"], \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::remove_text(`variable`, [\"remove\", \"remove\"], \"text\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::remove_text(variable=`variable`, remove=[\"remove\", \"remove\"], text=\"text\", regex=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                    | **Описание**                   |\n| :--------- | :-------------------- | :------------------------ |\n| `variable`      | Переменная                 | Переменная для присвоения      |\n| `remove`        | список[Текст]              | Текст для удаления             |\n| `text`          | Текст                      | Исходный текст                 |\n| `regex`         | Маркер                     | Регулярные выражения           |\n|                 | **FALSE** - Выключить      |                                |\n|                 | **TRUE** - Включить        |                                |","variable::repeat_text":"```justcode\nvariable::repeat_text\n```\n\n**Имя:** Повторить текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной текст, повторённый определённое количество раз.\n\n**Пример использования:** \n```justcode\n`variable` = variable::repeat_text(\"text\", 1);\n\n//Или от объекта\n\n`variable` = \"text\".repeat_text(1);\n\n//Или в сухую позиционно\n\nvariable::repeat_text(`variable`, \"text\", 1);\n\n//Или в сухую по ключам\n\nvariable::repeat_text(variable=`variable`, text=\"text\", repeat=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Текст для повторения           |\n| `repeat`        | Число           | Количество повторений          |",".repeat_text":"```justcode\nvariable::repeat_text\n```\n\n**Имя:** Повторить текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной текст, повторённый определённое количество раз.\n\n**Пример использования:** \n```justcode\n`variable` = variable::repeat_text(\"text\", 1);\n\n//Или от объекта\n\n`variable` = \"text\".repeat_text(1);\n\n//Или в сухую позиционно\n\nvariable::repeat_text(`variable`, \"text\", 1);\n\n//Или в сухую по ключам\n\nvariable::repeat_text(variable=`variable`, text=\"text\", repeat=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Текст для повторения           |\n| `repeat`        | Число           | Количество повторений          |","variable::replace_text":"```justcode\nvariable::replace_text\n```\n\n**Имя:** Заменить текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Заменяет весь текст или его часть и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::replace_text(\"text\", \"replace\", \"replacement\", \"ANY\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = \"text\".replace_text(\"replace\", \"replacement\", \"ANY\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::replace_text(`variable`, \"text\", \"replace\", \"replacement\", \"ANY\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::replace_text(variable=`variable`, text=\"text\", replace=\"replace\", replacement=\"replacement\", first=\"ANY\", ignore_case=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                            | **Описание**                   |\n| :------------ | :-------------------------------------------- | :------------------------ |\n| `variable`         | Переменная                                         | Переменная для присвоения      |\n| `text`             | Текст                                              | Исходный текст                 |\n| `replace`          | Текст                                              | Текст для замены               |\n| `replacement`      | Текст                                              | Замена                         |\n| `first`            | Маркер                                             | Количество замен               |\n|                    | **ANY** - Заменить все совпадения                  |                                |\n|                    | **FIRST** - Заменить только первое совпадение      |                                |\n| `ignore_case`      | Маркер                                             | Игнорировать регистр           |\n|                    | **FALSE** - Не игнорировать                        |                                |\n|                    | **TRUE** - Игнорировать                            |                                |",".replace_text":"```justcode\nvariable::replace_text\n```\n\n**Имя:** Заменить текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Заменяет весь текст или его часть и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::replace_text(\"text\", \"replace\", \"replacement\", \"ANY\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = \"text\".replace_text(\"replace\", \"replacement\", \"ANY\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::replace_text(`variable`, \"text\", \"replace\", \"replacement\", \"ANY\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::replace_text(variable=`variable`, text=\"text\", replace=\"replace\", replacement=\"replacement\", first=\"ANY\", ignore_case=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                                            | **Описание**                   |\n| :------------ | :-------------------------------------------- | :------------------------ |\n| `variable`         | Переменная                                         | Переменная для присвоения      |\n| `text`             | Текст                                              | Исходный текст                 |\n| `replace`          | Текст                                              | Текст для замены               |\n| `replacement`      | Текст                                              | Замена                         |\n| `first`            | Маркер                                             | Количество замен               |\n|                    | **ANY** - Заменить все совпадения                  |                                |\n|                    | **FIRST** - Заменить только первое совпадение      |                                |\n| `ignore_case`      | Маркер                                             | Игнорировать регистр           |\n|                    | **FALSE** - Не игнорировать                        |                                |\n|                    | **TRUE** - Игнорировать                            |                                |","variable::reverse_list":"```justcode\nvariable::reverse_list\n```\n\n**Имя:** Перевернуть список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Меняет порядок следования элементов на обратный.\n\n**Пример использования:** \n```justcode\n`variable` = variable::reverse_list(`list`);\n\n//Или от объекта\n\n`variable` = `list`.reverse_list();\n\n//Или в сухую позиционно\n\nvariable::reverse_list(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::reverse_list(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |",".reverse_list":"```justcode\nvariable::reverse_list\n```\n\n**Имя:** Перевернуть список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Меняет порядок следования элементов на обратный.\n\n**Пример использования:** \n```justcode\n`variable` = variable::reverse_list(`list`);\n\n//Или от объекта\n\n`variable` = `list`.reverse_list();\n\n//Или в сухую позиционно\n\nvariable::reverse_list(`variable`, `list`);\n\n//Или в сухую по ключам\n\nvariable::reverse_list(variable=`variable`, list=`list`);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |","variable::root":"```justcode\nvariable::root\n```\n\n**Имя:** Корень числа (√)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение корня с выбранным подкоренным числом и показателем.\n\n**Пример использования:** \n```justcode\n`variable` = variable::root(1, 2);\n\n//Или в сухую позиционно\n\nvariable::root(`variable`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::root(variable=`variable`, base=1, root=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `base`          | Число           | Подкоренное число              |\n| `root`          | Число           | Показатель корня               |","variable::rotate_vector_around_axis":"```justcode\nvariable::rotate_vector_around_axis\n```\n\n**Имя:** Повернуть вектор вокруг оси\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Поворачивает вектор вокруг оси на определённое значение и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::rotate_vector_around_axis(vector(0,0,0), 1, \"X\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).rotate_vector_around_axis(1, \"X\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::rotate_vector_around_axis(`variable`, vector(0,0,0), 1, \"X\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::rotate_vector_around_axis(variable=`variable`, vector=vector(0,0,0), angle=1, axis=\"X\", angle_units=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**                   |\n| :------------ | :-------------------- | :------------------------ |\n| `variable`         | Переменная                 | Переменная для присвоения      |\n| `vector`           | Вектор                     | Вектор для изменения           |\n| `angle`            | Число                      | Угол поворота                  |\n| `axis`             | Маркер                     | Тип координаты                 |\n|                    | **X** - Координата X       |                                |\n|                    | **Y** - Координата Y       |                                |\n|                    | **Z** - Координата Z       |                                |\n| `angle_units`      | Маркер                     | Тип угла                       |\n|                    | **DEGREES** - Градусы      |                                |\n|                    | **RADIANS** - Радианы      |                                |",".rotate_vector_around_axis":"```justcode\nvariable::rotate_vector_around_axis\n```\n\n**Имя:** Повернуть вектор вокруг оси\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Поворачивает вектор вокруг оси на определённое значение и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::rotate_vector_around_axis(vector(0,0,0), 1, \"X\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).rotate_vector_around_axis(1, \"X\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::rotate_vector_around_axis(`variable`, vector(0,0,0), 1, \"X\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::rotate_vector_around_axis(variable=`variable`, vector=vector(0,0,0), angle=1, axis=\"X\", angle_units=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**                   |\n| :------------ | :-------------------- | :------------------------ |\n| `variable`         | Переменная                 | Переменная для присвоения      |\n| `vector`           | Вектор                     | Вектор для изменения           |\n| `angle`            | Число                      | Угол поворота                  |\n| `axis`             | Маркер                     | Тип координаты                 |\n|                    | **X** - Координата X       |                                |\n|                    | **Y** - Координата Y       |                                |\n|                    | **Z** - Координата Z       |                                |\n| `angle_units`      | Маркер                     | Тип угла                       |\n|                    | **DEGREES** - Градусы      |                                |\n|                    | **RADIANS** - Радианы      |                                |","variable::rotate_vector_around_vector":"```justcode\nvariable::rotate_vector_around_vector\n```\n\n**Имя:** Повернуть вектор вокруг другого вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Поворачивает вектор вокруг другого вектора на определённое значение и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::rotate_vector_around_vector(vector(0,0,0), vector(0,0,0), 1, \"DEGREES\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).rotate_vector_around_vector(vector(0,0,0), 1, \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::rotate_vector_around_vector(`variable`, vector(0,0,0), vector(0,0,0), 1, \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::rotate_vector_around_vector(variable=`variable`, rotating_vector=vector(0,0,0), axis_vector=vector(0,0,0), angle=1, angle_units=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                    | **Описание**                   |\n| :---------------- | :-------------------- | :------------------------ |\n| `variable`             | Переменная                 | Переменная для присвоения      |\n| `rotating_vector`      | Вектор                     | Вектор для изменения           |\n| `axis_vector`          | Вектор                     | Осевой вектор                  |\n| `angle`                | Число                      | Угол поворота                  |\n| `angle_units`          | Маркер                     | Тип угла                       |\n|                        | **DEGREES** - Градусы      |                                |\n|                        | **RADIANS** - Радианы      |                                |",".rotate_vector_around_vector":"```justcode\nvariable::rotate_vector_around_vector\n```\n\n**Имя:** Повернуть вектор вокруг другого вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Поворачивает вектор вокруг другого вектора на определённое значение и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::rotate_vector_around_vector(vector(0,0,0), vector(0,0,0), 1, \"DEGREES\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).rotate_vector_around_vector(vector(0,0,0), 1, \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::rotate_vector_around_vector(`variable`, vector(0,0,0), vector(0,0,0), 1, \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::rotate_vector_around_vector(variable=`variable`, rotating_vector=vector(0,0,0), axis_vector=vector(0,0,0), angle=1, angle_units=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                    | **Описание**                   |\n| :---------------- | :-------------------- | :------------------------ |\n| `variable`             | Переменная                 | Переменная для присвоения      |\n| `rotating_vector`      | Вектор                     | Вектор для изменения           |\n| `axis_vector`          | Вектор                     | Осевой вектор                  |\n| `angle`                | Число                      | Угол поворота                  |\n| `angle_units`          | Маркер                     | Тип угла                       |\n|                        | **DEGREES** - Градусы      |                                |\n|                        | **RADIANS** - Радианы      |                                |","variable::round":"```justcode\nvariable::round\n```\n\n**Имя:** Округлить число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной округлённое выбранным способом число.\n\n**Пример использования:** \n```justcode\n`variable` = variable::round(1, 2, \"CEIL\");\n\n//Или от объекта\n\n`variable` = (1).round(2, \"CEIL\");\n\n//Или в сухую позиционно\n\nvariable::round(`variable`, 1, 2, \"CEIL\");\n\n//Или в сухую по ключам\n\nvariable::round(variable=`variable`, number=1, precision=2, round_type=\"CEIL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                 | **Описание**                           |\n| :----------- | :--------------------------------- | :-------------------------------- |\n| `variable`        | Переменная                              | Переменная для присвоения              |\n| `number`          | Число                                   | Число для округления                   |\n| `precision`       | Число                                   | Количество цифр после целой части      |\n| `round_type`      | Маркер                                  | Способ округления                      |\n|                   | **CEIL** - Округление до большего       |                                        |\n|                   | **FLOOR** - Округление до меньшего      |                                        |\n|                   | **ROUND** - Обычное округление          |                                        |",".round":"```justcode\nvariable::round\n```\n\n**Имя:** Округлить число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной округлённое выбранным способом число.\n\n**Пример использования:** \n```justcode\n`variable` = variable::round(1, 2, \"CEIL\");\n\n//Или от объекта\n\n`variable` = (1).round(2, \"CEIL\");\n\n//Или в сухую позиционно\n\nvariable::round(`variable`, 1, 2, \"CEIL\");\n\n//Или в сухую по ключам\n\nvariable::round(variable=`variable`, number=1, precision=2, round_type=\"CEIL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                                 | **Описание**                           |\n| :----------- | :--------------------------------- | :-------------------------------- |\n| `variable`        | Переменная                              | Переменная для присвоения              |\n| `number`          | Число                                   | Число для округления                   |\n| `precision`       | Число                                   | Количество цифр после целой части      |\n| `round_type`      | Маркер                                  | Способ округления                      |\n|                   | **CEIL** - Округление до большего       |                                        |\n|                   | **FLOOR** - Округление до меньшего      |                                        |\n|                   | **ROUND** - Обычное округление          |                                        |","variable::set_all_coordinates":"```justcode\nvariable::set_all_coordinates\n```\n\n**Имя:** Создать местоположение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт местоположение из указанных координат.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_all_coordinates(1, 2, 3, 4, 5);\n\n//Или в сухую позиционно\n\nvariable::set_all_coordinates(`variable`, 1, 2, 3, 4, 5);\n\n//Или в сухую по ключам\n\nvariable::set_all_coordinates(variable=`variable`, x=1, y=2, z=3, yaw=4, pitch=5);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `x`             | Число           | Координата X                   |\n| `y`             | Число           | Координата Y                   |\n| `z`             | Число           | Координата Z                   |\n| `yaw`           | Число           | Горизонтальный поворот         |\n| `pitch`         | Число           | Вертикальный поворот           |","variable::set_armor_trim":"```justcode\nvariable::set_armor_trim\n```\n\n**Имя:** Установить броне шаблон\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает броне указанный шаблон и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::set_armor_trim(`variable`, item(\"stick\"), item(\"stick\"), item(\"stick\"));\n\n//Или от объекта\n\nitem(\"stick\").set_armor_trim(`variable`, item(\"stick\"), item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_armor_trim(variable=`variable`, armor=item(\"stick\"), material=item(\"stick\"), pattern=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `armor`         | Предмет         | Броня                          |\n| `material`      | Предмет         | Материал шаблона               |\n| `pattern`       | Предмет         | Шаблон                         |",".set_armor_trim":"```justcode\nvariable::set_armor_trim\n```\n\n**Имя:** Установить броне шаблон\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает броне указанный шаблон и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::set_armor_trim(`variable`, item(\"stick\"), item(\"stick\"), item(\"stick\"));\n\n//Или от объекта\n\nitem(\"stick\").set_armor_trim(`variable`, item(\"stick\"), item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_armor_trim(variable=`variable`, armor=item(\"stick\"), material=item(\"stick\"), pattern=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `armor`         | Предмет         | Броня                          |\n| `material`      | Предмет         | Материал шаблона               |\n| `pattern`       | Предмет         | Шаблон                         |","variable::set_book_page":"```justcode\nvariable::set_book_page\n```\n\n**Имя:** Установить текст книги на странице\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает текст книги на определённой странице и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_book_page(item(\"stick\"), \"text\", 1, \"APPEND\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_book_page(\"text\", 1, \"APPEND\");\n\n//Или в сухую позиционно\n\nvariable::set_book_page(`variable`, item(\"stick\"), \"text\", 1, \"APPEND\");\n\n//Или в сухую по ключам\n\nvariable::set_book_page(variable=`variable`, book=item(\"stick\"), text=\"text\", page=1, mode=\"APPEND\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                      | **Описание**                   |\n| :--------- | :---------------------- | :------------------------ |\n| `variable`      | Переменная                   | Переменная для присвоения      |\n| `book`          | Предмет                      | Книга для изменения            |\n| `text`          | Текст                        | Новый текст                    |\n| `page`          | Число                        | Номер страницы                 |\n| `mode`          | Маркер                       | Режим установки                |\n|                 | **APPEND** - Добавление      |                                |\n|                 | **MERGE** - Замена           |                                |",".set_book_page":"```justcode\nvariable::set_book_page\n```\n\n**Имя:** Установить текст книги на странице\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает текст книги на определённой странице и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_book_page(item(\"stick\"), \"text\", 1, \"APPEND\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_book_page(\"text\", 1, \"APPEND\");\n\n//Или в сухую позиционно\n\nvariable::set_book_page(`variable`, item(\"stick\"), \"text\", 1, \"APPEND\");\n\n//Или в сухую по ключам\n\nvariable::set_book_page(variable=`variable`, book=item(\"stick\"), text=\"text\", page=1, mode=\"APPEND\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                      | **Описание**                   |\n| :--------- | :---------------------- | :------------------------ |\n| `variable`      | Переменная                   | Переменная для присвоения      |\n| `book`          | Предмет                      | Книга для изменения            |\n| `text`          | Текст                        | Новый текст                    |\n| `page`          | Число                        | Номер страницы                 |\n| `mode`          | Маркер                       | Режим установки                |\n|                 | **APPEND** - Добавление      |                                |\n|                 | **MERGE** - Замена           |                                |","variable::set_book_pages":"```justcode\nvariable::set_book_pages\n```\n\n**Имя:** Установить текст книги\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает текст книги и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_book_pages(item(\"stick\"), [\"text\", \"text\"]);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_book_pages([\"text\", \"text\"]);\n\n//Или в сухую позиционно\n\nvariable::set_book_pages(`variable`, item(\"stick\"), [\"text\", \"text\"]);\n\n//Или в сухую по ключам\n\nvariable::set_book_pages(variable=`variable`, book=item(\"stick\"), text=[\"text\", \"text\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `book`          | Предмет            | Книга для изменения            |\n| `text`          | список[Текст]      | Новый текст                    |",".set_book_pages":"```justcode\nvariable::set_book_pages\n```\n\n**Имя:** Установить текст книги\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает текст книги и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_book_pages(item(\"stick\"), [\"text\", \"text\"]);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_book_pages([\"text\", \"text\"]);\n\n//Или в сухую позиционно\n\nvariable::set_book_pages(`variable`, item(\"stick\"), [\"text\", \"text\"]);\n\n//Или в сухую по ключам\n\nvariable::set_book_pages(variable=`variable`, book=item(\"stick\"), text=[\"text\", \"text\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `book`          | Предмет            | Книга для изменения            |\n| `text`          | список[Текст]      | Новый текст                    |","variable::set_bundle_items":"```justcode\nvariable::set_bundle_items\n```\n\n**Имя:** Изменить содержимое мешка\\\n**Тип:** Действие без значения\\\n**Описание:** Изменяет содержимое мешка и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::set_bundle_items(`variable`, item(\"stick\"), [item(\"stick\"), item(\"stick\")], \"ADD\");\n\n//Или от объекта\n\nitem(\"stick\").set_bundle_items(`variable`, [item(\"stick\"), item(\"stick\")], \"ADD\");\n\n//Или в сухую по ключам\n\nvariable::set_bundle_items(variable=`variable`, bundle=item(\"stick\"), items=[item(\"stick\"), item(\"stick\")], setting_mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                   | **Описание**                   |\n| :------------- | :------------------- | :------------------------ |\n| `variable`          | Переменная                | Переменная для присвоения      |\n| `bundle`            | Предмет                   | Мешок                          |\n| `items`             | список[Предмет]           | Предметы для изменения         |\n| `setting_mode`      | Маркер                    | Тип изменения                  |\n|                     | **ADD** - Добавить        |                                |\n|                     | **REMOVE** - Удалить      |                                |\n|                     | **SET** - Установить      |                                |",".set_bundle_items":"```justcode\nvariable::set_bundle_items\n```\n\n**Имя:** Изменить содержимое мешка\\\n**Тип:** Действие без значения\\\n**Описание:** Изменяет содержимое мешка и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\nvariable::set_bundle_items(`variable`, item(\"stick\"), [item(\"stick\"), item(\"stick\")], \"ADD\");\n\n//Или от объекта\n\nitem(\"stick\").set_bundle_items(`variable`, [item(\"stick\"), item(\"stick\")], \"ADD\");\n\n//Или в сухую по ключам\n\nvariable::set_bundle_items(variable=`variable`, bundle=item(\"stick\"), items=[item(\"stick\"), item(\"stick\")], setting_mode=\"ADD\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                   | **Описание**                   |\n| :------------- | :------------------- | :------------------------ |\n| `variable`          | Переменная                | Переменная для присвоения      |\n| `bundle`            | Предмет                   | Мешок                          |\n| `items`             | список[Предмет]           | Предметы для изменения         |\n| `setting_mode`      | Маркер                    | Тип изменения                  |\n|                     | **ADD** - Добавить        |                                |\n|                     | **REMOVE** - Удалить      |                                |\n|                     | **SET** - Установить      |                                |","variable::set_compass_lodestone":"```justcode\nvariable::set_compass_lodestone\n```\n\n**Имя:** Установить местоположение магнетита\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает компасу местоположение магнетита и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_compass_lodestone(item(\"stick\"), location(0,0,0,0,0), \"FALSE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_compass_lodestone(location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::set_compass_lodestone(`variable`, item(\"stick\"), location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::set_compass_lodestone(variable=`variable`, item=item(\"stick\"), location=location(0,0,0,0,0), tracked=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                       | **Описание**                             |\n| :--------- | :----------------------- | :---------------------------------- |\n| `variable`      | Переменная                    | Переменная для присвоения                |\n| `item`          | Предмет                       | Компас                                   |\n| `location`      | Местоположение                | Местоположение магнетита                 |\n| `tracked`       | Маркер                        | Наличие магнетита на местоположении      |\n|                 | **FALSE** - Не проверять      |                                          |\n|                 | **TRUE** - Проверять          |                                          |",".set_compass_lodestone":"```justcode\nvariable::set_compass_lodestone\n```\n\n**Имя:** Установить местоположение магнетита\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает компасу местоположение магнетита и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_compass_lodestone(item(\"stick\"), location(0,0,0,0,0), \"FALSE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_compass_lodestone(location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::set_compass_lodestone(`variable`, item(\"stick\"), location(0,0,0,0,0), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::set_compass_lodestone(variable=`variable`, item=item(\"stick\"), location=location(0,0,0,0,0), tracked=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                       | **Описание**                             |\n| :--------- | :----------------------- | :---------------------------------- |\n| `variable`      | Переменная                    | Переменная для присвоения                |\n| `item`          | Предмет                       | Компас                                   |\n| `location`      | Местоположение                | Местоположение магнетита                 |\n| `tracked`       | Маркер                        | Наличие магнетита на местоположении      |\n|                 | **FALSE** - Не проверять      |                                          |\n|                 | **TRUE** - Проверять          |                                          |","variable::set_component_children":"```justcode\nvariable::set_component_children\n```\n\n**Имя:** Установить дочерние части стилизуемому тексту\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной стилизуемый текст с указанными дочерними частями.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_children(\"component\", [\"children\", \"children\"]);\n\n//Или от объекта\n\n`variable` = \"component\".set_component_children([\"children\", \"children\"]);\n\n//Или в сухую позиционно\n\nvariable::set_component_children(`variable`, \"component\", [\"children\", \"children\"]);\n\n//Или в сухую по ключам\n\nvariable::set_component_children(variable=`variable`, component=\"component\", children=[\"children\", \"children\"]);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**            | **Описание**                     |\n| :---------- | :------------ | :-------------------------- |\n| `variable`       | Переменная         | Переменная для присвоения        |\n| `component`      | Текст              | Основный стилизуемый текст       |\n| `children`       | список[Текст]      | Дочерние стилизуемые тексты      |",".set_component_children":"```justcode\nvariable::set_component_children\n```\n\n**Имя:** Установить дочерние части стилизуемому тексту\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной стилизуемый текст с указанными дочерними частями.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_children(\"component\", [\"children\", \"children\"]);\n\n//Или от объекта\n\n`variable` = \"component\".set_component_children([\"children\", \"children\"]);\n\n//Или в сухую позиционно\n\nvariable::set_component_children(`variable`, \"component\", [\"children\", \"children\"]);\n\n//Или в сухую по ключам\n\nvariable::set_component_children(variable=`variable`, component=\"component\", children=[\"children\", \"children\"]);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**            | **Описание**                     |\n| :---------- | :------------ | :-------------------------- |\n| `variable`       | Переменная         | Переменная для присвоения        |\n| `component`      | Текст              | Основный стилизуемый текст       |\n| `children`       | список[Текст]      | Дочерние стилизуемые тексты      |","variable::set_component_click":"```justcode\nvariable::set_component_click\n```\n\n**Имя:** Установить стилизуемому тексту действие при нажатии\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту действие при нажатии и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_click(\"component\", \"value\", \"CHANGE_PAGE\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_click(\"value\", \"CHANGE_PAGE\");\n\n//Или в сухую позиционно\n\nvariable::set_component_click(`variable`, \"component\", \"value\", \"CHANGE_PAGE\");\n\n//Или в сухую по ключам\n\nvariable::set_component_click(variable=`variable`, component=\"component\", value=\"value\", click_action=\"CHANGE_PAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                                 | **Описание**                   |\n| :------------- | :------------------------------------------------- | :------------------------ |\n| `variable`          | Переменная                                              | Переменная для присвоения      |\n| `component`         | Текст                                                   | Стилизуемый текст              |\n| `value`             | Текст                                                   | Значение действия              |\n| `click_action`      | Маркер                                                  | Действие при нажатии           |\n|                     | **CHANGE_PAGE** - Изменить страницу книги               |                                |\n|                     | **COPY_TO_CLIPBOARD** - Скопировать в буфер обмена      |                                |\n|                     | **COPY_TO_CLIPBORD** - Скопировать в буфер обмена       |                                |\n|                     | **OPEN_URL** - Открыть ссылку                           |                                |\n|                     | **SUGGEST_COMMAND** - Предложить сообщение              |                                |",".set_component_click":"```justcode\nvariable::set_component_click\n```\n\n**Имя:** Установить стилизуемому тексту действие при нажатии\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту действие при нажатии и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_click(\"component\", \"value\", \"CHANGE_PAGE\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_click(\"value\", \"CHANGE_PAGE\");\n\n//Или в сухую позиционно\n\nvariable::set_component_click(`variable`, \"component\", \"value\", \"CHANGE_PAGE\");\n\n//Или в сухую по ключам\n\nvariable::set_component_click(variable=`variable`, component=\"component\", value=\"value\", click_action=\"CHANGE_PAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                                                 | **Описание**                   |\n| :------------- | :------------------------------------------------- | :------------------------ |\n| `variable`          | Переменная                                              | Переменная для присвоения      |\n| `component`         | Текст                                                   | Стилизуемый текст              |\n| `value`             | Текст                                                   | Значение действия              |\n| `click_action`      | Маркер                                                  | Действие при нажатии           |\n|                     | **CHANGE_PAGE** - Изменить страницу книги               |                                |\n|                     | **COPY_TO_CLIPBOARD** - Скопировать в буфер обмена      |                                |\n|                     | **COPY_TO_CLIPBORD** - Скопировать в буфер обмена       |                                |\n|                     | **OPEN_URL** - Открыть ссылку                           |                                |\n|                     | **SUGGEST_COMMAND** - Предложить сообщение              |                                |","variable::set_component_decorations":"```justcode\nvariable::set_component_decorations\n```\n\n**Имя:** Установить декорации стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает декорации указанному стилизуемому тексту и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_decorations(\"component\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_decorations(\"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::set_component_decorations(`variable`, \"component\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::set_component_decorations(variable=`variable`, component=\"component\", bold=\"FALSE\", italic=\"FALSE\", underlined=\"FALSE\", strikethrough=\"FALSE\", obfuscated=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                           | **Описание**                   |\n| :-------------- | :--------------------------- | :------------------------ |\n| `variable`           | Переменная                        | Переменная для присвоения      |\n| `component`          | Текст                             | Стилизуемый текст              |\n| `bold`               | Маркер                            | Жирный текст                   |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |\n| `italic`             | Маркер                            | Наклоненный текст              |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |\n| `underlined`         | Маркер                            | Подчёркнутый текст             |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |\n| `strikethrough`      | Маркер                            | Перечёркнутый текст            |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |\n| `obfuscated`         | Маркер                            | Зашифрованный текст            |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |",".set_component_decorations":"```justcode\nvariable::set_component_decorations\n```\n\n**Имя:** Установить декорации стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает декорации указанному стилизуемому тексту и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_decorations(\"component\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_decorations(\"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::set_component_decorations(`variable`, \"component\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::set_component_decorations(variable=`variable`, component=\"component\", bold=\"FALSE\", italic=\"FALSE\", underlined=\"FALSE\", strikethrough=\"FALSE\", obfuscated=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                           | **Описание**                   |\n| :-------------- | :--------------------------- | :------------------------ |\n| `variable`           | Переменная                        | Переменная для присвоения      |\n| `component`          | Текст                             | Стилизуемый текст              |\n| `bold`               | Маркер                            | Жирный текст                   |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |\n| `italic`             | Маркер                            | Наклоненный текст              |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |\n| `underlined`         | Маркер                            | Подчёркнутый текст             |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |\n| `strikethrough`      | Маркер                            | Перечёркнутый текст            |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |\n| `obfuscated`         | Маркер                            | Зашифрованный текст            |\n|                      | **FALSE** - Нет                   |                                |\n|                      | **NOT_SET** - Не установлено      |                                |\n|                      | **TRUE** - Да                     |                                |","variable::set_component_entity_hover":"```justcode\nvariable::set_component_entity_hover\n```\n\n**Имя:** Установить стилизуемому тексту сущность при наведении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту сущность, отображаемую при наведении и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_entity_hover(\"component\", \"name_or_uuid\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_entity_hover(\"name_or_uuid\");\n\n//Или в сухую позиционно\n\nvariable::set_component_entity_hover(`variable`, \"component\", \"name_or_uuid\");\n\n//Или в сухую по ключам\n\nvariable::set_component_entity_hover(variable=`variable`, component=\"component\", name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**         | **Описание**                   |\n| :------------- | :--------- | :------------------------ |\n| `variable`          | Переменная      | Переменная для присвоения      |\n| `component`         | Текст           | Стилизуемый текст              |\n| `name_or_uuid`      | Текст           | Имя или UUID сущности          |",".set_component_entity_hover":"```justcode\nvariable::set_component_entity_hover\n```\n\n**Имя:** Установить стилизуемому тексту сущность при наведении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту сущность, отображаемую при наведении и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_entity_hover(\"component\", \"name_or_uuid\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_entity_hover(\"name_or_uuid\");\n\n//Или в сухую позиционно\n\nvariable::set_component_entity_hover(`variable`, \"component\", \"name_or_uuid\");\n\n//Или в сухую по ключам\n\nvariable::set_component_entity_hover(variable=`variable`, component=\"component\", name_or_uuid=\"name_or_uuid\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**         | **Описание**                   |\n| :------------- | :--------- | :------------------------ |\n| `variable`          | Переменная      | Переменная для присвоения      |\n| `component`         | Текст           | Стилизуемый текст              |\n| `name_or_uuid`      | Текст           | Имя или UUID сущности          |","variable::set_component_font":"```justcode\nvariable::set_component_font\n```\n\n**Имя:** Установить шрифт стилизуемому тексту\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает шрифт указанному стилизуемому тексту и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_font(\"component\", \"namespace\", \"value\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_font(\"namespace\", \"value\");\n\n//Или в сухую позиционно\n\nvariable::set_component_font(`variable`, \"component\", \"namespace\", \"value\");\n\n//Или в сухую по ключам\n\nvariable::set_component_font(variable=`variable`, component=\"component\", namespace=\"namespace\", value=\"value\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                                |\n| :---------- | :--------- | :------------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                   |\n| `component`      | Текст           | Стилизуемый текст                           |\n| `namespace`      | Текст           | Пространство имён (minecraft\\: и т.п.)      |\n| `value`          | Текст           | ID шрифта                                   |",".set_component_font":"```justcode\nvariable::set_component_font\n```\n\n**Имя:** Установить шрифт стилизуемому тексту\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает шрифт указанному стилизуемому тексту и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_font(\"component\", \"namespace\", \"value\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_font(\"namespace\", \"value\");\n\n//Или в сухую позиционно\n\nvariable::set_component_font(`variable`, \"component\", \"namespace\", \"value\");\n\n//Или в сухую по ключам\n\nvariable::set_component_font(variable=`variable`, component=\"component\", namespace=\"namespace\", value=\"value\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                                |\n| :---------- | :--------- | :------------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                   |\n| `component`      | Текст           | Стилизуемый текст                           |\n| `namespace`      | Текст           | Пространство имён (minecraft\\: и т.п.)      |\n| `value`          | Текст           | ID шрифта                                   |","variable::set_component_hex_color":"```justcode\nvariable::set_component_hex_color\n```\n\n**Имя:** Установить HEX-цвет стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает HEX-цвет указанному стилизуемому тексту и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_hex_color(\"component\", \"color\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_hex_color(\"color\");\n\n//Или в сухую позиционно\n\nvariable::set_component_hex_color(`variable`, \"component\", \"color\");\n\n//Или в сухую по ключам\n\nvariable::set_component_hex_color(variable=`variable`, component=\"component\", color=\"color\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |\n| `color`          | Текст           | HEX-цвет                       |",".set_component_hex_color":"```justcode\nvariable::set_component_hex_color\n```\n\n**Имя:** Установить HEX-цвет стилизуемого текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает HEX-цвет указанному стилизуемому тексту и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_hex_color(\"component\", \"color\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_hex_color(\"color\");\n\n//Или в сухую позиционно\n\nvariable::set_component_hex_color(`variable`, \"component\", \"color\");\n\n//Или в сухую по ключам\n\nvariable::set_component_hex_color(variable=`variable`, component=\"component\", color=\"color\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |\n| `color`          | Текст           | HEX-цвет                       |","variable::set_component_hover":"```justcode\nvariable::set_component_hover\n```\n\n**Имя:** Установить стилизуемому тексту текст при наведении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту текст, отображаемый при наведении и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_hover(\"component\", \"hover\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_hover(\"hover\");\n\n//Или в сухую позиционно\n\nvariable::set_component_hover(`variable`, \"component\", \"hover\");\n\n//Или в сухую по ключам\n\nvariable::set_component_hover(variable=`variable`, component=\"component\", hover=\"hover\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                                       |\n| :---------- | :--------- | :-------------------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                          |\n| `component`      | Текст           | Стилизуемый текст                                  |\n| `hover`          | Текст           | Стилизуемый текст, отображаемый при наведении      |",".set_component_hover":"```justcode\nvariable::set_component_hover\n```\n\n**Имя:** Установить стилизуемому тексту текст при наведении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту текст, отображаемый при наведении и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_hover(\"component\", \"hover\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_hover(\"hover\");\n\n//Или в сухую позиционно\n\nvariable::set_component_hover(`variable`, \"component\", \"hover\");\n\n//Или в сухую по ключам\n\nvariable::set_component_hover(variable=`variable`, component=\"component\", hover=\"hover\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                                       |\n| :---------- | :--------- | :-------------------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                          |\n| `component`      | Текст           | Стилизуемый текст                                  |\n| `hover`          | Текст           | Стилизуемый текст, отображаемый при наведении      |","variable::set_component_insertion":"```justcode\nvariable::set_component_insertion\n```\n\n**Имя:** Установить стилизуемому тексту предлагаемое сообщение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту предлагаемое сообщение при нажатии с Shift и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_insertion(\"component\", \"insertion\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_insertion(\"insertion\");\n\n//Или в сухую позиционно\n\nvariable::set_component_insertion(`variable`, \"component\", \"insertion\");\n\n//Или в сухую по ключам\n\nvariable::set_component_insertion(variable=`variable`, component=\"component\", insertion=\"insertion\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |\n| `insertion`      | Текст           | Предлагаемое сообщение         |",".set_component_insertion":"```justcode\nvariable::set_component_insertion\n```\n\n**Имя:** Установить стилизуемому тексту предлагаемое сообщение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту предлагаемое сообщение при нажатии с Shift и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_insertion(\"component\", \"insertion\");\n\n//Или от объекта\n\n`variable` = \"component\".set_component_insertion(\"insertion\");\n\n//Или в сухую позиционно\n\nvariable::set_component_insertion(`variable`, \"component\", \"insertion\");\n\n//Или в сухую по ключам\n\nvariable::set_component_insertion(variable=`variable`, component=\"component\", insertion=\"insertion\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `component`      | Текст           | Стилизуемый текст              |\n| `insertion`      | Текст           | Предлагаемое сообщение         |","variable::set_component_item_hover":"```justcode\nvariable::set_component_item_hover\n```\n\n**Имя:** Установить стилизуемому тексту предмет при наведении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту предмет, отображаемый при наведении и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_item_hover(\"component\", item(\"stick\"));\n\n//Или от объекта\n\n`variable` = \"component\".set_component_item_hover(item(\"stick\"));\n\n//Или в сухую позиционно\n\nvariable::set_component_item_hover(`variable`, \"component\", item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_component_item_hover(variable=`variable`, component=\"component\", hover=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                             |\n| :---------- | :--------- | :---------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                |\n| `component`      | Текст           | Стилизуемый текст                        |\n| `hover`          | Предмет         | Предмет, отображаемый при наведении      |",".set_component_item_hover":"```justcode\nvariable::set_component_item_hover\n```\n\n**Имя:** Установить стилизуемому тексту предмет при наведении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанному стилизуемому тексту предмет, отображаемый при наведении и присваивает его к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_component_item_hover(\"component\", item(\"stick\"));\n\n//Или от объекта\n\n`variable` = \"component\".set_component_item_hover(item(\"stick\"));\n\n//Или в сухую позиционно\n\nvariable::set_component_item_hover(`variable`, \"component\", item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_component_item_hover(variable=`variable`, component=\"component\", hover=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                             |\n| :---------- | :--------- | :---------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                |\n| `component`      | Текст           | Стилизуемый текст                        |\n| `hover`          | Предмет         | Предмет, отображаемый при наведении      |","variable::set_coordinate":"```justcode\nvariable::set_coordinate\n```\n\n**Имя:** Установить координату местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает значение выбранной координаты в местоположение и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_coordinate(location(0,0,0,0,0), 1, \"PITCH\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).set_coordinate(1, \"PITCH\");\n\n//Или в сухую позиционно\n\nvariable::set_coordinate(`variable`, location(0,0,0,0,0), 1, \"PITCH\");\n\n//Или в сухую по ключам\n\nvariable::set_coordinate(variable=`variable`, location=location(0,0,0,0,0), coordinate=1, type=\"PITCH\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                               | **Описание**                      |\n| :----------- | :------------------------------- | :--------------------------- |\n| `variable`        | Переменная                            | Переменная для присвоения         |\n| `location`        | Местоположение                        | Местоположение для установки      |\n| `coordinate`      | Число                                 | Значение координаты               |\n| `type`            | Маркер                                | Тип координаты                    |\n|                   | **PITCH** - Вертикальный поворот      |                                   |\n|                   | **X** - Ось X                         |                                   |\n|                   | **Y** - Ось Y                         |                                   |\n|                   | **YAW** - Горизонтальный поворот      |                                   |\n|                   | **Z** - Ось Z                         |                                   |",".set_coordinate":"```justcode\nvariable::set_coordinate\n```\n\n**Имя:** Установить координату местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает значение выбранной координаты в местоположение и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_coordinate(location(0,0,0,0,0), 1, \"PITCH\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).set_coordinate(1, \"PITCH\");\n\n//Или в сухую позиционно\n\nvariable::set_coordinate(`variable`, location(0,0,0,0,0), 1, \"PITCH\");\n\n//Или в сухую по ключам\n\nvariable::set_coordinate(variable=`variable`, location=location(0,0,0,0,0), coordinate=1, type=\"PITCH\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                               | **Описание**                      |\n| :----------- | :------------------------------- | :--------------------------- |\n| `variable`        | Переменная                            | Переменная для присвоения         |\n| `location`        | Местоположение                        | Местоположение для установки      |\n| `coordinate`      | Число                                 | Значение координаты               |\n| `type`            | Маркер                                | Тип координаты                    |\n|                   | **PITCH** - Вертикальный поворот      |                                   |\n|                   | **X** - Ось X                         |                                   |\n|                   | **Y** - Ось Y                         |                                   |\n|                   | **YAW** - Горизонтальный поворот      |                                   |\n|                   | **Z** - Ось Z                         |                                   |","variable::set_item_amount":"```justcode\nvariable::set_item_amount\n```\n\n**Имя:** Установить количество предметов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает количество предметов в стаке.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_amount(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_amount(1);\n\n//Или в сухую позиционно\n\nvariable::set_item_amount(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_item_amount(variable=`variable`, item=item(\"stick\"), amount=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `amount`        | Число           | Количество                     |",".set_item_amount":"```justcode\nvariable::set_item_amount\n```\n\n**Имя:** Установить количество предметов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает количество предметов в стаке.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_amount(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_amount(1);\n\n//Или в сухую позиционно\n\nvariable::set_item_amount(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_item_amount(variable=`variable`, item=item(\"stick\"), amount=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `amount`        | Число           | Количество                     |","variable::set_item_attribute":"```justcode\nvariable::set_item_attribute\n```\n\n**Имя:** Добавить атрибут предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Добавляет определённый атрибут предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_attribute(item(\"stick\"), 1, \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_attribute(1, \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или в сухую позиционно\n\nvariable::set_item_attribute(`variable`, item(\"stick\"), 1, \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или в сухую по ключам\n\nvariable::set_item_attribute(variable=`variable`, item=item(\"stick\"), amount=1, name=\"name\", attribute=\"ARMOR\", slot=\"ALL\", operation=\"ADD_NUMBER\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                                                                                           | **Описание**                   |\n| :---------- | :------------------------------------------------------------------------------------------- | :------------------------ |\n| `variable`       | Переменная                                                                                        | Переменная для присвоения      |\n| `item`           | Предмет                                                                                           | Предмет                        |\n| `amount`         | Число                                                                                             | Значение атрибута              |\n| `name`           | Текст                                                                                             | Имя атрибута                   |\n| `attribute`      | Маркер                                                                                            | Тип атрибута                   |\n|                  | **ARMOR** - Броня                                                                                 |                                |\n|                  | **ARMOR_TOUGHNESS** - Плотность защиты                                                            |                                |\n|                  | **ATTACK_DAMAGE** - Урон атаки                                                                    |                                |\n|                  | **ATTACK_KNOCKBACK** - Отталкивание от атаки                                                      |                                |\n|                  | **ATTACK_SPEED** - Скорость атаки                                                                 |                                |\n|                  | **FLYING_SPEED** - Скорость полёта                                                                |                                |\n|                  | **FOLLOW_RANGE** - Расстояние следования                                                          |                                |\n|                  | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                                |\n|                  | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                                |\n|                  | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                                |\n|                  | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                                |\n|                  | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                                |\n|                  | **GENERIC_BURNING_TIME** - Время горения                                                          |                                |\n|                  | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                                |\n|                  | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                                |\n|                  | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                                |\n|                  | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                                |\n|                  | **GENERIC_GRAVITY** - Гравитация                                                                  |                                |\n|                  | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                                |\n|                  | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                                |\n|                  | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                                |\n|                  | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                                |\n|                  | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                                |\n|                  | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                                |\n|                  | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                                |\n|                  | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                                |\n|                  | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                                |\n|                  | **GENERIC_SCALE** - Масштаб                                                                       |                                |\n|                  | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                                |\n|                  | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                                |\n|                  | **HORSE_JUMP_STRENGTH** - Сила прыжка лошади (horse.jump_strength)                                |                                |\n|                  | **KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию                                             |                                |\n|                  | **LUCK** - Удача                                                                                  |                                |\n|                  | **MAX_ABSORPTION** - Максимальное поглощение                                                      |                                |\n|                  | **MAX_HEALTH** - Максимальное здоровье                                                            |                                |\n|                  | **MOVEMENT_SPEED** - Скорость передвижения                                                        |                                |\n|                  | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                                |\n|                  | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                                |\n|                  | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                                |\n|                  | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                                |\n|                  | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                                |\n|                  | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                                |\n|                  | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                                |\n|                  | **ZOMBIE_SPAWN_REINFORCEMENTS** - Шанс подкрепления зомби (zombie.spawn_reinforcements)           |                                |\n| `slot`           | Маркер                                                                                            | Слот атрибута                  |\n|                  | **ALL** - Все                                                                                     |                                |\n|                  | **ARMOR** - Любая броня                                                                           |                                |\n|                  | **BODY** - Тело (работает не со всеми сущностями)                                                 |                                |\n|                  | **BOOTS** - Ботинки                                                                               |                                |\n|                  | **CHEST** - Нагрудник                                                                             |                                |\n|                  | **HAND** - Любая рука                                                                             |                                |\n|                  | **HEAD** - Шлем                                                                                   |                                |\n|                  | **LEGGINGS** - Поножи                                                                             |                                |\n|                  | **MAIN_HAND** - Основная рука                                                                     |                                |\n|                  | **OFF_HAND** - Второстепенная рука                                                                |                                |\n| `operation`      | Маркер                                                                                            | Операция атрибута              |\n|                  | **ADD_NUMBER** - Количество (amount)                                                              |                                |\n|                  | **ADD_SCALAR** - Процент (percentage)                                                             |                                |\n|                  | **MULTIPLY_SCALAR_1** - Произведение (multiplicative)                                             |                                |",".set_item_attribute":"```justcode\nvariable::set_item_attribute\n```\n\n**Имя:** Добавить атрибут предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Добавляет определённый атрибут предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_attribute(item(\"stick\"), 1, \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_attribute(1, \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или в сухую позиционно\n\nvariable::set_item_attribute(`variable`, item(\"stick\"), 1, \"name\", \"ARMOR\", \"ALL\", \"ADD_NUMBER\");\n\n//Или в сухую по ключам\n\nvariable::set_item_attribute(variable=`variable`, item=item(\"stick\"), amount=1, name=\"name\", attribute=\"ARMOR\", slot=\"ALL\", operation=\"ADD_NUMBER\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                                                                                           | **Описание**                   |\n| :---------- | :------------------------------------------------------------------------------------------- | :------------------------ |\n| `variable`       | Переменная                                                                                        | Переменная для присвоения      |\n| `item`           | Предмет                                                                                           | Предмет                        |\n| `amount`         | Число                                                                                             | Значение атрибута              |\n| `name`           | Текст                                                                                             | Имя атрибута                   |\n| `attribute`      | Маркер                                                                                            | Тип атрибута                   |\n|                  | **ARMOR** - Броня                                                                                 |                                |\n|                  | **ARMOR_TOUGHNESS** - Плотность защиты                                                            |                                |\n|                  | **ATTACK_DAMAGE** - Урон атаки                                                                    |                                |\n|                  | **ATTACK_KNOCKBACK** - Отталкивание от атаки                                                      |                                |\n|                  | **ATTACK_SPEED** - Скорость атаки                                                                 |                                |\n|                  | **FLYING_SPEED** - Скорость полёта                                                                |                                |\n|                  | **FOLLOW_RANGE** - Расстояние следования                                                          |                                |\n|                  | **GENERIC_ARMOR** - Очки защиты (generic.armor)                                                   |                                |\n|                  | **GENERIC_ARMOR_TOUGHNESS** - Очки плотности защиты (generic.armor_toughness)                     |                                |\n|                  | **GENERIC_ATTACK_DAMAGE** - Урон атаки (generic.attack_damage)                                    |                                |\n|                  | **GENERIC_ATTACK_KNOCKBACK** - Отталкивание атаки (generic.attack_knockback)                      |                                |\n|                  | **GENERIC_ATTACK_SPEED** - Скорость атаки (generic.attack_speed)                                  |                                |\n|                  | **GENERIC_BURNING_TIME** - Время горения                                                          |                                |\n|                  | **GENERIC_EXPLOSION_KNOCKBACK_RESISTANCE** - Сопротивление отбрасыванию от взрыва                 |                                |\n|                  | **GENERIC_FALL_DAMAGE_MULTIPLIER** - Множитель урона от падения                                   |                                |\n|                  | **GENERIC_FLYING_SPEED** - Скорость полёта (generic.flying_speed)                                 |                                |\n|                  | **GENERIC_FOLLOW_RANGE** - Расстояние следования (generic.follow_range)                           |                                |\n|                  | **GENERIC_GRAVITY** - Гравитация                                                                  |                                |\n|                  | **GENERIC_JUMP_STRENGTH** - Сила прыжка                                                           |                                |\n|                  | **GENERIC_KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию (generic.knockback_resistance)      |                                |\n|                  | **GENERIC_LUCK** - Удача рыбалки (generic.luck)                                                   |                                |\n|                  | **GENERIC_MAX_ABSORPTION** - Максимальное поглощение (generic.max_absorption)                     |                                |\n|                  | **GENERIC_MAX_HEALTH** - Максимальное здоровье (generic.max_health)                               |                                |\n|                  | **GENERIC_MOVEMENT_EFFICIENCY** - Скорость передвижения по замедляющим блокам                     |                                |\n|                  | **GENERIC_MOVEMENT_SPEED** - Скорость передвижения (generic.movement_speed)                       |                                |\n|                  | **GENERIC_OXYGEN_BONUS** - Воздух под водой                                                       |                                |\n|                  | **GENERIC_SAFE_FALL_DISTANCE** - Безопасная высота падения                                        |                                |\n|                  | **GENERIC_SCALE** - Масштаб                                                                       |                                |\n|                  | **GENERIC_STEP_HEIGHT** - Высота шага                                                             |                                |\n|                  | **GENERIC_WATER_MOVEMENT_EFFICIENCY** - Скорость передвижения под водой                           |                                |\n|                  | **HORSE_JUMP_STRENGTH** - Сила прыжка лошади (horse.jump_strength)                                |                                |\n|                  | **KNOCKBACK_RESISTANCE** - Сопротивление отталкиванию                                             |                                |\n|                  | **LUCK** - Удача                                                                                  |                                |\n|                  | **MAX_ABSORPTION** - Максимальное поглощение                                                      |                                |\n|                  | **MAX_HEALTH** - Максимальное здоровье                                                            |                                |\n|                  | **MOVEMENT_SPEED** - Скорость передвижения                                                        |                                |\n|                  | **PLAYER_BLOCK_BREAK_SPEED** - Скорость ломания блока                                             |                                |\n|                  | **PLAYER_BLOCK_INTERACTION_RANGE** - Расстояние взаимодействия с блоками                          |                                |\n|                  | **PLAYER_ENTITY_INTERACTION_RANGE** - Расстояние взаимодействия с сущностями                      |                                |\n|                  | **PLAYER_MINING_EFFICIENCY** - Скорость копания                                                   |                                |\n|                  | **PLAYER_SNEAKING_SPEED** - Скорость передвижения крадясь                                         |                                |\n|                  | **PLAYER_SUBMERGED_MINING_SPEED** - Скорость копания под водой                                    |                                |\n|                  | **PLAYER_SWEEPING_DAMAGE_RATIO** - Коэффициент разящего удара                                     |                                |\n|                  | **ZOMBIE_SPAWN_REINFORCEMENTS** - Шанс подкрепления зомби (zombie.spawn_reinforcements)           |                                |\n| `slot`           | Маркер                                                                                            | Слот атрибута                  |\n|                  | **ALL** - Все                                                                                     |                                |\n|                  | **ARMOR** - Любая броня                                                                           |                                |\n|                  | **BODY** - Тело (работает не со всеми сущностями)                                                 |                                |\n|                  | **BOOTS** - Ботинки                                                                               |                                |\n|                  | **CHEST** - Нагрудник                                                                             |                                |\n|                  | **HAND** - Любая рука                                                                             |                                |\n|                  | **HEAD** - Шлем                                                                                   |                                |\n|                  | **LEGGINGS** - Поножи                                                                             |                                |\n|                  | **MAIN_HAND** - Основная рука                                                                     |                                |\n|                  | **OFF_HAND** - Второстепенная рука                                                                |                                |\n| `operation`      | Маркер                                                                                            | Операция атрибута              |\n|                  | **ADD_NUMBER** - Количество (amount)                                                              |                                |\n|                  | **ADD_SCALAR** - Процент (percentage)                                                             |                                |\n|                  | **MULTIPLY_SCALAR_1** - Произведение (multiplicative)                                             |                                |","variable::set_item_break_sound":"```justcode\nvariable::set_item_break_sound\n```\n\n**Имя:** Установить звук ломания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает звук, воспроизводимый при поломке указанного предмета, и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_break_sound(item(\"stick\"), \"break_sound\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_break_sound(\"break_sound\");\n\n//Или в сухую позиционно\n\nvariable::set_item_break_sound(`variable`, item(\"stick\"), \"break_sound\");\n\n//Или в сухую по ключам\n\nvariable::set_item_break_sound(variable=`variable`, item=item(\"stick\"), break_sound=\"break_sound\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**         | **Описание**                   |\n| :------------ | :--------- | :------------------------ |\n| `variable`         | Переменная      | Переменная для присвоения      |\n| `item`             | Предмет         | Предмет                        |\n| `break_sound`      | Текст           | Звук поломки                   |",".set_item_break_sound":"```justcode\nvariable::set_item_break_sound\n```\n\n**Имя:** Установить звук ломания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает звук, воспроизводимый при поломке указанного предмета, и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_break_sound(item(\"stick\"), \"break_sound\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_break_sound(\"break_sound\");\n\n//Или в сухую позиционно\n\nvariable::set_item_break_sound(`variable`, item(\"stick\"), \"break_sound\");\n\n//Или в сухую по ключам\n\nvariable::set_item_break_sound(variable=`variable`, item=item(\"stick\"), break_sound=\"break_sound\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**         | **Описание**                   |\n| :------------ | :--------- | :------------------------ |\n| `variable`         | Переменная      | Переменная для присвоения      |\n| `item`             | Предмет         | Предмет                        |\n| `break_sound`      | Текст           | Звук поломки                   |","variable::set_item_color":"```justcode\nvariable::set_item_color\n```\n\n**Имя:** Установить цвет предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанный цвет предмету и присваивает результат к переменной.\n**Работает с:**\\\n&nbsp;&nbsp;Кожаной бронёй\\\n&nbsp;&nbsp;Зельями\\\n&nbsp;&nbsp;Стрелами с эффектом\\\n&nbsp;&nbsp;Заполненными картами\\\n&nbsp;&nbsp;Звёздочками фейерверков\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_color(item(\"stick\"), \"color\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_color(\"color\");\n\n//Или в сухую позиционно\n\nvariable::set_item_color(`variable`, item(\"stick\"), \"color\");\n\n//Или в сухую по ключам\n\nvariable::set_item_color(variable=`variable`, item=item(\"stick\"), color=\"color\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `color`         | Текст           | Цвет                           |",".set_item_color":"```justcode\nvariable::set_item_color\n```\n\n**Имя:** Установить цвет предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает указанный цвет предмету и присваивает результат к переменной.\n**Работает с:**\\\n&nbsp;&nbsp;Кожаной бронёй\\\n&nbsp;&nbsp;Зельями\\\n&nbsp;&nbsp;Стрелами с эффектом\\\n&nbsp;&nbsp;Заполненными картами\\\n&nbsp;&nbsp;Звёздочками фейерверков\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_color(item(\"stick\"), \"color\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_color(\"color\");\n\n//Или в сухую позиционно\n\nvariable::set_item_color(`variable`, item(\"stick\"), \"color\");\n\n//Или в сухую по ключам\n\nvariable::set_item_color(variable=`variable`, item=item(\"stick\"), color=\"color\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `color`         | Текст           | Цвет                           |","variable::set_item_component":"```justcode\nvariable::set_item_component\n```\n\n**Имя:** Установить предмету компонент\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету компонент с указанным значением и присваивает предмет к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_component(item(\"stick\"), \"component\", \"any value\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_component(\"component\", \"any value\");\n\n//Или в сухую позиционно\n\nvariable::set_item_component(`variable`, item(\"stick\"), \"component\", \"any value\");\n\n//Или в сухую по ключам\n\nvariable::set_item_component(variable=`variable`, item=item(\"stick\"), component=\"component\", value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**             | **Описание**         |\n| :---------- | :------------- | :-------------- |\n| `variable`       | Переменная          | Переменная           |\n| `item`           | Предмет             | Предмет              |\n| `component`      | Текст               | Ключ компонента      |\n| `value`          | Любое значение      | Значение             |",".set_item_component":"```justcode\nvariable::set_item_component\n```\n\n**Имя:** Установить предмету компонент\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету компонент с указанным значением и присваивает предмет к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_component(item(\"stick\"), \"component\", \"any value\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_component(\"component\", \"any value\");\n\n//Или в сухую позиционно\n\nvariable::set_item_component(`variable`, item(\"stick\"), \"component\", \"any value\");\n\n//Или в сухую по ключам\n\nvariable::set_item_component(variable=`variable`, item=item(\"stick\"), component=\"component\", value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**             | **Описание**         |\n| :---------- | :------------- | :-------------- |\n| `variable`       | Переменная          | Переменная           |\n| `item`           | Предмет             | Предмет              |\n| `component`      | Текст               | Ключ компонента      |\n| `value`          | Любое значение      | Значение             |","variable::set_item_custom_model_data":"```justcode\nvariable::set_item_custom_model_data\n```\n\n**Имя:** Установить данные модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает данные модели предмета (CustomModelData) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_custom_model_data(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_custom_model_data(1);\n\n//Или в сухую позиционно\n\nvariable::set_item_custom_model_data(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_item_custom_model_data(variable=`variable`, item=item(\"stick\"), model=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `model`         | Число           | Номер модели                   |",".set_item_custom_model_data":"```justcode\nvariable::set_item_custom_model_data\n```\n\n**Имя:** Установить данные модели предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает данные модели предмета (CustomModelData) и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_custom_model_data(item(\"stick\"), 1);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_custom_model_data(1);\n\n//Или в сухую позиционно\n\nvariable::set_item_custom_model_data(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_item_custom_model_data(variable=`variable`, item=item(\"stick\"), model=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `model`         | Число           | Номер модели                   |","variable::set_item_custom_tag":"```justcode\nvariable::set_item_custom_tag\n```\n\n**Имя:** Установить кастомный тег предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает кастомный тег предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_custom_tag(item(\"stick\"), \"tag_name\", \"tag_value\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_custom_tag(\"tag_name\", \"tag_value\");\n\n//Или в сухую позиционно\n\nvariable::set_item_custom_tag(`variable`, item(\"stick\"), \"tag_name\", \"tag_value\");\n\n//Или в сухую по ключам\n\nvariable::set_item_custom_tag(variable=`variable`, item=item(\"stick\"), tag_name=\"tag_name\", tag_value=\"tag_value\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `item`           | Предмет         | Предмет                        |\n| `tag_name`       | Текст           | Имя тега                       |\n| `tag_value`      | Текст           | Значение тега                  |",".set_item_custom_tag":"```justcode\nvariable::set_item_custom_tag\n```\n\n**Имя:** Установить кастомный тег предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает кастомный тег предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_custom_tag(item(\"stick\"), \"tag_name\", \"tag_value\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_custom_tag(\"tag_name\", \"tag_value\");\n\n//Или в сухую позиционно\n\nvariable::set_item_custom_tag(`variable`, item(\"stick\"), \"tag_name\", \"tag_value\");\n\n//Или в сухую по ключам\n\nvariable::set_item_custom_tag(variable=`variable`, item=item(\"stick\"), tag_name=\"tag_name\", tag_value=\"tag_value\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `item`           | Предмет         | Предмет                        |\n| `tag_name`       | Текст           | Имя тега                       |\n| `tag_value`      | Текст           | Значение тега                  |","variable::set_item_destroyable_blocks":"```justcode\nvariable::set_item_destroyable_blocks\n```\n\n**Имя:** Установить предмету блоки для ломания\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету блоки, которые можно им ломать и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_destroyable_blocks([item(\"stick\"), item(\"stick\")], item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_destroyable_blocks([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую позиционно\n\nvariable::set_item_destroyable_blocks(`variable`, [item(\"stick\"), item(\"stick\")], item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_item_destroyable_blocks(variable=`variable`, destroyable=[item(\"stick\"), item(\"stick\")], item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**                               |\n| :------------ | :-------------- | :------------------------------------ |\n| `variable`         | Переменная           | Переменная для присвоения                  |\n| `destroyable`      | список[Предмет]      | Блоки, которые можно ломать предметом      |\n| `item`             | Предмет              | Предмет                                    |",".set_item_destroyable_blocks":"```justcode\nvariable::set_item_destroyable_blocks\n```\n\n**Имя:** Установить предмету блоки для ломания\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету блоки, которые можно им ломать и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_destroyable_blocks([item(\"stick\"), item(\"stick\")], item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_destroyable_blocks([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую позиционно\n\nvariable::set_item_destroyable_blocks(`variable`, [item(\"stick\"), item(\"stick\")], item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_item_destroyable_blocks(variable=`variable`, destroyable=[item(\"stick\"), item(\"stick\")], item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**              | **Описание**                               |\n| :------------ | :-------------- | :------------------------------------ |\n| `variable`         | Переменная           | Переменная для присвоения                  |\n| `destroyable`      | список[Предмет]      | Блоки, которые можно ломать предметом      |\n| `item`             | Предмет              | Предмет                                    |","variable::set_item_durability":"```justcode\nvariable::set_item_durability\n```\n\n**Имя:** Установить прочность предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает прочность предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_durability(item(\"stick\"), 1, \"DAMAGE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_durability(1, \"DAMAGE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_durability(`variable`, item(\"stick\"), 1, \"DAMAGE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_durability(variable=`variable`, item=item(\"stick\"), durability=1, durability_type=\"DAMAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                      | **Описание**                   |\n| :---------------- | :------------------------------------------------------ | :------------------------ |\n| `variable`             | Переменная                                                   | Переменная для присвоения      |\n| `item`                 | Предмет                                                      | Предмет                        |\n| `durability`           | Число                                                        | Новая прочность                |\n| `durability_type`      | Маркер                                                       | Тип прочности                  |\n|                        | **DAMAGE** - Текущая прочность                               |                                |\n|                        | **DAMAGE_PERCENTAGE** - Текущий процент прочности            |                                |\n|                        | **MAXIMUM** - Максимальная прочность                         |                                |\n|                        | **MAX_DAMAGE** - Максимальная прочность                      |                                |\n|                        | **REMAINING** - Остаточная прочность                         |                                |\n|                        | **REMAINING_PERCENTAGE** - Остаточный процент прочности      |                                |",".set_item_durability":"```justcode\nvariable::set_item_durability\n```\n\n**Имя:** Установить прочность предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает прочность предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_durability(item(\"stick\"), 1, \"DAMAGE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_durability(1, \"DAMAGE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_durability(`variable`, item(\"stick\"), 1, \"DAMAGE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_durability(variable=`variable`, item=item(\"stick\"), durability=1, durability_type=\"DAMAGE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                                                      | **Описание**                   |\n| :---------------- | :------------------------------------------------------ | :------------------------ |\n| `variable`             | Переменная                                                   | Переменная для присвоения      |\n| `item`                 | Предмет                                                      | Предмет                        |\n| `durability`           | Число                                                        | Новая прочность                |\n| `durability_type`      | Маркер                                                       | Тип прочности                  |\n|                        | **DAMAGE** - Текущая прочность                               |                                |\n|                        | **DAMAGE_PERCENTAGE** - Текущий процент прочности            |                                |\n|                        | **MAXIMUM** - Максимальная прочность                         |                                |\n|                        | **MAX_DAMAGE** - Максимальная прочность                      |                                |\n|                        | **REMAINING** - Остаточная прочность                         |                                |\n|                        | **REMAINING_PERCENTAGE** - Остаточный процент прочности      |                                |","variable::set_item_enchantments":"```justcode\nvariable::set_item_enchantments\n```\n\n**Имя:** Установить зачарования предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает зачарования предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_enchantments(item(\"stick\"), `enchantments`);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_enchantments(`enchantments`);\n\n//Или в сухую позиционно\n\nvariable::set_item_enchantments(`variable`, item(\"stick\"), `enchantments`);\n\n//Или в сухую по ключам\n\nvariable::set_item_enchantments(variable=`variable`, item=item(\"stick\"), enchantments=`enchantments`);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**         | **Описание**                   |\n| :------------- | :--------- | :------------------------ |\n| `variable`          | Переменная      | Переменная для присвоения      |\n| `item`              | Предмет         | Предмет                        |\n| `enchantments`      | Словарь         | Зачарования и их уровни        |",".set_item_enchantments":"```justcode\nvariable::set_item_enchantments\n```\n\n**Имя:** Установить зачарования предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает зачарования предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_enchantments(item(\"stick\"), `enchantments`);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_enchantments(`enchantments`);\n\n//Или в сухую позиционно\n\nvariable::set_item_enchantments(`variable`, item(\"stick\"), `enchantments`);\n\n//Или в сухую по ключам\n\nvariable::set_item_enchantments(variable=`variable`, item=item(\"stick\"), enchantments=`enchantments`);\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**         | **Описание**                   |\n| :------------- | :--------- | :------------------------ |\n| `variable`          | Переменная      | Переменная для присвоения      |\n| `item`              | Предмет         | Предмет                        |\n| `enchantments`      | Словарь         | Зачарования и их уровни        |","variable::set_item_food_properties":"```justcode\nvariable::set_item_food_properties\n```\n\n**Имя:** Установить предмету данные компонента еды\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету данные компонента еды и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_food_properties(item(\"stick\"), 1, 2, \"TRUE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_food_properties(1, 2, \"TRUE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_food_properties(`variable`, item(\"stick\"), 1, 2, \"TRUE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_food_properties(variable=`variable`, item=item(\"stick\"), nutrition=1, saturation=2, can_always_eat=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**              | **Описание**                       |\n| :--------------- | :-------------- | :---------------------------- |\n| `variable`            | Переменная           | Переменная для присвоения          |\n| `item`                | Предмет              | Предмет                            |\n| `nutrition`           | Число                | Питательность                      |\n| `saturation`          | Число                | Насыщение                          |\n| `can_always_eat`      | Маркер               | Возможность сьесть без голода      |\n|                       | **TRUE** - Да        |                                    |\n|                       | **FALSE** - Нет      |                                    |",".set_item_food_properties":"```justcode\nvariable::set_item_food_properties\n```\n\n**Имя:** Установить предмету данные компонента еды\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету данные компонента еды и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_food_properties(item(\"stick\"), 1, 2, \"TRUE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_food_properties(1, 2, \"TRUE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_food_properties(`variable`, item(\"stick\"), 1, 2, \"TRUE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_food_properties(variable=`variable`, item=item(\"stick\"), nutrition=1, saturation=2, can_always_eat=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**              | **Описание**                       |\n| :--------------- | :-------------- | :---------------------------- |\n| `variable`            | Переменная           | Переменная для присвоения          |\n| `item`                | Предмет              | Предмет                            |\n| `nutrition`           | Число                | Питательность                      |\n| `saturation`          | Число                | Насыщение                          |\n| `can_always_eat`      | Маркер               | Возможность сьесть без голода      |\n|                       | **TRUE** - Да        |                                    |\n|                       | **FALSE** - Нет      |                                    |","variable::set_item_glider":"```justcode\nvariable::set_item_glider\n```\n\n**Имя:** Установить предмету скольжение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету скольжение и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Экипировав предмет, имеющий скольжение, игрок сможет скользить по земле и летать, как если бы на нём были надеты элитры.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_glider(item(\"stick\"), \"TRUE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_glider(\"TRUE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_glider(`variable`, item(\"stick\"), \"TRUE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_glider(variable=`variable`, item=item(\"stick\"), glider=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**              | **Описание**                   |\n| :--------- | :-------------- | :------------------------ |\n| `variable`      | Переменная           | Переменная для присвоения      |\n| `item`          | Предмет              | Предмет                        |\n| `glider`        | Маркер               | Скольжение                     |\n|                 | **TRUE** - Да        |                                |\n|                 | **FALSE** - Нет      |                                |",".set_item_glider":"```justcode\nvariable::set_item_glider\n```\n\n**Имя:** Установить предмету скольжение\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету скольжение и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Экипировав предмет, имеющий скольжение, игрок сможет скользить по земле и летать, как если бы на нём были надеты элитры.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_glider(item(\"stick\"), \"TRUE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_glider(\"TRUE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_glider(`variable`, item(\"stick\"), \"TRUE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_glider(variable=`variable`, item=item(\"stick\"), glider=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**              | **Описание**                   |\n| :--------- | :-------------- | :------------------------ |\n| `variable`      | Переменная           | Переменная для присвоения      |\n| `item`          | Предмет              | Предмет                        |\n| `glider`        | Маркер               | Скольжение                     |\n|                 | **TRUE** - Да        |                                |\n|                 | **FALSE** - Нет      |                                |","variable::set_item_glint_override":"```justcode\nvariable::set_item_glint_override\n```\n\n**Имя:** Переопределить свечение предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Переопределяет свечение предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_glint_override(item(\"stick\"), \"TRUE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_glint_override(\"TRUE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_glint_override(`variable`, item(\"stick\"), \"TRUE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_glint_override(variable=`variable`, item=item(\"stick\"), glowing=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                         | **Описание**                   |\n| :--------- | :------------------------- | :------------------------ |\n| `variable`      | Переменная                      | Переменная для присвоения      |\n| `item`          | Предмет                         | Предмет                        |\n| `glowing`       | Маркер                          | Свечение                       |\n|                 | **TRUE** - Да                   |                                |\n|                 | **FALSE** - Нет                 |                                |\n|                 | **NOT_SET** - По умолчанию      |                                |",".set_item_glint_override":"```justcode\nvariable::set_item_glint_override\n```\n\n**Имя:** Переопределить свечение предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Переопределяет свечение предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_glint_override(item(\"stick\"), \"TRUE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_glint_override(\"TRUE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_glint_override(`variable`, item(\"stick\"), \"TRUE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_glint_override(variable=`variable`, item=item(\"stick\"), glowing=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                         | **Описание**                   |\n| :--------- | :------------------------- | :------------------------ |\n| `variable`      | Переменная                      | Переменная для присвоения      |\n| `item`          | Предмет                         | Предмет                        |\n| `glowing`       | Маркер                          | Свечение                       |\n|                 | **TRUE** - Да                   |                                |\n|                 | **FALSE** - Нет                 |                                |\n|                 | **NOT_SET** - По умолчанию      |                                |","variable::set_item_hidden_tooltip":"```justcode\nvariable::set_item_hidden_tooltip\n```\n\n**Имя:** Скрыть всплывающую подсказку предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Скрывает всплывающую подсказку предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_hidden_tooltip(item(\"stick\"), \"TRUE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_hidden_tooltip(\"TRUE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_hidden_tooltip(`variable`, item(\"stick\"), \"TRUE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_hidden_tooltip(variable=`variable`, item=item(\"stick\"), tooltip_hidden=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**              | **Описание**                       |\n| :--------------- | :-------------- | :---------------------------- |\n| `variable`            | Переменная           | Переменная для присвоения          |\n| `item`                | Предмет              | Предмет                            |\n| `tooltip_hidden`      | Маркер               | Скрытие всплывающей подсказки      |\n|                       | **TRUE** - Да        |                                    |\n|                       | **FALSE** - Нет      |                                    |",".set_item_hidden_tooltip":"```justcode\nvariable::set_item_hidden_tooltip\n```\n\n**Имя:** Скрыть всплывающую подсказку предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Скрывает всплывающую подсказку предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_hidden_tooltip(item(\"stick\"), \"TRUE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_hidden_tooltip(\"TRUE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_hidden_tooltip(`variable`, item(\"stick\"), \"TRUE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_hidden_tooltip(variable=`variable`, item=item(\"stick\"), tooltip_hidden=\"TRUE\");\n```\n\n**Аргументы:**\n\n| **Имя**               | **Тип**              | **Описание**                       |\n| :--------------- | :-------------- | :---------------------------- |\n| `variable`            | Переменная           | Переменная для присвоения          |\n| `item`                | Предмет              | Предмет                            |\n| `tooltip_hidden`      | Маркер               | Скрытие всплывающей подсказки      |\n|                       | **TRUE** - Да        |                                    |\n|                       | **FALSE** - Нет      |                                    |","variable::set_item_lore":"```justcode\nvariable::set_item_lore\n```\n\n**Имя:** Установить описание предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает описание предмета.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Очищает описание если не указано новое.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_lore(item(\"stick\"), [\"lore\", \"lore\"]);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_lore([\"lore\", \"lore\"]);\n\n//Или в сухую позиционно\n\nvariable::set_item_lore(`variable`, item(\"stick\"), [\"lore\", \"lore\"]);\n\n//Или в сухую по ключам\n\nvariable::set_item_lore(variable=`variable`, item=item(\"stick\"), lore=[\"lore\", \"lore\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `item`          | Предмет            | Предмет                        |\n| `lore`          | список[Текст]      | Новое описание                 |",".set_item_lore":"```justcode\nvariable::set_item_lore\n```\n\n**Имя:** Установить описание предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает описание предмета.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Очищает описание если не указано новое.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_lore(item(\"stick\"), [\"lore\", \"lore\"]);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_lore([\"lore\", \"lore\"]);\n\n//Или в сухую позиционно\n\nvariable::set_item_lore(`variable`, item(\"stick\"), [\"lore\", \"lore\"]);\n\n//Или в сухую по ключам\n\nvariable::set_item_lore(variable=`variable`, item=item(\"stick\"), lore=[\"lore\", \"lore\"]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `item`          | Предмет            | Предмет                        |\n| `lore`          | список[Текст]      | Новое описание                 |","variable::set_item_lore_line":"```justcode\nvariable::set_item_lore_line\n```\n\n**Имя:** Установить строку описания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает строку описания предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_lore_line(item(\"stick\"), \"text\", 1, \"APPEND\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_lore_line(\"text\", 1, \"APPEND\");\n\n//Или в сухую позиционно\n\nvariable::set_item_lore_line(`variable`, item(\"stick\"), \"text\", 1, \"APPEND\");\n\n//Или в сухую по ключам\n\nvariable::set_item_lore_line(variable=`variable`, item=item(\"stick\"), text=\"text\", line=1, mode=\"APPEND\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                      | **Описание**                   |\n| :--------- | :---------------------- | :------------------------ |\n| `variable`      | Переменная                   | Переменная для присвоения      |\n| `item`          | Предмет                      | Предмет                        |\n| `text`          | Текст                        | Новое описание                 |\n| `line`          | Число                        | Номер строки                   |\n| `mode`          | Маркер                       | Режим установки                |\n|                 | **APPEND** - Добавление      |                                |\n|                 | **MERGE** - Замена           |                                |",".set_item_lore_line":"```justcode\nvariable::set_item_lore_line\n```\n\n**Имя:** Установить строку описания предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает строку описания предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_lore_line(item(\"stick\"), \"text\", 1, \"APPEND\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_lore_line(\"text\", 1, \"APPEND\");\n\n//Или в сухую позиционно\n\nvariable::set_item_lore_line(`variable`, item(\"stick\"), \"text\", 1, \"APPEND\");\n\n//Или в сухую по ключам\n\nvariable::set_item_lore_line(variable=`variable`, item=item(\"stick\"), text=\"text\", line=1, mode=\"APPEND\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                      | **Описание**                   |\n| :--------- | :---------------------- | :------------------------ |\n| `variable`      | Переменная                   | Переменная для присвоения      |\n| `item`          | Предмет                      | Предмет                        |\n| `text`          | Текст                        | Новое описание                 |\n| `line`          | Число                        | Номер строки                   |\n| `mode`          | Маркер                       | Режим установки                |\n|                 | **APPEND** - Добавление      |                                |\n|                 | **MERGE** - Замена           |                                |","variable::set_item_max_stack_size":"```justcode\nvariable::set_item_max_stack_size\n```\n\n**Имя:** Установить максимальное количество предметов\\\n**Тип:** Действие без значения\\\n**Описание:** Устанавливает максимальное количество предметов в стаке для указанного предмета и присваивает его к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Количество предметов в стаке может быть лишь от 1 до 99.\\\n&nbsp;&nbsp;Значение 0 вернёт максимальное количество к значению по умолчанию.\n\n**Пример использования:** \n```justcode\nvariable::set_item_max_stack_size(`variable`, item(\"stick\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_item_max_stack_size(variable=`variable`, item=item(\"stick\"), size=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                      |\n| :--------- | :--------- | :--------------------------- |\n| `variable`      | Переменная      | Переменная                        |\n| `item`          | Предмет         | Предмет                           |\n| `size`          | Число           | Количество предметов в стаке      |","variable::set_item_model_data":"```justcode\nvariable::set_item_model_data\n```\n\n**Имя:** Установить модель предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает модель указанному предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_model_data(item(\"stick\"), \"model\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_model_data(\"model\");\n\n//Или в сухую позиционно\n\nvariable::set_item_model_data(`variable`, item(\"stick\"), \"model\");\n\n//Или в сухую по ключам\n\nvariable::set_item_model_data(variable=`variable`, item=item(\"stick\"), model=\"model\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                                             |\n| :--------- | :--------- | :-------------------------------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения                                |\n| `item`          | Предмет         | Предмет                                                  |\n| `model`         | Текст           | Модель предмета (пример: \"minecraft:diamond_sword\")      |",".set_item_model_data":"```justcode\nvariable::set_item_model_data\n```\n\n**Имя:** Установить модель предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает модель указанному предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_model_data(item(\"stick\"), \"model\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_model_data(\"model\");\n\n//Или в сухую позиционно\n\nvariable::set_item_model_data(`variable`, item(\"stick\"), \"model\");\n\n//Или в сухую по ключам\n\nvariable::set_item_model_data(variable=`variable`, item=item(\"stick\"), model=\"model\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                                             |\n| :--------- | :--------- | :-------------------------------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения                                |\n| `item`          | Предмет         | Предмет                                                  |\n| `model`         | Текст           | Модель предмета (пример: \"minecraft:diamond_sword\")      |","variable::set_item_name":"```justcode\nvariable::set_item_name\n```\n\n**Имя:** Установить имя предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает отображаемое имя предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_name(item(\"stick\"), \"text\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_name(\"text\");\n\n//Или в сухую позиционно\n\nvariable::set_item_name(`variable`, item(\"stick\"), \"text\");\n\n//Или в сухую по ключам\n\nvariable::set_item_name(variable=`variable`, item=item(\"stick\"), text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `text`          | Текст           | Имя                            |",".set_item_name":"```justcode\nvariable::set_item_name\n```\n\n**Имя:** Установить имя предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает отображаемое имя предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_name(item(\"stick\"), \"text\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_name(\"text\");\n\n//Или в сухую позиционно\n\nvariable::set_item_name(`variable`, item(\"stick\"), \"text\");\n\n//Или в сухую по ключам\n\nvariable::set_item_name(variable=`variable`, item=item(\"stick\"), text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `text`          | Текст           | Имя                            |","variable::set_item_placeable_blocks":"```justcode\nvariable::set_item_placeable_blocks\n```\n\n**Имя:** Установить предмету блоки для установки\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету блоки, на которые его можно поставить и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_placeable_blocks([item(\"stick\"), item(\"stick\")], item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_placeable_blocks([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую позиционно\n\nvariable::set_item_placeable_blocks(`variable`, [item(\"stick\"), item(\"stick\")], item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_item_placeable_blocks(variable=`variable`, placeable=[item(\"stick\"), item(\"stick\")], item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**              | **Описание**                                   |\n| :---------- | :-------------- | :---------------------------------------- |\n| `variable`       | Переменная           | Переменная для присвоения                      |\n| `placeable`      | список[Предмет]      | Блоки, на которые можно поставить предмет      |\n| `item`           | Предмет              | Предмет                                        |",".set_item_placeable_blocks":"```justcode\nvariable::set_item_placeable_blocks\n```\n\n**Имя:** Установить предмету блоки для установки\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету блоки, на которые его можно поставить и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_placeable_blocks([item(\"stick\"), item(\"stick\")], item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_placeable_blocks([item(\"stick\"), item(\"stick\")]);\n\n//Или в сухую позиционно\n\nvariable::set_item_placeable_blocks(`variable`, [item(\"stick\"), item(\"stick\")], item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_item_placeable_blocks(variable=`variable`, placeable=[item(\"stick\"), item(\"stick\")], item=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**              | **Описание**                                   |\n| :---------- | :-------------- | :---------------------------------------- |\n| `variable`       | Переменная           | Переменная для присвоения                      |\n| `placeable`      | список[Предмет]      | Блоки, на которые можно поставить предмет      |\n| `item`           | Предмет              | Предмет                                        |","variable::set_item_rarity":"```justcode\nvariable::set_item_rarity\n```\n\n**Имя:** Установить редкость предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает редкость предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_rarity(item(\"stick\"), \"NONE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_rarity(\"NONE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_rarity(`variable`, item(\"stick\"), \"NONE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_rarity(variable=`variable`, item=item(\"stick\"), rarity=\"NONE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                  | **Описание**                   |\n| :--------- | :---------------------------------- | :------------------------ |\n| `variable`      | Переменная                               | Переменная для присвоения      |\n| `item`          | Предмет                                  | Предмет                        |\n| `rarity`        | Маркер                                   | Редкость                       |\n|                 | **NONE** - Никакая (none)                |                                |\n|                 | **COMMON** - Обычная (common)            |                                |\n|                 | **UNCOMMON** - Необычная (uncommon)      |                                |\n|                 | **RARE** - Редкая (rare)                 |                                |\n|                 | **EPIC** - Эпическая (epic)              |                                |",".set_item_rarity":"```justcode\nvariable::set_item_rarity\n```\n\n**Имя:** Установить редкость предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает редкость предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_rarity(item(\"stick\"), \"NONE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_rarity(\"NONE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_rarity(`variable`, item(\"stick\"), \"NONE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_rarity(variable=`variable`, item=item(\"stick\"), rarity=\"NONE\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                  | **Описание**                   |\n| :--------- | :---------------------------------- | :------------------------ |\n| `variable`      | Переменная                               | Переменная для присвоения      |\n| `item`          | Предмет                                  | Предмет                        |\n| `rarity`        | Маркер                                   | Редкость                       |\n|                 | **NONE** - Никакая (none)                |                                |\n|                 | **COMMON** - Обычная (common)            |                                |\n|                 | **UNCOMMON** - Необычная (uncommon)      |                                |\n|                 | **RARE** - Редкая (rare)                 |                                |\n|                 | **EPIC** - Эпическая (epic)              |                                |","variable::set_item_tooltip_style":"```justcode\nvariable::set_item_tooltip_style\n```\n\n**Имя:** Установить стиль всплывающей подсказки предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает стиль всплывающей подсказки предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_tooltip_style(item(\"stick\"), \"style\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_tooltip_style(\"style\");\n\n//Или в сухую позиционно\n\nvariable::set_item_tooltip_style(`variable`, item(\"stick\"), \"style\");\n\n//Или в сухую по ключам\n\nvariable::set_item_tooltip_style(variable=`variable`, item=item(\"stick\"), style=\"style\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `style`         | Текст           | Ключ стиля подсказки           |",".set_item_tooltip_style":"```justcode\nvariable::set_item_tooltip_style\n```\n\n**Имя:** Установить стиль всплывающей подсказки предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает стиль всплывающей подсказки предмета и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_tooltip_style(item(\"stick\"), \"style\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_tooltip_style(\"style\");\n\n//Или в сухую позиционно\n\nvariable::set_item_tooltip_style(`variable`, item(\"stick\"), \"style\");\n\n//Или в сухую по ключам\n\nvariable::set_item_tooltip_style(variable=`variable`, item=item(\"stick\"), style=\"style\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `style`         | Текст           | Ключ стиля подсказки           |","variable::set_item_type":"```justcode\nvariable::set_item_type\n```\n\n**Имя:** Установить тип предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Меняет тип предмета, не изменяя другие данные предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_type(item(\"stick\"), \"type\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_type(\"type\");\n\n//Или в сухую позиционно\n\nvariable::set_item_type(`variable`, item(\"stick\"), \"type\");\n\n//Или в сухую по ключам\n\nvariable::set_item_type(variable=`variable`, item=item(\"stick\"), type=\"type\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `type`          | Текст           | Тип предмета                   |",".set_item_type":"```justcode\nvariable::set_item_type\n```\n\n**Имя:** Установить тип предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Меняет тип предмета, не изменяя другие данные предмета.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_type(item(\"stick\"), \"type\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_type(\"type\");\n\n//Или в сухую позиционно\n\nvariable::set_item_type(`variable`, item(\"stick\"), \"type\");\n\n//Или в сухую по ключам\n\nvariable::set_item_type(variable=`variable`, item=item(\"stick\"), type=\"type\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `item`          | Предмет         | Предмет                        |\n| `type`          | Текст           | Тип предмета                   |","variable::set_item_unbreakable":"```justcode\nvariable::set_item_unbreakable\n```\n\n**Имя:** Установить неломаемость предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает неломаемость предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_unbreakable(item(\"stick\"), \"FALSE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_unbreakable(\"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_unbreakable(`variable`, item(\"stick\"), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_unbreakable(variable=`variable`, item=item(\"stick\"), unbreakable=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**                   |\n| :------------ | :-------------------- | :------------------------ |\n| `variable`         | Переменная                 | Переменная для присвоения      |\n| `item`             | Предмет                    | Предмет                        |\n| `unbreakable`      | Маркер                     | Неломаемость                   |\n|                    | **FALSE** - Выключить      |                                |\n|                    | **TRUE** - Включить        |                                |",".set_item_unbreakable":"```justcode\nvariable::set_item_unbreakable\n```\n\n**Имя:** Установить неломаемость предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает неломаемость предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_unbreakable(item(\"stick\"), \"FALSE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_unbreakable(\"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_unbreakable(`variable`, item(\"stick\"), \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_unbreakable(variable=`variable`, item=item(\"stick\"), unbreakable=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**                    | **Описание**                   |\n| :------------ | :-------------------- | :------------------------ |\n| `variable`         | Переменная                 | Переменная для присвоения      |\n| `item`             | Предмет                    | Предмет                        |\n| `unbreakable`      | Маркер                     | Неломаемость                   |\n|                    | **FALSE** - Выключить      |                                |\n|                    | **TRUE** - Включить        |                                |","variable::set_item_use_remainder":"```justcode\nvariable::set_item_use_remainder\n```\n\n**Имя:** Установить превращение предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмет, в который превратится указанный предмет после использования и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_use_remainder(item(\"stick\"), item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_use_remainder(item(\"stick\"));\n\n//Или в сухую позиционно\n\nvariable::set_item_use_remainder(`variable`, item(\"stick\"), item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_item_use_remainder(variable=`variable`, item=item(\"stick\"), remainder=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                        |\n| :---------- | :--------- | :----------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения           |\n| `item`           | Предмет         | Предмет                             |\n| `remainder`      | Предмет         | Предмет, в который превратится      |",".set_item_use_remainder":"```justcode\nvariable::set_item_use_remainder\n```\n\n**Имя:** Установить превращение предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмет, в который превратится указанный предмет после использования и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_use_remainder(item(\"stick\"), item(\"stick\"));\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_use_remainder(item(\"stick\"));\n\n//Или в сухую позиционно\n\nvariable::set_item_use_remainder(`variable`, item(\"stick\"), item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_item_use_remainder(variable=`variable`, item=item(\"stick\"), remainder=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                        |\n| :---------- | :--------- | :----------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения           |\n| `item`           | Предмет         | Предмет                             |\n| `remainder`      | Предмет         | Предмет, в который превратится      |","variable::set_item_visibility_flags":"```justcode\nvariable::set_item_visibility_flags\n```\n\n**Имя:** Установить флаги видимости предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает определённые флаги видимости предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_visibility_flags(item(\"stick\"), \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_visibility_flags(\"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_visibility_flags(`variable`, item(\"stick\"), \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_visibility_flags(variable=`variable`, item=item(\"stick\"), hide_dye=\"NO_CHANGE\", hide_enchantments=\"NO_CHANGE\", hide_attributes=\"NO_CHANGE\", hide_unbreakable=\"NO_CHANGE\", hide_place_on=\"NO_CHANGE\", hide_destroys=\"NO_CHANGE\", hide_potion_effects=\"NO_CHANGE\", hide_armor_trim=\"NO_CHANGE\");\n```\n\n**Аргументы:**\n\n| **Имя**                    | **Тип**                            | **Описание**                      |\n| :-------------------- | :---------------------------- | :--------------------------- |\n| `variable`                 | Переменная                         | Переменная для присвоения         |\n| `item`                     | Предмет                            | Предмет                           |\n| `hide_dye`                 | Маркер                             | Скрытие цвета                     |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_enchantments`        | Маркер                             | Скрытие зачарований               |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_attributes`          | Маркер                             | Скрытие атрибутов                 |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_unbreakable`         | Маркер                             | Скрытие неразрушимости            |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_place_on`            | Маркер                             | Скрытие \\\"Можно ставить на\\\"      |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_destroys`            | Маркер                             | Скрытие \\\"Может ломать\\\"          |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_potion_effects`      | Маркер                             | Скрытие характеристик             |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_armor_trim`          | Маркер                             | Скрытие отделки брони             |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |",".set_item_visibility_flags":"```justcode\nvariable::set_item_visibility_flags\n```\n\n**Имя:** Установить флаги видимости предмету\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает определённые флаги видимости предмету и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_visibility_flags(item(\"stick\"), \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_visibility_flags(\"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\");\n\n//Или в сухую позиционно\n\nvariable::set_item_visibility_flags(`variable`, item(\"stick\"), \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\", \"NO_CHANGE\");\n\n//Или в сухую по ключам\n\nvariable::set_item_visibility_flags(variable=`variable`, item=item(\"stick\"), hide_dye=\"NO_CHANGE\", hide_enchantments=\"NO_CHANGE\", hide_attributes=\"NO_CHANGE\", hide_unbreakable=\"NO_CHANGE\", hide_place_on=\"NO_CHANGE\", hide_destroys=\"NO_CHANGE\", hide_potion_effects=\"NO_CHANGE\", hide_armor_trim=\"NO_CHANGE\");\n```\n\n**Аргументы:**\n\n| **Имя**                    | **Тип**                            | **Описание**                      |\n| :-------------------- | :---------------------------- | :--------------------------- |\n| `variable`                 | Переменная                         | Переменная для присвоения         |\n| `item`                     | Предмет                            | Предмет                           |\n| `hide_dye`                 | Маркер                             | Скрытие цвета                     |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_enchantments`        | Маркер                             | Скрытие зачарований               |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_attributes`          | Маркер                             | Скрытие атрибутов                 |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_unbreakable`         | Маркер                             | Скрытие неразрушимости            |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_place_on`            | Маркер                             | Скрытие \\\"Можно ставить на\\\"      |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_destroys`            | Маркер                             | Скрытие \\\"Может ломать\\\"          |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_potion_effects`      | Маркер                             | Скрытие характеристик             |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |\n| `hide_armor_trim`          | Маркер                             | Скрытие отделки брони             |\n|                            | **NO_CHANGE** - Без изменений      |                                   |\n|                            | **OFF** - Выключено                |                                   |\n|                            | **ON** - Включено                  |                                   |","variable::set_item_weapon":"```justcode\nvariable::set_item_weapon\n```\n\n**Имя:** Установить предмету данные компонента оружия\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету данные компонента оружия и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_weapon(item(\"stick\"), 1, 2);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_weapon(1, 2);\n\n//Или в сухую позиционно\n\nvariable::set_item_weapon(`variable`, item(\"stick\"), 1, 2);\n\n//Или в сухую по ключам\n\nvariable::set_item_weapon(variable=`variable`, item=item(\"stick\"), item_damage_per_attack=1, disable_blocking=2);\n```\n\n**Аргументы:**\n\n| **Имя**                       | **Тип**         | **Описание**                   |\n| :----------------------- | :--------- | :------------------------ |\n| `variable`                    | Переменная      | Переменная для присвоения      |\n| `item`                        | Предмет         | Предмет                        |\n| `item_damage_per_attack`      | Число           | Урон от атаки                  |\n| `disable_blocking`            | Число           | Задержка щита после удара      |",".set_item_weapon":"```justcode\nvariable::set_item_weapon\n```\n\n**Имя:** Установить предмету данные компонента оружия\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает предмету данные компонента оружия и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_item_weapon(item(\"stick\"), 1, 2);\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_item_weapon(1, 2);\n\n//Или в сухую позиционно\n\nvariable::set_item_weapon(`variable`, item(\"stick\"), 1, 2);\n\n//Или в сухую по ключам\n\nvariable::set_item_weapon(variable=`variable`, item=item(\"stick\"), item_damage_per_attack=1, disable_blocking=2);\n```\n\n**Аргументы:**\n\n| **Имя**                       | **Тип**         | **Описание**                   |\n| :----------------------- | :--------- | :------------------------ |\n| `variable`                    | Переменная      | Переменная для присвоения      |\n| `item`                        | Предмет         | Предмет                        |\n| `item_damage_per_attack`      | Число           | Урон от атаки                  |\n| `disable_blocking`            | Число           | Задержка щита после удара      |","variable::set_list_value":"```justcode\nvariable::set_list_value\n```\n\n**Имя:** Установить значение списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает значение списка по указанному индексу.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_list_value(`list`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `list`.set_list_value(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::set_list_value(`variable`, `list`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::set_list_value(variable=`variable`, list=`list`, number=1, value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `list`          | Список              | Список                         |\n| `number`        | Число               | Индекс                         |\n| `value`         | Любое значение      | Значение                       |",".set_list_value":"```justcode\nvariable::set_list_value\n```\n\n**Имя:** Установить значение списка\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает значение списка по указанному индексу.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_list_value(`list`, 1, \"any value\");\n\n//Или от объекта\n\n`variable` = `list`.set_list_value(1, \"any value\");\n\n//Или в сухую позиционно\n\nvariable::set_list_value(`variable`, `list`, 1, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::set_list_value(variable=`variable`, list=`list`, number=1, value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `list`          | Список              | Список                         |\n| `number`        | Число               | Индекс                         |\n| `value`         | Любое значение      | Значение                       |","variable::set_location_direction":"```justcode\nvariable::set_location_direction\n```\n\n**Имя:** Установить направление местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает направление местоположения и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_location_direction(location(0,0,0,0,0), vector(0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).set_location_direction(vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::set_location_direction(`variable`, location(0,0,0,0,0), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::set_location_direction(variable=`variable`, location=location(0,0,0,0,0), vector=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения         |\n| `location`      | Местоположение      | Местоположение для установки      |\n| `vector`        | Вектор              | Вектор направления                |",".set_location_direction":"```justcode\nvariable::set_location_direction\n```\n\n**Имя:** Установить направление местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает направление местоположения и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_location_direction(location(0,0,0,0,0), vector(0,0,0));\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).set_location_direction(vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::set_location_direction(`variable`, location(0,0,0,0,0), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::set_location_direction(variable=`variable`, location=location(0,0,0,0,0), vector=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                      |\n| :--------- | :------------- | :--------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения         |\n| `location`      | Местоположение      | Местоположение для установки      |\n| `vector`        | Вектор              | Вектор направления                |","variable::set_map_value":"```justcode\nvariable::set_map_value\n```\n\n**Имя:** Установить значение словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает определённое значение словаря по ключу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_map_value(`map`, \"any value\", \"any value\");\n\n//Или от объекта\n\n`variable` = `map`.set_map_value(\"any value\", \"any value\");\n\n//Или в сухую позиционно\n\nvariable::set_map_value(`variable`, `map`, \"any value\", \"any value\");\n\n//Или в сухую по ключам\n\nvariable::set_map_value(variable=`variable`, map=`map`, key=\"any value\", value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `map`           | Словарь             | Словарь для изменения          |\n| `key`           | Любое значение      | Ключ                           |\n| `value`         | Любое значение      | Новое значение                 |",".set_map_value":"```justcode\nvariable::set_map_value\n```\n\n**Имя:** Установить значение словаря\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает определённое значение словаря по ключу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_map_value(`map`, \"any value\", \"any value\");\n\n//Или от объекта\n\n`variable` = `map`.set_map_value(\"any value\", \"any value\");\n\n//Или в сухую позиционно\n\nvariable::set_map_value(`variable`, `map`, \"any value\", \"any value\");\n\n//Или в сухую по ключам\n\nvariable::set_map_value(variable=`variable`, map=`map`, key=\"any value\", value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `map`           | Словарь             | Словарь для изменения          |\n| `key`           | Любое значение      | Ключ                           |\n| `value`         | Любое значение      | Новое значение                 |","variable::set_particle_amount":"```justcode\nvariable::set_particle_amount\n```\n\n**Имя:** Установить количество частиц\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает количество частиц и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_amount(particle(\"fire\"), 1);\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_amount(1);\n\n//Или в сухую позиционно\n\nvariable::set_particle_amount(`variable`, particle(\"fire\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_particle_amount(variable=`variable`, particle=particle(\"fire\"), amount=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `amount`        | Число              | Новое количество               |",".set_particle_amount":"```justcode\nvariable::set_particle_amount\n```\n\n**Имя:** Установить количество частиц\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает количество частиц и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_amount(particle(\"fire\"), 1);\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_amount(1);\n\n//Или в сухую позиционно\n\nvariable::set_particle_amount(`variable`, particle(\"fire\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_particle_amount(variable=`variable`, particle=particle(\"fire\"), amount=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `amount`        | Число              | Новое количество               |","variable::set_particle_color":"```justcode\nvariable::set_particle_color\n```\n\n**Имя:** Установить цвет частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает цвет частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_color(particle(\"fire\"), \"hex_color\", \"COLOR\");\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_color(\"hex_color\", \"COLOR\");\n\n//Или в сухую позиционно\n\nvariable::set_particle_color(`variable`, particle(\"fire\"), \"hex_color\", \"COLOR\");\n\n//Или в сухую по ключам\n\nvariable::set_particle_color(variable=`variable`, particle=particle(\"fire\"), hex_color=\"hex_color\", color_type=\"COLOR\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                           | **Описание**                   |\n| :----------- | :--------------------------- | :------------------------ |\n| `variable`        | Переменная                        | Переменная для присвоения      |\n| `particle`        | Эффект частиц                     | Частица для изменения          |\n| `hex_color`       | Текст                             | HEX цвет                       |\n| `color_type`      | Маркер                            | Тип цвета                      |\n|                   | **COLOR** - Обычный цвет          |                                |\n|                   | **TO_COLOR** - Цвет перехода      |                                |",".set_particle_color":"```justcode\nvariable::set_particle_color\n```\n\n**Имя:** Установить цвет частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает цвет частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_color(particle(\"fire\"), \"hex_color\", \"COLOR\");\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_color(\"hex_color\", \"COLOR\");\n\n//Или в сухую позиционно\n\nvariable::set_particle_color(`variable`, particle(\"fire\"), \"hex_color\", \"COLOR\");\n\n//Или в сухую по ключам\n\nvariable::set_particle_color(variable=`variable`, particle=particle(\"fire\"), hex_color=\"hex_color\", color_type=\"COLOR\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                           | **Описание**                   |\n| :----------- | :--------------------------- | :------------------------ |\n| `variable`        | Переменная                        | Переменная для присвоения      |\n| `particle`        | Эффект частиц                     | Частица для изменения          |\n| `hex_color`       | Текст                             | HEX цвет                       |\n| `color_type`      | Маркер                            | Тип цвета                      |\n|                   | **COLOR** - Обычный цвет          |                                |\n|                   | **TO_COLOR** - Цвет перехода      |                                |","variable::set_particle_material":"```justcode\nvariable::set_particle_material\n```\n\n**Имя:** Установить материал частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает материал частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_material(particle(\"fire\"), item(\"stick\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_material(item(\"stick\"));\n\n//Или в сухую позиционно\n\nvariable::set_particle_material(`variable`, particle(\"fire\"), item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_particle_material(variable=`variable`, particle=particle(\"fire\"), material=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `material`      | Предмет            | Новый материал                 |",".set_particle_material":"```justcode\nvariable::set_particle_material\n```\n\n**Имя:** Установить материал частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает материал частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_material(particle(\"fire\"), item(\"stick\"));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_material(item(\"stick\"));\n\n//Или в сухую позиционно\n\nvariable::set_particle_material(`variable`, particle(\"fire\"), item(\"stick\"));\n\n//Или в сухую по ключам\n\nvariable::set_particle_material(variable=`variable`, particle=particle(\"fire\"), material=item(\"stick\"));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `material`      | Предмет            | Новый материал                 |","variable::set_particle_offset":"```justcode\nvariable::set_particle_offset\n```\n\n**Имя:** Установить движение частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает движение частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_offset(particle(\"fire\"), vector(0,0,0));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_offset(vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::set_particle_offset(`variable`, particle(\"fire\"), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::set_particle_offset(variable=`variable`, particle=particle(\"fire\"), offset=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `offset`        | Вектор             | Новое движение                 |",".set_particle_offset":"```justcode\nvariable::set_particle_offset\n```\n\n**Имя:** Установить движение частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает движение частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_offset(particle(\"fire\"), vector(0,0,0));\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_offset(vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::set_particle_offset(`variable`, particle(\"fire\"), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::set_particle_offset(variable=`variable`, particle=particle(\"fire\"), offset=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `offset`        | Вектор             | Новое движение                 |","variable::set_particle_size":"```justcode\nvariable::set_particle_size\n```\n\n**Имя:** Установить размер частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает размер частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_size(particle(\"fire\"), 1);\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_size(1);\n\n//Или в сухую позиционно\n\nvariable::set_particle_size(`variable`, particle(\"fire\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_particle_size(variable=`variable`, particle=particle(\"fire\"), size=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `size`          | Число              | Новый размер                   |",".set_particle_size":"```justcode\nvariable::set_particle_size\n```\n\n**Имя:** Установить размер частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает размер частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_size(particle(\"fire\"), 1);\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_size(1);\n\n//Или в сухую позиционно\n\nvariable::set_particle_size(`variable`, particle(\"fire\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_particle_size(variable=`variable`, particle=particle(\"fire\"), size=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `size`          | Число              | Новый размер                   |","variable::set_particle_spread":"```justcode\nvariable::set_particle_spread\n```\n\n**Имя:** Установить разброс частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение разброса частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_spread(particle(\"fire\"), 1, 2);\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_spread(1, 2);\n\n//Или в сухую позиционно\n\nvariable::set_particle_spread(`variable`, particle(\"fire\"), 1, 2);\n\n//Или в сухую по ключам\n\nvariable::set_particle_spread(variable=`variable`, particle=particle(\"fire\"), horizontal=1, vertical=2);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**            | **Описание**                   |\n| :----------- | :------------ | :------------------------ |\n| `variable`        | Переменная         | Переменная для присвоения      |\n| `particle`        | Эффект частиц      | Частица для изменения          |\n| `horizontal`      | Число              | Горизонтальная плоскость       |\n| `vertical`        | Число              | Вертикальная плоскость         |",".set_particle_spread":"```justcode\nvariable::set_particle_spread\n```\n\n**Имя:** Установить разброс частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение разброса частицы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_spread(particle(\"fire\"), 1, 2);\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_spread(1, 2);\n\n//Или в сухую позиционно\n\nvariable::set_particle_spread(`variable`, particle(\"fire\"), 1, 2);\n\n//Или в сухую по ключам\n\nvariable::set_particle_spread(variable=`variable`, particle=particle(\"fire\"), horizontal=1, vertical=2);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**            | **Описание**                   |\n| :----------- | :------------ | :------------------------ |\n| `variable`        | Переменная         | Переменная для присвоения      |\n| `particle`        | Эффект частиц      | Частица для изменения          |\n| `horizontal`      | Число              | Горизонтальная плоскость       |\n| `vertical`        | Число              | Вертикальная плоскость         |","variable::set_particle_type":"```justcode\nvariable::set_particle_type\n```\n\n**Имя:** Установить тип частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает тип частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_type(particle(\"fire\"), \"type\");\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_type(\"type\");\n\n//Или в сухую позиционно\n\nvariable::set_particle_type(`variable`, particle(\"fire\"), \"type\");\n\n//Или в сухую по ключам\n\nvariable::set_particle_type(variable=`variable`, particle=particle(\"fire\"), type=\"type\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `type`          | Текст              | Новый тип частицы              |",".set_particle_type":"```justcode\nvariable::set_particle_type\n```\n\n**Имя:** Установить тип частицы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает тип частицы и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_particle_type(particle(\"fire\"), \"type\");\n\n//Или от объекта\n\n`variable` = particle(\"fire\").set_particle_type(\"type\");\n\n//Или в сухую позиционно\n\nvariable::set_particle_type(`variable`, particle(\"fire\"), \"type\");\n\n//Или в сухую по ключам\n\nvariable::set_particle_type(variable=`variable`, particle=particle(\"fire\"), type=\"type\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `particle`      | Эффект частиц      | Частица для изменения          |\n| `type`          | Текст              | Новый тип частицы              |","variable::set_potion_effect_amplifier":"```justcode\nvariable::set_potion_effect_amplifier\n```\n\n**Имя:** Установить силу зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает силу зелью и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_potion_effect_amplifier(potion(\"slow_falling\"), 1);\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").set_potion_effect_amplifier(1);\n\n//Или в сухую позиционно\n\nvariable::set_potion_effect_amplifier(`variable`, potion(\"slow_falling\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_potion_effect_amplifier(variable=`variable`, potion=potion(\"slow_falling\"), amplifier=1);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `potion`         | Зелье           | Зелье                          |\n| `amplifier`      | Число           | Сила зелья                     |",".set_potion_effect_amplifier":"```justcode\nvariable::set_potion_effect_amplifier\n```\n\n**Имя:** Установить силу зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает силу зелью и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_potion_effect_amplifier(potion(\"slow_falling\"), 1);\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").set_potion_effect_amplifier(1);\n\n//Или в сухую позиционно\n\nvariable::set_potion_effect_amplifier(`variable`, potion(\"slow_falling\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_potion_effect_amplifier(variable=`variable`, potion=potion(\"slow_falling\"), amplifier=1);\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `potion`         | Зелье           | Зелье                          |\n| `amplifier`      | Число           | Сила зелья                     |","variable::set_potion_effect_duration":"```justcode\nvariable::set_potion_effect_duration\n```\n\n**Имя:** Установить длительность зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает длительность зелью и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_potion_effect_duration(potion(\"slow_falling\"), 1);\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").set_potion_effect_duration(1);\n\n//Или в сухую позиционно\n\nvariable::set_potion_effect_duration(`variable`, potion(\"slow_falling\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_potion_effect_duration(variable=`variable`, potion=potion(\"slow_falling\"), duration=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `potion`        | Зелье           | Зелье                          |\n| `duration`      | Число           | Длительность                   |",".set_potion_effect_duration":"```justcode\nvariable::set_potion_effect_duration\n```\n\n**Имя:** Установить длительность зелья\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает длительность зелью и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_potion_effect_duration(potion(\"slow_falling\"), 1);\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").set_potion_effect_duration(1);\n\n//Или в сухую позиционно\n\nvariable::set_potion_effect_duration(`variable`, potion(\"slow_falling\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_potion_effect_duration(variable=`variable`, potion=potion(\"slow_falling\"), duration=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `potion`        | Зелье           | Зелье                          |\n| `duration`      | Число           | Длительность                   |","variable::set_potion_effect_type":"```justcode\nvariable::set_potion_effect_type\n```\n\n**Имя:** Установить эффект зелью\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает эффект зелью и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_potion_effect_type(potion(\"slow_falling\"), \"effect_type\");\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").set_potion_effect_type(\"effect_type\");\n\n//Или в сухую позиционно\n\nvariable::set_potion_effect_type(`variable`, potion(\"slow_falling\"), \"effect_type\");\n\n//Или в сухую по ключам\n\nvariable::set_potion_effect_type(variable=`variable`, potion=potion(\"slow_falling\"), effect_type=\"effect_type\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**         | **Описание**                   |\n| :------------ | :--------- | :------------------------ |\n| `variable`         | Переменная      | Переменная для присвоения      |\n| `potion`           | Зелье           | Зелье                          |\n| `effect_type`      | Текст           | ID эффекта                     |",".set_potion_effect_type":"```justcode\nvariable::set_potion_effect_type\n```\n\n**Имя:** Установить эффект зелью\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает эффект зелью и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_potion_effect_type(potion(\"slow_falling\"), \"effect_type\");\n\n//Или от объекта\n\n`variable` = potion(\"slow_falling\").set_potion_effect_type(\"effect_type\");\n\n//Или в сухую позиционно\n\nvariable::set_potion_effect_type(`variable`, potion(\"slow_falling\"), \"effect_type\");\n\n//Или в сухую по ключам\n\nvariable::set_potion_effect_type(variable=`variable`, potion=potion(\"slow_falling\"), effect_type=\"effect_type\");\n```\n\n**Аргументы:**\n\n| **Имя**            | **Тип**         | **Описание**                   |\n| :------------ | :--------- | :------------------------ |\n| `variable`         | Переменная      | Переменная для присвоения      |\n| `potion`           | Зелье           | Зелье                          |\n| `effect_type`      | Текст           | ID эффекта                     |","variable::set_sound_pitch":"```justcode\nvariable::set_sound_pitch\n```\n\n**Имя:** Установить высоту звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает высоту звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_pitch(sound(\"entity.zombie.hurt\"), 1);\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_pitch(1);\n\n//Или в сухую позиционно\n\nvariable::set_sound_pitch(`variable`, sound(\"entity.zombie.hurt\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_sound_pitch(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), pitch=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `sound`         | Звук            | Звук для изменения             |\n| `pitch`         | Число           | Новое значение высоты          |",".set_sound_pitch":"```justcode\nvariable::set_sound_pitch\n```\n\n**Имя:** Установить высоту звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает высоту звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_pitch(sound(\"entity.zombie.hurt\"), 1);\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_pitch(1);\n\n//Или в сухую позиционно\n\nvariable::set_sound_pitch(`variable`, sound(\"entity.zombie.hurt\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_sound_pitch(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), pitch=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `sound`         | Звук            | Звук для изменения             |\n| `pitch`         | Число           | Новое значение высоты          |","variable::set_sound_source":"```justcode\nvariable::set_sound_source\n```\n\n**Имя:** Установить источник звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает источник звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_source(sound(\"entity.zombie.hurt\"), \"AMBIENT\");\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_source(\"AMBIENT\");\n\n//Или в сухую позиционно\n\nvariable::set_sound_source(`variable`, sound(\"entity.zombie.hurt\"), \"AMBIENT\");\n\n//Или в сухую по ключам\n\nvariable::set_sound_source(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), source=\"AMBIENT\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                           | **Описание**                   |\n| :--------- | :------------------------------------------- | :------------------------ |\n| `variable`      | Переменная                                        | Переменная для присвоения      |\n| `sound`         | Звук                                              | Звук для изменения             |\n| `source`        | Маркер                                            | Источник звука                 |\n|                 | **AMBIENT** - Окружение (ambient)                 |                                |\n|                 | **BLOCK** - Блоки (block)                         |                                |\n|                 | **HOSTILE** - Враждебные существа (hostile)       |                                |\n|                 | **MASTER** - Общий (master)                       |                                |\n|                 | **MUSIC** - Музыка (music)                        |                                |\n|                 | **NEUTRAL** - Дружелюбные существа (neutral)      |                                |\n|                 | **PLAYER** - Игроки (player)                      |                                |\n|                 | **RECORD** - Музыкальные блоки (record)           |                                |\n|                 | **VOICE** - Голос/Речь (voice)                    |                                |\n|                 | **WEATHER** - Погода (weather)                    |                                |",".set_sound_source":"```justcode\nvariable::set_sound_source\n```\n\n**Имя:** Установить источник звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает источник звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_source(sound(\"entity.zombie.hurt\"), \"AMBIENT\");\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_source(\"AMBIENT\");\n\n//Или в сухую позиционно\n\nvariable::set_sound_source(`variable`, sound(\"entity.zombie.hurt\"), \"AMBIENT\");\n\n//Или в сухую по ключам\n\nvariable::set_sound_source(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), source=\"AMBIENT\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                           | **Описание**                   |\n| :--------- | :------------------------------------------- | :------------------------ |\n| `variable`      | Переменная                                        | Переменная для присвоения      |\n| `sound`         | Звук                                              | Звук для изменения             |\n| `source`        | Маркер                                            | Источник звука                 |\n|                 | **AMBIENT** - Окружение (ambient)                 |                                |\n|                 | **BLOCK** - Блоки (block)                         |                                |\n|                 | **HOSTILE** - Враждебные существа (hostile)       |                                |\n|                 | **MASTER** - Общий (master)                       |                                |\n|                 | **MUSIC** - Музыка (music)                        |                                |\n|                 | **NEUTRAL** - Дружелюбные существа (neutral)      |                                |\n|                 | **PLAYER** - Игроки (player)                      |                                |\n|                 | **RECORD** - Музыкальные блоки (record)           |                                |\n|                 | **VOICE** - Голос/Речь (voice)                    |                                |\n|                 | **WEATHER** - Погода (weather)                    |                                |","variable::set_sound_type":"```justcode\nvariable::set_sound_type\n```\n\n**Имя:** Установить тип звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает тип звуку и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_type(sound(\"entity.zombie.hurt\"), \"namespace\", \"value\");\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_type(\"namespace\", \"value\");\n\n//Или в сухую позиционно\n\nvariable::set_sound_type(`variable`, sound(\"entity.zombie.hurt\"), \"namespace\", \"value\");\n\n//Или в сухую по ключам\n\nvariable::set_sound_type(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), namespace=\"namespace\", value=\"value\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                                |\n| :---------- | :--------- | :------------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                   |\n| `sound`          | Звук            | Звук для установки                          |\n| `namespace`      | Текст           | Пространство имён (minecraft\\: и т.п.)      |\n| `value`          | Текст           | ID звука                                    |",".set_sound_type":"```justcode\nvariable::set_sound_type\n```\n\n**Имя:** Установить тип звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает тип звуку и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_type(sound(\"entity.zombie.hurt\"), \"namespace\", \"value\");\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_type(\"namespace\", \"value\");\n\n//Или в сухую позиционно\n\nvariable::set_sound_type(`variable`, sound(\"entity.zombie.hurt\"), \"namespace\", \"value\");\n\n//Или в сухую по ключам\n\nvariable::set_sound_type(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), namespace=\"namespace\", value=\"value\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                                |\n| :---------- | :--------- | :------------------------------------- |\n| `variable`       | Переменная      | Переменная для присвоения                   |\n| `sound`          | Звук            | Звук для установки                          |\n| `namespace`      | Текст           | Пространство имён (minecraft\\: и т.п.)      |\n| `value`          | Текст           | ID звука                                    |","variable::set_sound_variation":"```justcode\nvariable::set_sound_variation\n```\n\n**Имя:** Установить вариацию звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает вариацию звука и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Можно установить как текстовую вариацию, так и числовой сид.\\\n&nbsp;&nbsp;Случайный сид если не удалось установить.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_variation(sound(\"entity.zombie.hurt\"), \"variation\");\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_variation(\"variation\");\n\n//Или в сухую позиционно\n\nvariable::set_sound_variation(`variable`, sound(\"entity.zombie.hurt\"), \"variation\");\n\n//Или в сухую по ключам\n\nvariable::set_sound_variation(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), variation=\"variation\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `sound`          | Звук            | Звук для изменения             |\n| `variation`      | Текст           | Вариация                       |",".set_sound_variation":"```justcode\nvariable::set_sound_variation\n```\n\n**Имя:** Установить вариацию звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает вариацию звука и присваивает результат к переменной.\\\n**Дополнительная информация:**\\\n&nbsp;&nbsp;Можно установить как текстовую вариацию, так и числовой сид.\\\n&nbsp;&nbsp;Случайный сид если не удалось установить.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_variation(sound(\"entity.zombie.hurt\"), \"variation\");\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_variation(\"variation\");\n\n//Или в сухую позиционно\n\nvariable::set_sound_variation(`variable`, sound(\"entity.zombie.hurt\"), \"variation\");\n\n//Или в сухую по ключам\n\nvariable::set_sound_variation(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), variation=\"variation\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `sound`          | Звук            | Звук для изменения             |\n| `variation`      | Текст           | Вариация                       |","variable::set_sound_volume_action":"```justcode\nvariable::set_sound_volume_action\n```\n\n**Имя:** Установить громкость звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает громкость звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_volume_action(sound(\"entity.zombie.hurt\"), 1);\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_volume_action(1);\n\n//Или в сухую позиционно\n\nvariable::set_sound_volume_action(`variable`, sound(\"entity.zombie.hurt\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_sound_volume_action(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), volume=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `sound`         | Звук            | Звук для изменения             |\n| `volume`        | Число           | Новое значение громкости       |",".set_sound_volume_action":"```justcode\nvariable::set_sound_volume_action\n```\n\n**Имя:** Установить громкость звука\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает громкость звука и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_sound_volume_action(sound(\"entity.zombie.hurt\"), 1);\n\n//Или от объекта\n\n`variable` = sound(\"entity.zombie.hurt\").set_sound_volume_action(1);\n\n//Или в сухую позиционно\n\nvariable::set_sound_volume_action(`variable`, sound(\"entity.zombie.hurt\"), 1);\n\n//Или в сухую по ключам\n\nvariable::set_sound_volume_action(variable=`variable`, sound=sound(\"entity.zombie.hurt\"), volume=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `sound`         | Звук            | Звук для изменения             |\n| `volume`        | Число           | Новое значение громкости       |","variable::set_template_code":"```justcode\nvariable::set_template_code\n```\n\n**Имя:** Установить код в шаблон\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает код в шаблон и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_template_code(item(\"stick\"), \"any value\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_template_code(\"any value\");\n\n//Или в сухую позиционно\n\nvariable::set_template_code(`variable`, item(\"stick\"), \"any value\");\n\n//Или в сухую по ключам\n\nvariable::set_template_code(variable=`variable`, template=item(\"stick\"), code=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `template`      | Предмет             | Шаблон                         |\n| `code`          | Любое значение      | Текст/словарь JSON             |",".set_template_code":"```justcode\nvariable::set_template_code\n```\n\n**Имя:** Установить код в шаблон\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает код в шаблон и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_template_code(item(\"stick\"), \"any value\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_template_code(\"any value\");\n\n//Или в сухую позиционно\n\nvariable::set_template_code(`variable`, item(\"stick\"), \"any value\");\n\n//Или в сухую по ключам\n\nvariable::set_template_code(variable=`variable`, template=item(\"stick\"), code=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `template`      | Предмет             | Шаблон                         |\n| `code`          | Любое значение      | Текст/словарь JSON             |","variable::set_texture_to_map":"```justcode\nvariable::set_texture_to_map\n```\n\n**Имя:** Установить изображение карте\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает изображение карте по указанной ссылке. При перезагрузке сервера изображения могут пропасть, поэтому рекомендуется повторно устанавливать его тем же картам при запуске мира.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_texture_to_map(item(\"stick\"), \"url\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_texture_to_map(\"url\");\n\n//Или в сухую позиционно\n\nvariable::set_texture_to_map(`variable`, item(\"stick\"), \"url\");\n\n//Или в сухую по ключам\n\nvariable::set_texture_to_map(variable=`variable`, map=item(\"stick\"), url=\"url\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `map`           | Предмет         | Карта для установки            |\n| `url`           | Текст           | Ссылка на изображение          |",".set_texture_to_map":"```justcode\nvariable::set_texture_to_map\n```\n\n**Имя:** Установить изображение карте\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает изображение карте по указанной ссылке. При перезагрузке сервера изображения могут пропасть, поэтому рекомендуется повторно устанавливать его тем же картам при запуске мира.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_texture_to_map(item(\"stick\"), \"url\");\n\n//Или от объекта\n\n`variable` = item(\"stick\").set_texture_to_map(\"url\");\n\n//Или в сухую позиционно\n\nvariable::set_texture_to_map(`variable`, item(\"stick\"), \"url\");\n\n//Или в сухую по ключам\n\nvariable::set_texture_to_map(variable=`variable`, map=item(\"stick\"), url=\"url\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `map`           | Предмет         | Карта для установки            |\n| `url`           | Текст           | Ссылка на изображение          |","variable::set_vector_component":"```justcode\nvariable::set_vector_component\n```\n\n**Имя:** Установить координату вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает определённую координату вектора и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_vector_component(vector(0,0,0), 1, \"X\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).set_vector_component(1, \"X\");\n\n//Или в сухую позиционно\n\nvariable::set_vector_component(`variable`, vector(0,0,0), 1, \"X\");\n\n//Или в сухую по ключам\n\nvariable::set_vector_component(variable=`variable`, vector=vector(0,0,0), value=1, vector_component=\"X\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                   | **Описание**                   |\n| :----------------- | :------------------- | :------------------------ |\n| `variable`              | Переменная                | Переменная для присвоения      |\n| `vector`                | Вектор                    | Вектор для изменения           |\n| `value`                 | Число                     | Новое значение                 |\n| `vector_component`      | Маркер                    | Тип координаты                 |\n|                         | **X** - Координата X      |                                |\n|                         | **Y** - Координата Y      |                                |\n|                         | **Z** - Координата Z      |                                |",".set_vector_component":"```justcode\nvariable::set_vector_component\n```\n\n**Имя:** Установить координату вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает определённую координату вектора и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_vector_component(vector(0,0,0), 1, \"X\");\n\n//Или от объекта\n\n`variable` = vector(0,0,0).set_vector_component(1, \"X\");\n\n//Или в сухую позиционно\n\nvariable::set_vector_component(`variable`, vector(0,0,0), 1, \"X\");\n\n//Или в сухую по ключам\n\nvariable::set_vector_component(variable=`variable`, vector=vector(0,0,0), value=1, vector_component=\"X\");\n```\n\n**Аргументы:**\n\n| **Имя**                 | **Тип**                   | **Описание**                   |\n| :----------------- | :------------------- | :------------------------ |\n| `variable`              | Переменная                | Переменная для присвоения      |\n| `vector`                | Вектор                    | Вектор для изменения           |\n| `value`                 | Число                     | Новое значение                 |\n| `vector_component`      | Маркер                    | Тип координаты                 |\n|                         | **X** - Координата X      |                                |\n|                         | **Y** - Координата Y      |                                |\n|                         | **Z** - Координата Z      |                                |","variable::set_vector_length":"```justcode\nvariable::set_vector_length\n```\n\n**Имя:** Установить длину вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает длину вектора и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_vector_length(vector(0,0,0), 1);\n\n//Или от объекта\n\n`variable` = vector(0,0,0).set_vector_length(1);\n\n//Или в сухую позиционно\n\nvariable::set_vector_length(`variable`, vector(0,0,0), 1);\n\n//Или в сухую по ключам\n\nvariable::set_vector_length(variable=`variable`, vector=vector(0,0,0), length=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector`        | Вектор          | Вектор для изменения           |\n| `length`        | Число           | Новая длина                    |",".set_vector_length":"```justcode\nvariable::set_vector_length\n```\n\n**Имя:** Установить длину вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает длину вектора и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_vector_length(vector(0,0,0), 1);\n\n//Или от объекта\n\n`variable` = vector(0,0,0).set_vector_length(1);\n\n//Или в сухую позиционно\n\nvariable::set_vector_length(`variable`, vector(0,0,0), 1);\n\n//Или в сухую по ключам\n\nvariable::set_vector_length(variable=`variable`, vector=vector(0,0,0), length=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector`        | Вектор          | Вектор для изменения           |\n| `length`        | Число           | Новая длина                    |","variable::shift_all_coordinates":"```justcode\nvariable::shift_all_coordinates\n```\n\n**Имя:** Сдвинуть все координаты местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сдвигает все координаты местоположения на определённые значения.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_all_coordinates(location(0,0,0,0,0), 1, 2, 3, 4, 5);\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_all_coordinates(1, 2, 3, 4, 5);\n\n//Или в сухую позиционно\n\nvariable::shift_all_coordinates(`variable`, location(0,0,0,0,0), 1, 2, 3, 4, 5);\n\n//Или в сухую по ключам\n\nvariable::shift_all_coordinates(variable=`variable`, location=location(0,0,0,0,0), x=1, y=2, z=3, yaw=4, pitch=5);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                           |\n| :--------- | :------------- | :-------------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения              |\n| `location`      | Местоположение      | Местоположение для сдвига              |\n| `x`             | Число               | Сдвиг по оси X                         |\n| `y`             | Число               | Сдвиг по оси Y                         |\n| `z`             | Число               | Сдвиг по оси Z                         |\n| `yaw`           | Число               | Сдвиг по горизонтальному повороту      |\n| `pitch`         | Число               | Сдвиг по вертикальному повороту        |",".shift_all_coordinates":"```justcode\nvariable::shift_all_coordinates\n```\n\n**Имя:** Сдвинуть все координаты местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сдвигает все координаты местоположения на определённые значения.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_all_coordinates(location(0,0,0,0,0), 1, 2, 3, 4, 5);\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_all_coordinates(1, 2, 3, 4, 5);\n\n//Или в сухую позиционно\n\nvariable::shift_all_coordinates(`variable`, location(0,0,0,0,0), 1, 2, 3, 4, 5);\n\n//Или в сухую по ключам\n\nvariable::shift_all_coordinates(variable=`variable`, location=location(0,0,0,0,0), x=1, y=2, z=3, yaw=4, pitch=5);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                           |\n| :--------- | :------------- | :-------------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения              |\n| `location`      | Местоположение      | Местоположение для сдвига              |\n| `x`             | Число               | Сдвиг по оси X                         |\n| `y`             | Число               | Сдвиг по оси Y                         |\n| `z`             | Число               | Сдвиг по оси Z                         |\n| `yaw`           | Число               | Сдвиг по горизонтальному повороту      |\n| `pitch`         | Число               | Сдвиг по вертикальному повороту        |","variable::shift_coordinate":"```justcode\nvariable::shift_coordinate\n```\n\n**Имя:** Сдвинуть координату местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сдвигает координату местоположения на определённое значение.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_coordinate(location(0,0,0,0,0), 1, \"PITCH\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_coordinate(1, \"PITCH\");\n\n//Или в сухую позиционно\n\nvariable::shift_coordinate(`variable`, location(0,0,0,0,0), 1, \"PITCH\");\n\n//Или в сухую по ключам\n\nvariable::shift_coordinate(variable=`variable`, location=location(0,0,0,0,0), distance=1, type=\"PITCH\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                               | **Описание**                   |\n| :--------- | :------------------------------- | :------------------------ |\n| `variable`      | Переменная                            | Переменная для присвоения      |\n| `location`      | Местоположение                        | Местоположение для сдвига      |\n| `distance`      | Число                                 | Значение сдвига                |\n| `type`          | Маркер                                | Тип координаты                 |\n|                 | **PITCH** - Вертикальный поворот      |                                |\n|                 | **X** - X                             |                                |\n|                 | **Y** - Y                             |                                |\n|                 | **YAW** - Горизонтальный поворот      |                                |\n|                 | **Z** - Z                             |                                |",".shift_coordinate":"```justcode\nvariable::shift_coordinate\n```\n\n**Имя:** Сдвинуть координату местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сдвигает координату местоположения на определённое значение.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_coordinate(location(0,0,0,0,0), 1, \"PITCH\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_coordinate(1, \"PITCH\");\n\n//Или в сухую позиционно\n\nvariable::shift_coordinate(`variable`, location(0,0,0,0,0), 1, \"PITCH\");\n\n//Или в сухую по ключам\n\nvariable::shift_coordinate(variable=`variable`, location=location(0,0,0,0,0), distance=1, type=\"PITCH\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                               | **Описание**                   |\n| :--------- | :------------------------------- | :------------------------ |\n| `variable`      | Переменная                            | Переменная для присвоения      |\n| `location`      | Местоположение                        | Местоположение для сдвига      |\n| `distance`      | Число                                 | Значение сдвига                |\n| `type`          | Маркер                                | Тип координаты                 |\n|                 | **PITCH** - Вертикальный поворот      |                                |\n|                 | **X** - X                             |                                |\n|                 | **Y** - Y                             |                                |\n|                 | **YAW** - Горизонтальный поворот      |                                |\n|                 | **Z** - Z                             |                                |","variable::shift_location_in_direction":"```justcode\nvariable::shift_location_in_direction\n```\n\n**Имя:** Сдвинуть местоположение в направлении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сдвигает местоположение в определённом направлении на определённое значение.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_location_in_direction(location(0,0,0,0,0), 1, \"FORWARD\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_location_in_direction(1, \"FORWARD\");\n\n//Или в сухую позиционно\n\nvariable::shift_location_in_direction(`variable`, location(0,0,0,0,0), 1, \"FORWARD\");\n\n//Или в сухую по ключам\n\nvariable::shift_location_in_direction(variable=`variable`, location=location(0,0,0,0,0), shift=1, direction=\"FORWARD\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                          | **Описание**                   |\n| :---------- | :-------------------------- | :------------------------ |\n| `variable`       | Переменная                       | Переменная для присвоения      |\n| `location`       | Местоположение                   | Местоположение для сдвига      |\n| `shift`          | Число                            | Значение сдвига                |\n| `direction`      | Маркер                           | Направление                    |\n|                  | **FORWARD** - Вперёд/Назад       |                                |\n|                  | **SIDEWAYS** - Вправо/Влево      |                                |\n|                  | **UPWARD** - Вверх/Вниз          |                                |",".shift_location_in_direction":"```justcode\nvariable::shift_location_in_direction\n```\n\n**Имя:** Сдвинуть местоположение в направлении\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сдвигает местоположение в определённом направлении на определённое значение.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_location_in_direction(location(0,0,0,0,0), 1, \"FORWARD\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_location_in_direction(1, \"FORWARD\");\n\n//Или в сухую позиционно\n\nvariable::shift_location_in_direction(`variable`, location(0,0,0,0,0), 1, \"FORWARD\");\n\n//Или в сухую по ключам\n\nvariable::shift_location_in_direction(variable=`variable`, location=location(0,0,0,0,0), shift=1, direction=\"FORWARD\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                          | **Описание**                   |\n| :---------- | :-------------------------- | :------------------------ |\n| `variable`       | Переменная                       | Переменная для присвоения      |\n| `location`       | Местоположение                   | Местоположение для сдвига      |\n| `shift`          | Число                            | Значение сдвига                |\n| `direction`      | Маркер                           | Направление                    |\n|                  | **FORWARD** - Вперёд/Назад       |                                |\n|                  | **SIDEWAYS** - Вправо/Влево      |                                |\n|                  | **UPWARD** - Вверх/Вниз          |                                |","variable::shift_location_on_vector":"```justcode\nvariable::shift_location_on_vector\n```\n\n**Имя:** Сдвинуть местоположение по вектору\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сдвигает указанное местоположение по вектору и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_location_on_vector(location(0,0,0,0,0), vector(0,0,0), 1);\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_location_on_vector(vector(0,0,0), 1);\n\n//Или в сухую позиционно\n\nvariable::shift_location_on_vector(`variable`, location(0,0,0,0,0), vector(0,0,0), 1);\n\n//Или в сухую по ключам\n\nvariable::shift_location_on_vector(variable=`variable`, location=location(0,0,0,0,0), vector=vector(0,0,0), length=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение для сдвига      |\n| `vector`        | Вектор              | Вектор сдвига                  |\n| `length`        | Число               | Расстояние сдвига              |",".shift_location_on_vector":"```justcode\nvariable::shift_location_on_vector\n```\n\n**Имя:** Сдвинуть местоположение по вектору\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сдвигает указанное местоположение по вектору и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_location_on_vector(location(0,0,0,0,0), vector(0,0,0), 1);\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_location_on_vector(vector(0,0,0), 1);\n\n//Или в сухую позиционно\n\nvariable::shift_location_on_vector(`variable`, location(0,0,0,0,0), vector(0,0,0), 1);\n\n//Или в сухую по ключам\n\nvariable::shift_location_on_vector(variable=`variable`, location=location(0,0,0,0,0), vector=vector(0,0,0), length=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `location`      | Местоположение      | Местоположение для сдвига      |\n| `vector`        | Вектор              | Вектор сдвига                  |\n| `length`        | Число               | Расстояние сдвига              |","variable::shift_location_towards_location":"```justcode\nvariable::shift_location_towards_location\n```\n\n**Имя:** Сместить местоположение в сторону местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Смещает местоположение в сторону заданного местоположения на определённое расстояние и присваивает его в переменную.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_location_towards_location(location(0,0,0,0,0), location(0,0,0,0,0), 1);\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_location_towards_location(location(0,0,0,0,0), 1);\n\n//Или в сухую позиционно\n\nvariable::shift_location_towards_location(`variable`, location(0,0,0,0,0), location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nvariable::shift_location_towards_location(variable=`variable`, location_from=location(0,0,0,0,0), location_to=location(0,0,0,0,0), distance=1);\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                           |\n| :-------------- | :------------- | :-------------------------------- |\n| `variable`           | Переменная          | Переменная для присвоения              |\n| `location_from`      | Местоположение      | Местоположение для сдвига              |\n| `location_to`        | Местоположение      | К какому местоположению смещать        |\n| `distance`           | Число               | На сколько смещать местоположение      |",".shift_location_towards_location":"```justcode\nvariable::shift_location_towards_location\n```\n\n**Имя:** Сместить местоположение в сторону местоположения\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Смещает местоположение в сторону заданного местоположения на определённое расстояние и присваивает его в переменную.\n\n**Пример использования:** \n```justcode\n`variable` = variable::shift_location_towards_location(location(0,0,0,0,0), location(0,0,0,0,0), 1);\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).shift_location_towards_location(location(0,0,0,0,0), 1);\n\n//Или в сухую позиционно\n\nvariable::shift_location_towards_location(`variable`, location(0,0,0,0,0), location(0,0,0,0,0), 1);\n\n//Или в сухую по ключам\n\nvariable::shift_location_towards_location(variable=`variable`, location_from=location(0,0,0,0,0), location_to=location(0,0,0,0,0), distance=1);\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**             | **Описание**                           |\n| :-------------- | :------------- | :-------------------------------- |\n| `variable`           | Переменная          | Переменная для присвоения              |\n| `location_from`      | Местоположение      | Местоположение для сдвига              |\n| `location_to`        | Местоположение      | К какому местоположению смещать        |\n| `distance`           | Число               | На сколько смещать местоположение      |","variable::simplex_noise_3d":"```justcode\nvariable::simplex_noise_3d\n```\n\n**Имя:** Шум Симплекс\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение шума Симплекс в определённом местоположении. Возвращает число, со значением от -1 до 1.\n\n**Пример использования:** \n```justcode\n`variable` = variable::simplex_noise_3d(location(0,0,0,0,0), 1, 2, 3, 4, 5, \"FULL_RANGE\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).simplex_noise_3d(1, 2, 3, 4, 5, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::simplex_noise_3d(`variable`, location(0,0,0,0,0), 1, 2, 3, 4, 5, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::simplex_noise_3d(variable=`variable`, location=location(0,0,0,0,0), seed=1, loc_frequency=2, octaves=3, frequency=4, amplitude=5, range_mode=\"FULL_RANGE\", normalized=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                                                       | **Описание**                           |\n| :-------------- | :------------------------------------------------------- | :-------------------------------- |\n| `variable`           | Переменная                                                    | Переменная для присвоения              |\n| `location`           | Местоположение                                                | Местоположение для установки шума      |\n| `seed`               | Число                                                         | Ключ шума                              |\n| `loc_frequency`      | Число                                                         | Частота шума                           |\n| `octaves`            | Число                                                         | Количество октав шума                  |\n| `frequency`          | Число                                                         | Частота октав шума                     |\n| `amplitude`          | Число                                                         | Амплитуда октав шума                   |\n| `range_mode`         | Маркер                                                        | Диапазон значений                      |\n|                      | **FULL_RANGE** - Полный диапазон (от -1 до 1 или больше)      |                                        |\n|                      | **ZERO_TO_ONE** - От 0 до 1                                   |                                        |\n| `normalized`         | Маркер                                                        | Нормализация значений                  |\n|                      | **FALSE** - Не нормализировать                                |                                        |\n|                      | **TRUE** - Нормализировать                                    |                                        |",".simplex_noise_3d":"```justcode\nvariable::simplex_noise_3d\n```\n\n**Имя:** Шум Симплекс\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение шума Симплекс в определённом местоположении. Возвращает число, со значением от -1 до 1.\n\n**Пример использования:** \n```justcode\n`variable` = variable::simplex_noise_3d(location(0,0,0,0,0), 1, 2, 3, 4, 5, \"FULL_RANGE\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).simplex_noise_3d(1, 2, 3, 4, 5, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::simplex_noise_3d(`variable`, location(0,0,0,0,0), 1, 2, 3, 4, 5, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::simplex_noise_3d(variable=`variable`, location=location(0,0,0,0,0), seed=1, loc_frequency=2, octaves=3, frequency=4, amplitude=5, range_mode=\"FULL_RANGE\", normalized=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**              | **Тип**                                                       | **Описание**                           |\n| :-------------- | :------------------------------------------------------- | :-------------------------------- |\n| `variable`           | Переменная                                                    | Переменная для присвоения              |\n| `location`           | Местоположение                                                | Местоположение для установки шума      |\n| `seed`               | Число                                                         | Ключ шума                              |\n| `loc_frequency`      | Число                                                         | Частота шума                           |\n| `octaves`            | Число                                                         | Количество октав шума                  |\n| `frequency`          | Число                                                         | Частота октав шума                     |\n| `amplitude`          | Число                                                         | Амплитуда октав шума                   |\n| `range_mode`         | Маркер                                                        | Диапазон значений                      |\n|                      | **FULL_RANGE** - Полный диапазон (от -1 до 1 или больше)      |                                        |\n|                      | **ZERO_TO_ONE** - От 0 до 1                                   |                                        |\n| `normalized`         | Маркер                                                        | Нормализация значений                  |\n|                      | **FALSE** - Не нормализировать                                |                                        |\n|                      | **TRUE** - Нормализировать                                    |                                        |","variable::sine":"```justcode\nvariable::sine\n```\n\n**Имя:** Синус числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает синус от числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::sine(1, \"ARCSINE\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = (1).sine(\"ARCSINE\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::sine(`variable`, 1, \"ARCSINE\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::sine(variable=`variable`, number=1, variant=\"ARCSINE\", input=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                | **Описание**                    |\n| :--------- | :------------------------------------------------ | :------------------------- |\n| `variable`      | Переменная                                             | Переменная для присвоения       |\n| `number`        | Число                                                  | Число для получения синуса      |\n| `variant`       | Маркер                                                 | Тип операции                    |\n|                 | **ARCSINE** - Арксинус                                 |                                 |\n|                 | **HYPERBOLIC_ARCSINE** - Гиперболический арксинус      |                                 |\n|                 | **HYPERBOLIC_SINE** - Гиперболический синус            |                                 |\n|                 | **SINE** - Синус                                       |                                 |\n| `input`         | Маркер                                                 | Тип угла                        |\n|                 | **DEGREES** - Градусы                                  |                                 |\n|                 | **RADIANS** - Радианы                                  |                                 |",".sine":"```justcode\nvariable::sine\n```\n\n**Имя:** Синус числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает синус от числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::sine(1, \"ARCSINE\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = (1).sine(\"ARCSINE\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::sine(`variable`, 1, \"ARCSINE\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::sine(variable=`variable`, number=1, variant=\"ARCSINE\", input=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                | **Описание**                    |\n| :--------- | :------------------------------------------------ | :------------------------- |\n| `variable`      | Переменная                                             | Переменная для присвоения       |\n| `number`        | Число                                                  | Число для получения синуса      |\n| `variant`       | Маркер                                                 | Тип операции                    |\n|                 | **ARCSINE** - Арксинус                                 |                                 |\n|                 | **HYPERBOLIC_ARCSINE** - Гиперболический арксинус      |                                 |\n|                 | **HYPERBOLIC_SINE** - Гиперболический синус            |                                 |\n|                 | **SINE** - Синус                                       |                                 |\n| `input`         | Маркер                                                 | Тип угла                        |\n|                 | **DEGREES** - Градусы                                  |                                 |\n|                 | **RADIANS** - Радианы                                  |                                 |","variable::sort_list":"```justcode\nvariable::sort_list\n```\n\n**Имя:** Отсортировать список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сортирует элементы списка.\n**Работает с:**\\\n&nbsp;&nbsp;Числами\\\n&nbsp;&nbsp;Текстом\\\n&nbsp;&nbsp;Списками\n\n**Пример использования:** \n```justcode\n`variable` = variable::sort_list(`list`, \"ASCENDING\");\n\n//Или от объекта\n\n`variable` = `list`.sort_list(\"ASCENDING\");\n\n//Или в сухую позиционно\n\nvariable::sort_list(`variable`, `list`, \"ASCENDING\");\n\n//Или в сухую по ключам\n\nvariable::sort_list(variable=`variable`, list=`list`, sort_mode=\"ASCENDING\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                             | **Описание**                   |\n| :---------- | :----------------------------- | :------------------------ |\n| `variable`       | Переменная                          | Переменная для присвоения      |\n| `list`           | Список                              | Список                         |\n| `sort_mode`      | Маркер                              | Способ сортировки              |\n|                  | **ASCENDING** - По возрастанию      |                                |\n|                  | **DESCENDING** - По убыванию        |                                |",".sort_list":"```justcode\nvariable::sort_list\n```\n\n**Имя:** Отсортировать список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сортирует элементы списка.\n**Работает с:**\\\n&nbsp;&nbsp;Числами\\\n&nbsp;&nbsp;Текстом\\\n&nbsp;&nbsp;Списками\n\n**Пример использования:** \n```justcode\n`variable` = variable::sort_list(`list`, \"ASCENDING\");\n\n//Или от объекта\n\n`variable` = `list`.sort_list(\"ASCENDING\");\n\n//Или в сухую позиционно\n\nvariable::sort_list(`variable`, `list`, \"ASCENDING\");\n\n//Или в сухую по ключам\n\nvariable::sort_list(variable=`variable`, list=`list`, sort_mode=\"ASCENDING\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                             | **Описание**                   |\n| :---------- | :----------------------------- | :------------------------ |\n| `variable`       | Переменная                          | Переменная для присвоения      |\n| `list`           | Список                              | Список                         |\n| `sort_mode`      | Маркер                              | Способ сортировки              |\n|                  | **ASCENDING** - По возрастанию      |                                |\n|                  | **DESCENDING** - По убыванию        |                                |","variable::sort_map":"```justcode\nvariable::sort_map\n```\n\n**Имя:** Сортировать словарь\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сортирует словарь по заданным параметрам и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::sort_map(`map`, \"ASCENDING\", \"KEYS\");\n\n//Или от объекта\n\n`variable` = `map`.sort_map(\"ASCENDING\", \"KEYS\");\n\n//Или в сухую позиционно\n\nvariable::sort_map(`variable`, `map`, \"ASCENDING\", \"KEYS\");\n\n//Или в сухую по ключам\n\nvariable::sort_map(variable=`variable`, map=`map`, sort_order=\"ASCENDING\", sort_type=\"KEYS\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                             | **Описание**                   |\n| :----------- | :----------------------------- | :------------------------ |\n| `variable`        | Переменная                          | Переменная для присвоения      |\n| `map`             | Словарь                             | Словарь для сортировки         |\n| `sort_order`      | Маркер                              | Порядок сортировки             |\n|                   | **ASCENDING** - По возрастанию      |                                |\n|                   | **DESCENDING** - По убыванию        |                                |\n| `sort_type`       | Маркер                              | Тип сортировки                 |\n|                   | **KEYS** - По ключу                 |                                |\n|                   | **VALUES** - По значению            |                                |",".sort_map":"```justcode\nvariable::sort_map\n```\n\n**Имя:** Сортировать словарь\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Сортирует словарь по заданным параметрам и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::sort_map(`map`, \"ASCENDING\", \"KEYS\");\n\n//Или от объекта\n\n`variable` = `map`.sort_map(\"ASCENDING\", \"KEYS\");\n\n//Или в сухую позиционно\n\nvariable::sort_map(`variable`, `map`, \"ASCENDING\", \"KEYS\");\n\n//Или в сухую по ключам\n\nvariable::sort_map(variable=`variable`, map=`map`, sort_order=\"ASCENDING\", sort_type=\"KEYS\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                             | **Описание**                   |\n| :----------- | :----------------------------- | :------------------------ |\n| `variable`        | Переменная                          | Переменная для присвоения      |\n| `map`             | Словарь                             | Словарь для сортировки         |\n| `sort_order`      | Маркер                              | Порядок сортировки             |\n|                   | **ASCENDING** - По возрастанию      |                                |\n|                   | **DESCENDING** - По убыванию        |                                |\n| `sort_type`       | Маркер                              | Тип сортировки                 |\n|                   | **KEYS** - По ключу                 |                                |\n|                   | **VALUES** - По значению            |                                |","variable::split_text":"```justcode\nvariable::split_text\n```\n\n**Имя:** Разделить текст на элементы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Разделяет текст на элементы списка по заданному символу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::split_text(\"text\", \"delimiter\");\n\n//Или от объекта\n\n`variable` = \"text\".split_text(\"delimiter\");\n\n//Или в сухую позиционно\n\nvariable::split_text(`variable`, \"text\", \"delimiter\");\n\n//Или в сухую по ключам\n\nvariable::split_text(variable=`variable`, text=\"text\", delimiter=\"delimiter\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `text`           | Текст           | Текст для разделения           |\n| `delimiter`      | Текст           | Разделитель                    |",".split_text":"```justcode\nvariable::split_text\n```\n\n**Имя:** Разделить текст на элементы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Разделяет текст на элементы списка по заданному символу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::split_text(\"text\", \"delimiter\");\n\n//Или от объекта\n\n`variable` = \"text\".split_text(\"delimiter\");\n\n//Или в сухую позиционно\n\nvariable::split_text(`variable`, \"text\", \"delimiter\");\n\n//Или в сухую по ключам\n\nvariable::split_text(variable=`variable`, text=\"text\", delimiter=\"delimiter\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**         | **Описание**                   |\n| :---------- | :--------- | :------------------------ |\n| `variable`       | Переменная      | Переменная для присвоения      |\n| `text`           | Текст           | Текст для разделения           |\n| `delimiter`      | Текст           | Разделитель                    |","variable::strip_text":"```justcode\nvariable::strip_text\n```\n\n**Имя:** Удалить пробелы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет пробелы в тексте и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::strip_text(\"text\", \"ALL\");\n\n//Или от объекта\n\n`variable` = \"text\".strip_text(\"ALL\");\n\n//Или в сухую позиционно\n\nvariable::strip_text(`variable`, \"text\", \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::strip_text(variable=`variable`, text=\"text\", strip_type=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                         | **Описание**                   |\n| :----------- | :------------------------- | :------------------------ |\n| `variable`        | Переменная                      | Переменная для присвоения      |\n| `text`            | Текст                           | Текст для изменения            |\n| `strip_type`      | Маркер                          | Тип удаления                   |\n|                   | **ALL** - В начале и конце      |                                |\n|                   | **END** - В конце               |                                |\n|                   | **INDENT** - Отступы            |                                |\n|                   | **START** - В начале            |                                |",".strip_text":"```justcode\nvariable::strip_text\n```\n\n**Имя:** Удалить пробелы\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет пробелы в тексте и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::strip_text(\"text\", \"ALL\");\n\n//Или от объекта\n\n`variable` = \"text\".strip_text(\"ALL\");\n\n//Или в сухую позиционно\n\nvariable::strip_text(`variable`, \"text\", \"ALL\");\n\n//Или в сухую по ключам\n\nvariable::strip_text(variable=`variable`, text=\"text\", strip_type=\"ALL\");\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**                         | **Описание**                   |\n| :----------- | :------------------------- | :------------------------ |\n| `variable`        | Переменная                      | Переменная для присвоения      |\n| `text`            | Текст                           | Текст для изменения            |\n| `strip_type`      | Маркер                          | Тип удаления                   |\n|                   | **ALL** - В начале и конце      |                                |\n|                   | **END** - В конце               |                                |\n|                   | **INDENT** - Отступы            |                                |\n|                   | **START** - В начале            |                                |","variable::subtract":"```justcode\nvariable::subtract\n```\n\n**Имя:** Вычитание чисел (-)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной разницу чисел.\n\n**Пример использования:** \n```justcode\n`variable` = variable::subtract([1, 2]);\n\n//Или в сухую позиционно\n\nvariable::subtract(`variable`, [1, 2]);\n\n//Или в сухую по ключам\n\nvariable::subtract(variable=`variable`, value=[1, 2]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**            | **Описание**                   |\n| :--------- | :------------ | :------------------------ |\n| `variable`      | Переменная         | Переменная для присвоения      |\n| `value`         | список[Число]      | Числа для вычитания            |","variable::subtract_vectors":"```justcode\nvariable::subtract_vectors\n```\n\n**Имя:** Разница векторов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение разницы векторов.\n\n**Пример использования:** \n```justcode\n`variable` = variable::subtract_vectors([vector(0,0,0), vector(0,0,0)]);\n\n//Или в сухую позиционно\n\nvariable::subtract_vectors(`variable`, [vector(0,0,0), vector(0,0,0)]);\n\n//Или в сухую по ключам\n\nvariable::subtract_vectors(variable=`variable`, vectors=[vector(0,0,0), vector(0,0,0)]);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                       |\n| :--------- | :------------- | :---------------------------- |\n| `variable`      | Переменная          | Переменная для присвоения          |\n| `vectors`       | список[Вектор]      | Вектора для получения разницы      |","variable::tangent":"```justcode\nvariable::tangent\n```\n\n**Имя:** Тангенс числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает тангенс от числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::tangent(1, \"ARCTANGENT\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = (1).tangent(\"ARCTANGENT\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::tangent(`variable`, 1, \"ARCTANGENT\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::tangent(variable=`variable`, number=1, variant=\"ARCTANGENT\", input=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                     | **Описание**                      |\n| :--------- | :----------------------------------------------------- | :--------------------------- |\n| `variable`      | Переменная                                                  | Переменная для присвоения         |\n| `number`        | Число                                                       | Число для получения тангенса      |\n| `variant`       | Маркер                                                      | Тип операции                      |\n|                 | **ARCTANGENT** - Арктангенс                                 |                                   |\n|                 | **HYPERBOLIC_ARCTANGENT** - Гиперболический арктангенс      |                                   |\n|                 | **HYPERBOLIC_TANGENT** - Гиперболический тангенс            |                                   |\n|                 | **TANGENT** - Тангенс                                       |                                   |\n| `input`         | Маркер                                                      | Тип угла                          |\n|                 | **DEGREES** - Градусы                                       |                                   |\n|                 | **RADIANS** - Радианы                                       |                                   |",".tangent":"```justcode\nvariable::tangent\n```\n\n**Имя:** Тангенс числа\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает тангенс от числа.\n\n**Пример использования:** \n```justcode\n`variable` = variable::tangent(1, \"ARCTANGENT\", \"DEGREES\");\n\n//Или от объекта\n\n`variable` = (1).tangent(\"ARCTANGENT\", \"DEGREES\");\n\n//Или в сухую позиционно\n\nvariable::tangent(`variable`, 1, \"ARCTANGENT\", \"DEGREES\");\n\n//Или в сухую по ключам\n\nvariable::tangent(variable=`variable`, number=1, variant=\"ARCTANGENT\", input=\"DEGREES\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                                     | **Описание**                      |\n| :--------- | :----------------------------------------------------- | :--------------------------- |\n| `variable`      | Переменная                                                  | Переменная для присвоения         |\n| `number`        | Число                                                       | Число для получения тангенса      |\n| `variant`       | Маркер                                                      | Тип операции                      |\n|                 | **ARCTANGENT** - Арктангенс                                 |                                   |\n|                 | **HYPERBOLIC_ARCTANGENT** - Гиперболический арктангенс      |                                   |\n|                 | **HYPERBOLIC_TANGENT** - Гиперболический тангенс            |                                   |\n|                 | **TANGENT** - Тангенс                                       |                                   |\n| `input`         | Маркер                                                      | Тип угла                          |\n|                 | **DEGREES** - Градусы                                       |                                   |\n|                 | **RADIANS** - Радианы                                       |                                   |","variable::set_text":"```justcode\nvariable::set_text\n```\n\n**Имя:** Установить текст в переменную\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Объединяет и присваивает к переменной одно или несколько значений текста.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_text([\"text\", \"text\"], \"CONCATENATION\");\n\n//Или в сухую позиционно\n\nvariable::set_text(`variable`, [\"text\", \"text\"], \"CONCATENATION\");\n\n//Или в сухую по ключам\n\nvariable::set_text(variable=`variable`, text=[\"text\", \"text\"], merging=\"CONCATENATION\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**                                        | **Описание**                   |\n| :--------- | :---------------------------------------- | :------------------------ |\n| `variable`      | Переменная                                     | Переменная для присвоения      |\n| `text`          | список[Текст]                                  | Текст для установки            |\n| `merging`       | Маркер                                         | Объединение текста             |\n|                 | **CONCATENATION** - Объединение                |                                |\n|                 | **SEPARATE_LINES** - Разделение на строки      |                                |\n|                 | **SPACES** - Разделение пробелом               |                                |","variable::set_text_case":"```justcode\nvariable::set_text_case\n```\n\n**Имя:** Установить регистр текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает регистр текста и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_text_case(\"text\", \"INVERT\");\n\n//Или от объекта\n\n`variable` = \"text\".set_text_case(\"INVERT\");\n\n//Или в сухую позиционно\n\nvariable::set_text_case(`variable`, \"text\", \"INVERT\");\n\n//Или в сухую по ключам\n\nvariable::set_text_case(variable=`variable`, text=\"text\", case_type=\"INVERT\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                         | **Описание**                   |\n| :---------- | :------------------------- | :------------------------ |\n| `variable`       | Переменная                      | Переменная для присвоения      |\n| `text`           | Текст                           | Текст для установки            |\n| `case_type`      | Маркер                          | Тип регистра                   |\n|                  | **INVERT** - Инвертировать      |                                |\n|                  | **LOWER** - Нижний              |                                |\n|                  | **PROPER** - Первый символ      |                                |\n|                  | **RANDOM** - Случайный          |                                |\n|                  | **UPPER** - Верхний             |                                |",".set_text_case":"```justcode\nvariable::set_text_case\n```\n\n**Имя:** Установить регистр текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает регистр текста и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_text_case(\"text\", \"INVERT\");\n\n//Или от объекта\n\n`variable` = \"text\".set_text_case(\"INVERT\");\n\n//Или в сухую позиционно\n\nvariable::set_text_case(`variable`, \"text\", \"INVERT\");\n\n//Или в сухую по ключам\n\nvariable::set_text_case(variable=`variable`, text=\"text\", case_type=\"INVERT\");\n```\n\n**Аргументы:**\n\n| **Имя**          | **Тип**                         | **Описание**                   |\n| :---------- | :------------------------- | :------------------------ |\n| `variable`       | Переменная                      | Переменная для присвоения      |\n| `text`           | Текст                           | Текст для установки            |\n| `case_type`      | Маркер                          | Тип регистра                   |\n|                  | **INVERT** - Инвертировать      |                                |\n|                  | **LOWER** - Нижний              |                                |\n|                  | **PROPER** - Первый символ      |                                |\n|                  | **RANDOM** - Случайный          |                                |\n|                  | **UPPER** - Верхний             |                                |","variable::get_text_length":"```justcode\nvariable::get_text_length\n```\n\n**Имя:** Получить длину текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение количества символов в тексте.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_text_length(\"text\");\n\n//Или от объекта\n\n`variable` = \"text\".get_text_length();\n\n//Или в сухую позиционно\n\nvariable::get_text_length(`variable`, \"text\");\n\n//Или в сухую по ключам\n\nvariable::get_text_length(variable=`variable`, text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Текст для получения длины      |",".get_text_length":"```justcode\nvariable::get_text_length\n```\n\n**Имя:** Получить длину текста\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение количества символов в тексте.\n\n**Пример использования:** \n```justcode\n`variable` = variable::get_text_length(\"text\");\n\n//Или от объекта\n\n`variable` = \"text\".get_text_length();\n\n//Или в сухую позиционно\n\nvariable::get_text_length(`variable`, \"text\");\n\n//Или в сухую по ключам\n\nvariable::get_text_length(variable=`variable`, text=\"text\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Текст для получения длины      |","variable::to_char":"```justcode\nvariable::to_char\n```\n\n**Имя:** Получить символ по числу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённый символ по числу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::to_char(1);\n\n//Или от объекта\n\n`variable` = (1).to_char();\n\n//Или в сухую позиционно\n\nvariable::to_char(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::to_char(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `number`        | Число           | Число для получения символа      |",".to_char":"```justcode\nvariable::to_char\n```\n\n**Имя:** Получить символ по числу\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Получает определённый символ по числу и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::to_char(1);\n\n//Или от объекта\n\n`variable` = (1).to_char();\n\n//Или в сухую позиционно\n\nvariable::to_char(`variable`, 1);\n\n//Или в сухую по ключам\n\nvariable::to_char(variable=`variable`, number=1);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                     |\n| :--------- | :--------- | :-------------------------- |\n| `variable`      | Переменная      | Переменная для присвоения        |\n| `number`        | Число           | Число для получения символа      |","variable::to_hsb":"```justcode\nvariable::to_hsb\n```\n\n**Имя:** Создать HSB цвет\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт HEX цвет на основе оттенка, насыщенности и яркости.\n\n**Пример использования:** \n```justcode\n`variable` = variable::to_hsb(1, 2, 3);\n\n//Или в сухую позиционно\n\nvariable::to_hsb(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::to_hsb(variable=`variable`, hue=1, saturation=2, brightness=3);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**         | **Описание**                   |\n| :----------- | :--------- | :------------------------ |\n| `variable`        | Переменная      | Переменная для присвоения      |\n| `hue`             | Число           | Оттенок (0 - 360)              |\n| `saturation`      | Число           | Насыщенность (0 - 100)         |\n| `brightness`      | Число           | Яркость (0 - 100)              |","variable::to_hsl":"```justcode\nvariable::to_hsl\n```\n\n**Имя:** Создать HSL цвет\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт HEX цвет на основе оттенка, насыщенности и светлоты.\n\n**Пример использования:** \n```justcode\n`variable` = variable::to_hsl(1, 2, 3);\n\n//Или в сухую позиционно\n\nvariable::to_hsl(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::to_hsl(variable=`variable`, hue=1, saturation=2, lightness=3);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**         | **Описание**                   |\n| :----------- | :--------- | :------------------------ |\n| `variable`        | Переменная      | Переменная для присвоения      |\n| `hue`             | Число           | Оттенок (0 - 360)              |\n| `saturation`      | Число           | Насыщенность (0 - 100)         |\n| `lightness`       | Число           | Светлота (0 - 100)             |","variable::to_json":"```justcode\nvariable::to_json\n```\n\n**Имя:** Преобразовать в JSON\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Преобразует словари и списки в JSON текст.\n\n**Пример использования:** \n```justcode\n`variable` = variable::to_json(\"any value\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::to_json(`variable`, \"any value\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::to_json(variable=`variable`, value=\"any value\", pretty_print=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**             | **Тип**                    | **Описание**                      |\n| :------------- | :-------------------- | :--------------------------- |\n| `variable`          | Переменная                 | Для записи результата             |\n| `value`             | Любое значение             | Список/Словарь со значениями      |\n| `pretty_print`      | Маркер                     | Форматирование Pretty Print       |\n|                     | **FALSE** - Выключить      |                                   |\n|                     | **TRUE** - Включить        |                                   |","variable::to_rgb":"```justcode\nvariable::to_rgb\n```\n\n**Имя:** Создать RGB цвет\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт HEX цвет в зависимости от красного, зелёного и синего каналов.\n\n**Пример использования:** \n```justcode\n`variable` = variable::to_rgb(1, 2, 3);\n\n//Или в сухую позиционно\n\nvariable::to_rgb(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::to_rgb(variable=`variable`, red=1, green=2, blue=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `red`           | Число           | Красный канал (0 - 255)        |\n| `green`         | Число           | Зелёный канал (0 - 255)        |\n| `blue`          | Число           | Синий канал (0 - 255)          |","variable::trim_list":"```justcode\nvariable::trim_list\n```\n\n**Имя:** Обрезать список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает список, содержащий элементы указанного списка, которые находятся начиная и заканчивая на указанных индексах.\n\n**Пример использования:** \n```justcode\n`variable` = variable::trim_list(`list`, 1, 2);\n\n//Или от объекта\n\n`variable` = `list`.trim_list(1, 2);\n\n//Или в сухую позиционно\n\nvariable::trim_list(`variable`, `list`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::trim_list(variable=`variable`, list=`list`, start=1, end=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |\n| `start`         | Число           | Индекс начала                  |\n| `end`           | Число           | Индекс конца                   |",".trim_list":"```justcode\nvariable::trim_list\n```\n\n**Имя:** Обрезать список\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Возвращает список, содержащий элементы указанного списка, которые находятся начиная и заканчивая на указанных индексах.\n\n**Пример использования:** \n```justcode\n`variable` = variable::trim_list(`list`, 1, 2);\n\n//Или от объекта\n\n`variable` = `list`.trim_list(1, 2);\n\n//Или в сухую позиционно\n\nvariable::trim_list(`variable`, `list`, 1, 2);\n\n//Или в сухую по ключам\n\nvariable::trim_list(variable=`variable`, list=`list`, start=1, end=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `list`          | Список          | Список                         |\n| `start`         | Число           | Индекс начала                  |\n| `end`           | Число           | Индекс конца                   |","variable::trim_text":"```justcode\nvariable::trim_text\n```\n\n**Имя:** Обрезать текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Обрезает текст и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::trim_text(\"text\", 1, 2);\n\n//Или от объекта\n\n`variable` = \"text\".trim_text(1, 2);\n\n//Или в сухую позиционно\n\nvariable::trim_text(`variable`, \"text\", 1, 2);\n\n//Или в сухую по ключам\n\nvariable::trim_text(variable=`variable`, text=\"text\", start=1, end=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Текст для обрезки              |\n| `start`         | Число           | Начальная позиция              |\n| `end`           | Число           | Конечная позиция               |",".trim_text":"```justcode\nvariable::trim_text\n```\n\n**Имя:** Обрезать текст\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Обрезает текст и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::trim_text(\"text\", 1, 2);\n\n//Или от объекта\n\n`variable` = \"text\".trim_text(1, 2);\n\n//Или в сухую позиционно\n\nvariable::trim_text(`variable`, \"text\", 1, 2);\n\n//Или в сухую по ключам\n\nvariable::trim_text(variable=`variable`, text=\"text\", start=1, end=2);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `text`          | Текст           | Текст для обрезки              |\n| `start`         | Число           | Начальная позиция              |\n| `end`           | Число           | Конечная позиция               |","variable::unset_item_components":"```justcode\nvariable::unset_item_components\n```\n\n**Имя:** Удалить компоненты предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет указанные компоненты предмета и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::unset_item_components(item(\"stick\"), [\"components\", \"components\"]);\n\n//Или от объекта\n\n`variable` = item(\"stick\").unset_item_components([\"components\", \"components\"]);\n\n//Или в сухую позиционно\n\nvariable::unset_item_components(`variable`, item(\"stick\"), [\"components\", \"components\"]);\n\n//Или в сухую по ключам\n\nvariable::unset_item_components(variable=`variable`, item=item(\"stick\"), components=[\"components\", \"components\"]);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**            | **Описание**                     |\n| :----------- | :------------ | :-------------------------- |\n| `variable`        | Переменная         | Переменная для присвоения        |\n| `item`            | Предмет            | Предмет                          |\n| `components`      | список[Текст]      | Ключи удаляемых компонентов      |",".unset_item_components":"```justcode\nvariable::unset_item_components\n```\n\n**Имя:** Удалить компоненты предмета\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Удаляет указанные компоненты предмета и присваисвает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::unset_item_components(item(\"stick\"), [\"components\", \"components\"]);\n\n//Или от объекта\n\n`variable` = item(\"stick\").unset_item_components([\"components\", \"components\"]);\n\n//Или в сухую позиционно\n\nvariable::unset_item_components(`variable`, item(\"stick\"), [\"components\", \"components\"]);\n\n//Или в сухую по ключам\n\nvariable::unset_item_components(variable=`variable`, item=item(\"stick\"), components=[\"components\", \"components\"]);\n```\n\n**Аргументы:**\n\n| **Имя**           | **Тип**            | **Описание**                     |\n| :----------- | :------------ | :-------------------------- |\n| `variable`        | Переменная         | Переменная для присвоения        |\n| `item`            | Предмет            | Предмет                          |\n| `components`      | список[Текст]      | Ключи удаляемых компонентов      |","variable::set_value":"```justcode\nvariable::set_value\n```\n\n**Имя:** Установить значение (=)\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает значение к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_value(\"any value\");\n\n//Или в сухую позиционно\n\nvariable::set_value(`variable`, \"any value\");\n\n//Или в сухую по ключам\n\nvariable::set_value(variable=`variable`, value=\"any value\");\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**             | **Описание**                   |\n| :--------- | :------------- | :------------------------ |\n| `variable`      | Переменная          | Переменная для присвоения      |\n| `value`         | Любое значение      | Значение для присвоения        |","variable::set_vector":"```justcode\nvariable::set_vector\n```\n\n**Имя:** Создать вектор\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Создаёт вектор из указанных координат и присваивает результат к переменной.\n\n**Пример использования:** \n```justcode\n`variable` = variable::set_vector(1, 2, 3);\n\n//Или в сухую позиционно\n\nvariable::set_vector(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::set_vector(variable=`variable`, x=1, y=2, z=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `x`             | Число           | Координата X                   |\n| `y`             | Число           | Координата Y                   |\n| `z`             | Число           | Координата Z                   |","variable::vector_cross_product":"```justcode\nvariable::vector_cross_product\n```\n\n**Имя:** Векторное произведение двух векторов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение векторного произведения двух векторов.\n\n**Пример использования:** \n```justcode\n`variable` = variable::vector_cross_product(vector(0,0,0), vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::vector_cross_product(`variable`, vector(0,0,0), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::vector_cross_product(variable=`variable`, vector_1=vector(0,0,0), vector_2=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector_1`      | Вектор          | Первый вектор                  |\n| `vector_2`      | Вектор          | Второй вектор                  |","variable::vector_dot_product":"```justcode\nvariable::vector_dot_product\n```\n\n**Имя:** Скалярное произведение двух векторов\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение скалярного произведения двух векторов.\n\n**Пример использования:** \n```justcode\n`variable` = variable::vector_dot_product(vector(0,0,0), vector(0,0,0));\n\n//Или в сухую позиционно\n\nvariable::vector_dot_product(`variable`, vector(0,0,0), vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::vector_dot_product(variable=`variable`, vector_1=vector(0,0,0), vector_2=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector_1`      | Вектор          | Первый вектор                  |\n| `vector_2`      | Вектор          | Второй вектор                  |","variable::vector_to_direction_name":"```justcode\nvariable::vector_to_direction_name\n```\n\n**Имя:** Получить сторону света вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает в переменную сторону света, в которую направлен вектор.\n\n**Пример использования:** \n```justcode\n`variable` = variable::vector_to_direction_name(vector(0,0,0));\n\n//Или от объекта\n\n`variable` = vector(0,0,0).vector_to_direction_name();\n\n//Или в сухую позиционно\n\nvariable::vector_to_direction_name(`variable`, vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::vector_to_direction_name(variable=`variable`, vector=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector`        | Вектор          | Вектор для получения           |",".vector_to_direction_name":"```justcode\nvariable::vector_to_direction_name\n```\n\n**Имя:** Получить сторону света вектора\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Устанавливает в переменную сторону света, в которую направлен вектор.\n\n**Пример использования:** \n```justcode\n`variable` = variable::vector_to_direction_name(vector(0,0,0));\n\n//Или от объекта\n\n`variable` = vector(0,0,0).vector_to_direction_name();\n\n//Или в сухую позиционно\n\nvariable::vector_to_direction_name(`variable`, vector(0,0,0));\n\n//Или в сухую по ключам\n\nvariable::vector_to_direction_name(variable=`variable`, vector=vector(0,0,0));\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `vector`        | Вектор          | Вектор для получения           |","variable::voronoi_noise_3d":"```justcode\nvariable::voronoi_noise_3d\n```\n\n**Имя:** Шум Вороного\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение шума Вороного в определённом местоположении. Возвращает число, со значением от 0 до 1.\n\n**Пример использования:** \n```justcode\n`variable` = variable::voronoi_noise_3d(location(0,0,0,0,0), 1, 2, 3, \"FULL_RANGE\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).voronoi_noise_3d(1, 2, 3, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::voronoi_noise_3d(`variable`, location(0,0,0,0,0), 1, 2, 3, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::voronoi_noise_3d(variable=`variable`, location=location(0,0,0,0,0), seed=1, frequency=2, displacement=3, range_mode=\"FULL_RANGE\", enable_distance=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                          | **Описание**                           |\n| :---------------- | :-------------------------- | :-------------------------------- |\n| `variable`             | Переменная                       | Переменная для присвоения              |\n| `location`             | Местоположение                   | Местоположение для установки шума      |\n| `seed`                 | Число                            | Ключ шума                              |\n| `frequency`            | Число                            | Частота шума                           |\n| `displacement`         | Число                            | Смещение шума                          |\n| `range_mode`           | Маркер                           | Диапазон значений                      |\n|                        | **FULL_RANGE** - От -1 до 1      |                                        |\n|                        | **ZERO_TO_ONE** - От 0 до 1      |                                        |\n| `enable_distance`      | Маркер                           | Режим расстояния                       |\n|                        | **FALSE** - Выключить            |                                        |\n|                        | **TRUE** - Включить              |                                        |",".voronoi_noise_3d":"```justcode\nvariable::voronoi_noise_3d\n```\n\n**Имя:** Шум Вороного\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Присваивает к переменной значение шума Вороного в определённом местоположении. Возвращает число, со значением от 0 до 1.\n\n**Пример использования:** \n```justcode\n`variable` = variable::voronoi_noise_3d(location(0,0,0,0,0), 1, 2, 3, \"FULL_RANGE\", \"FALSE\");\n\n//Или от объекта\n\n`variable` = location(0,0,0,0,0).voronoi_noise_3d(1, 2, 3, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую позиционно\n\nvariable::voronoi_noise_3d(`variable`, location(0,0,0,0,0), 1, 2, 3, \"FULL_RANGE\", \"FALSE\");\n\n//Или в сухую по ключам\n\nvariable::voronoi_noise_3d(variable=`variable`, location=location(0,0,0,0,0), seed=1, frequency=2, displacement=3, range_mode=\"FULL_RANGE\", enable_distance=\"FALSE\");\n```\n\n**Аргументы:**\n\n| **Имя**                | **Тип**                          | **Описание**                           |\n| :---------------- | :-------------------------- | :-------------------------------- |\n| `variable`             | Переменная                       | Переменная для присвоения              |\n| `location`             | Местоположение                   | Местоположение для установки шума      |\n| `seed`                 | Число                            | Ключ шума                              |\n| `frequency`            | Число                            | Частота шума                           |\n| `displacement`         | Число                            | Смещение шума                          |\n| `range_mode`           | Маркер                           | Диапазон значений                      |\n|                        | **FULL_RANGE** - От -1 до 1      |                                        |\n|                        | **ZERO_TO_ONE** - От 0 до 1      |                                        |\n| `enable_distance`      | Маркер                           | Режим расстояния                       |\n|                        | **FALSE** - Выключить            |                                        |\n|                        | **TRUE** - Включить              |                                        |","variable::wrap":"```justcode\nvariable::wrap\n```\n\n**Имя:** Обернуть число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Проверяет, находится ли число между двумя границами, и если нет, оборачивает его вокруг этой границы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::wrap(1, 2, 3);\n\n//Или от объекта\n\n`variable` = (1).wrap(2, 3);\n\n//Или в сухую позиционно\n\nvariable::wrap(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::wrap(variable=`variable`, number=1, min=2, max=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число для оборачивания         |\n| `min`           | Число           | Минимальное значение           |\n| `max`           | Число           | Максимальное значение          |",".wrap":"```justcode\nvariable::wrap\n```\n\n**Имя:** Обернуть число\\\n**Тип:** Действие, возращающее значение\\\n**Описание:** Проверяет, находится ли число между двумя границами, и если нет, оборачивает его вокруг этой границы.\n\n**Пример использования:** \n```justcode\n`variable` = variable::wrap(1, 2, 3);\n\n//Или от объекта\n\n`variable` = (1).wrap(2, 3);\n\n//Или в сухую позиционно\n\nvariable::wrap(`variable`, 1, 2, 3);\n\n//Или в сухую по ключам\n\nvariable::wrap(variable=`variable`, number=1, min=2, max=3);\n```\n\n**Аргументы:**\n\n| **Имя**         | **Тип**         | **Описание**                   |\n| :--------- | :--------- | :------------------------ |\n| `variable`      | Переменная      | Переменная для присвоения      |\n| `number`        | Число           | Число для оборачивания         |\n| `min`           | Число           | Минимальное значение           |\n| `max`           | Число           | Максимальное значение          |","code::start_process":"```justcode\ncode::start_process\n```\n\n**Имя:** Запустить процесс\\\n**Тип:** Действие без значения\\\n**Описание:** Запускает строку кода процесса.\n\n**Пример использования:** \n```justcode\ncode::start_process(\"process_name\", \"COPY\", \"CURRENT_SELECTION\");\n\n//Или в сухую по ключам\n\ncode::start_process(process_name=\"process_name\", local_variables_mode=\"COPY\", target_mode=\"CURRENT_SELECTION\");\n```\n\n**Аргументы:**\n\n| **Имя**                     | **Тип**                                                | **Описание**           |\n| :--------------------- | :------------------------------------------------ | :---------------- |\n| `process_name`              | Текст                                                  | Название процесса      |\n| `local_variables_mode`      | Маркер                                                 | Режим переменных       |\n|                             | **COPY** - Дублировать                                 |                        |\n|                             | **DONT_COPY** - Не дублировать                         |                        |\n|                             | **SHARE** - Общие                                      |                        |\n| `target_mode`               | Маркер                                                 | Цель процесса          |\n|                             | **CURRENT_SELECTION** - Текущая цель                   |                        |\n|                             | **CURRENT_TARGET** - Цель события                      |                        |\n|                             | **FOR_EACH_IN_SELECTION** - Каждая цель в выборке      |                        |\n|                             | **NO_TARGET** - Без цели                               |                        |"}